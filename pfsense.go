// Package pfsense provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package pfsense

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// APIAccessTokenCreate request
	APIAccessTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIDiagnosticsCommandPromptCreate request with any body
	APIDiagnosticsCommandPromptCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIDiagnosticsCommandPromptCreate(ctx context.Context, body APIDiagnosticsCommandPromptCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasDelete request
	APIFirewallAliasDelete(ctx context.Context, params *APIFirewallAliasDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasRead request
	APIFirewallAliasRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasCreate request with any body
	APIFirewallAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallAliasCreate(ctx context.Context, body APIFirewallAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasUpdate request with any body
	APIFirewallAliasUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallAliasUpdate(ctx context.Context, body APIFirewallAliasUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasAdvancedRead request
	APIFirewallAliasAdvancedRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasAdvancedUpdate request with any body
	APIFirewallAliasAdvancedUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallAliasAdvancedUpdate(ctx context.Context, body APIFirewallAliasAdvancedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasEntryDelete request
	APIFirewallAliasEntryDelete(ctx context.Context, params *APIFirewallAliasEntryDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallAliasEntryCreate request with any body
	APIFirewallAliasEntryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallAliasEntryCreate(ctx context.Context, body APIFirewallAliasEntryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallApplyCreate request with any body
	APIFirewallApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallApplyCreate(ctx context.Context, body APIFirewallApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOneToOneDelete request
	APIFirewallNATOneToOneDelete(ctx context.Context, params *APIFirewallNATOneToOneDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOneToOneRead request
	APIFirewallNATOneToOneRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOneToOneCreate request with any body
	APIFirewallNATOneToOneCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOneToOneCreate(ctx context.Context, body APIFirewallNATOneToOneCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOneToOneUpdate request with any body
	APIFirewallNATOneToOneUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOneToOneUpdate(ctx context.Context, body APIFirewallNATOneToOneUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundRead request
	APIFirewallNATOutboundRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundUpdate request with any body
	APIFirewallNATOutboundUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOutboundUpdate(ctx context.Context, body APIFirewallNATOutboundUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundMappingDelete request
	APIFirewallNATOutboundMappingDelete(ctx context.Context, params *APIFirewallNATOutboundMappingDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundMappingRead request
	APIFirewallNATOutboundMappingRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundMappingCreate request with any body
	APIFirewallNATOutboundMappingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOutboundMappingCreate(ctx context.Context, body APIFirewallNATOutboundMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundMappingUpdate request with any body
	APIFirewallNATOutboundMappingUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOutboundMappingUpdate(ctx context.Context, body APIFirewallNATOutboundMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundPortForwardDelete request
	APIFirewallNATOutboundPortForwardDelete(ctx context.Context, params *APIFirewallNATOutboundPortForwardDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundPortForwardRead request
	APIFirewallNATOutboundPortForwardRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundPortForwardCreate request with any body
	APIFirewallNATOutboundPortForwardCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOutboundPortForwardCreate(ctx context.Context, body APIFirewallNATOutboundPortForwardCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallNATOutboundPortForwardUpdate request with any body
	APIFirewallNATOutboundPortForwardUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallNATOutboundPortForwardUpdate(ctx context.Context, body APIFirewallNATOutboundPortForwardUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleDelete request
	APIFirewallRuleDelete(ctx context.Context, params *APIFirewallRuleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleRead request
	APIFirewallRuleRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleCreate request with any body
	APIFirewallRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallRuleCreate(ctx context.Context, body APIFirewallRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleUpdate request with any body
	APIFirewallRuleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallRuleUpdate(ctx context.Context, body APIFirewallRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleFlushDelete request
	APIFirewallRuleFlushDelete(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleFlushUpdate request with any body
	APIFirewallRuleFlushUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallRuleFlushUpdate(ctx context.Context, body APIFirewallRuleFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallRuleSortUpdate request with any body
	APIFirewallRuleSortUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallRuleSortUpdate(ctx context.Context, body APIFirewallRuleSortUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleDelete request
	APIFirewallScheduleDelete(ctx context.Context, params *APIFirewallScheduleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleRead request
	APIFirewallScheduleRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleCreate request with any body
	APIFirewallScheduleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallScheduleCreate(ctx context.Context, body APIFirewallScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleUpdate request with any body
	APIFirewallScheduleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallScheduleUpdate(ctx context.Context, body APIFirewallScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleTimeRangeDelete request
	APIFirewallScheduleTimeRangeDelete(ctx context.Context, params *APIFirewallScheduleTimeRangeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallScheduleTimeRangeCreate request with any body
	APIFirewallScheduleTimeRangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallScheduleTimeRangeCreate(ctx context.Context, body APIFirewallScheduleTimeRangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallStatesDelete request
	APIFirewallStatesDelete(ctx context.Context, params *APIFirewallStatesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallStatesRead request
	APIFirewallStatesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallStatesSizeRead request
	APIFirewallStatesSizeRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallStatesSizeUpdate request with any body
	APIFirewallStatesSizeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallStatesSizeUpdate(ctx context.Context, body APIFirewallStatesSizeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperDelete request
	APIFirewallTrafficShaperDelete(ctx context.Context, params *APIFirewallTrafficShaperDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperRead request
	APIFirewallTrafficShaperRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperCreate request with any body
	APIFirewallTrafficShaperCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperCreate(ctx context.Context, body APIFirewallTrafficShaperCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperUpdate request with any body
	APIFirewallTrafficShaperUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperUpdate(ctx context.Context, body APIFirewallTrafficShaperUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterDelete request
	APIFirewallTrafficShaperLimiterDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterRead request
	APIFirewallTrafficShaperLimiterRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterCreate request with any body
	APIFirewallTrafficShaperLimiterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperLimiterCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterBandwidthDelete request
	APIFirewallTrafficShaperLimiterBandwidthDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterBandwidthDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterBandwidthCreate request with any body
	APIFirewallTrafficShaperLimiterBandwidthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperLimiterBandwidthCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterBandwidthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterQueueDelete request
	APIFirewallTrafficShaperLimiterQueueDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterQueueDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperLimiterQueueCreate request with any body
	APIFirewallTrafficShaperLimiterQueueCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperLimiterQueueCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperQueueDelete request
	APIFirewallTrafficShaperQueueDelete(ctx context.Context, params *APIFirewallTrafficShaperQueueDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallTrafficShaperQueueCreate request with any body
	APIFirewallTrafficShaperQueueCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallTrafficShaperQueueCreate(ctx context.Context, body APIFirewallTrafficShaperQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallVirtualIPDelete request
	APIFirewallVirtualIPDelete(ctx context.Context, params *APIFirewallVirtualIPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallVirtualIPRead request
	APIFirewallVirtualIPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallVirtualIPCreate request with any body
	APIFirewallVirtualIPCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallVirtualIPCreate(ctx context.Context, body APIFirewallVirtualIPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIFirewallVirtualIPUpdate request with any body
	APIFirewallVirtualIPUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIFirewallVirtualIPUpdate(ctx context.Context, body APIFirewallVirtualIPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceDelete request
	APIInterfaceDelete(ctx context.Context, params *APIInterfaceDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceRead request
	APIInterfaceRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceCreate request with any body
	APIInterfaceCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceCreate(ctx context.Context, body APIInterfaceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceUpdate request with any body
	APIInterfaceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceUpdate(ctx context.Context, body APIInterfaceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceApplyRead request
	APIInterfaceApplyRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceApplyCreate request with any body
	APIInterfaceApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceApplyCreate(ctx context.Context, body APIInterfaceApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceAvailableRead request
	APIInterfaceAvailableRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceBridgeDelete request
	APIInterfaceBridgeDelete(ctx context.Context, params *APIInterfaceBridgeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceBridgeRead request
	APIInterfaceBridgeRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceBridgeCreate request with any body
	APIInterfaceBridgeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceBridgeCreate(ctx context.Context, body APIInterfaceBridgeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceBridgeUpdate request with any body
	APIInterfaceBridgeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceBridgeUpdate(ctx context.Context, body APIInterfaceBridgeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceGroupDelete request
	APIInterfaceGroupDelete(ctx context.Context, params *APIInterfaceGroupDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceGroupRead request
	APIInterfaceGroupRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceGroupCreate request with any body
	APIInterfaceGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceGroupCreate(ctx context.Context, body APIInterfaceGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceGroupUpdate request with any body
	APIInterfaceGroupUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceGroupUpdate(ctx context.Context, body APIInterfaceGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceVLANDelete request
	APIInterfaceVLANDelete(ctx context.Context, params *APIInterfaceVLANDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceVLANRead request
	APIInterfaceVLANRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceVLANCreate request with any body
	APIInterfaceVLANCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceVLANCreate(ctx context.Context, body APIInterfaceVLANCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIInterfaceVLANUpdate request with any body
	APIInterfaceVLANUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIInterfaceVLANUpdate(ctx context.Context, body APIInterfaceVLANUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingApplyCreate request
	APIRoutingApplyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayDelete request
	APIRoutingGatewayDelete(ctx context.Context, params *APIRoutingGatewayDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayRead request
	APIRoutingGatewayRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayCreate request with any body
	APIRoutingGatewayCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIRoutingGatewayCreate(ctx context.Context, body APIRoutingGatewayCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayUpdate request with any body
	APIRoutingGatewayUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIRoutingGatewayUpdate(ctx context.Context, body APIRoutingGatewayUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayDefaultUpdate request with any body
	APIRoutingGatewayDefaultUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIRoutingGatewayDefaultUpdate(ctx context.Context, body APIRoutingGatewayDefaultUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingGatewayDetailRead request
	APIRoutingGatewayDetailRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingStaticRouteDelete request
	APIRoutingStaticRouteDelete(ctx context.Context, params *APIRoutingStaticRouteDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingStaticRouteRead request
	APIRoutingStaticRouteRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingStaticRouteCreate request with any body
	APIRoutingStaticRouteCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIRoutingStaticRouteCreate(ctx context.Context, body APIRoutingStaticRouteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIRoutingStaticRouteUpdate request with any body
	APIRoutingStaticRouteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIRoutingStaticRouteUpdate(ctx context.Context, body APIRoutingStaticRouteUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesRead request
	APIServicesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDDNSRead request
	APIServicesDDNSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdRead request
	APIServicesDHCPdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdUpdate request with any body
	APIServicesDHCPdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDHCPdUpdate(ctx context.Context, body APIServicesDHCPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdLeaseRead request
	APIServicesDHCPdLeaseRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdOptionsCreate request with any body
	APIServicesDHCPdOptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDHCPdOptionsCreate(ctx context.Context, body APIServicesDHCPdOptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdRestartCreate request
	APIServicesDHCPdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStartCreate request
	APIServicesDHCPdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStaticMappingDelete request
	APIServicesDHCPdStaticMappingDelete(ctx context.Context, params *APIServicesDHCPdStaticMappingDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStaticMappingRead request
	APIServicesDHCPdStaticMappingRead(ctx context.Context, params *APIServicesDHCPdStaticMappingReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStaticMappingCreate request with any body
	APIServicesDHCPdStaticMappingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDHCPdStaticMappingCreate(ctx context.Context, body APIServicesDHCPdStaticMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStaticMappingUpdate request with any body
	APIServicesDHCPdStaticMappingUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDHCPdStaticMappingUpdate(ctx context.Context, body APIServicesDHCPdStaticMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDHCPdStopCreate request
	APIServicesDHCPdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqRead request
	APIServicesDnsmasqRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqApplyCreate request
	APIServicesDnsmasqApplyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqHostOverrideDelete request
	APIServicesDnsmasqHostOverrideDelete(ctx context.Context, params *APIServicesDnsmasqHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqHostOverrideRead request
	APIServicesDnsmasqHostOverrideRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqHostOverrideCreate request with any body
	APIServicesDnsmasqHostOverrideCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDnsmasqHostOverrideCreate(ctx context.Context, body APIServicesDnsmasqHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqHostOverrideUpdate request with any body
	APIServicesDnsmasqHostOverrideUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDnsmasqHostOverrideUpdate(ctx context.Context, body APIServicesDnsmasqHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqHostOverrideAliasCreate request with any body
	APIServicesDnsmasqHostOverrideAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesDnsmasqHostOverrideAliasCreate(ctx context.Context, body APIServicesDnsmasqHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqRestartCreate request
	APIServicesDnsmasqRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqStartCreate request
	APIServicesDnsmasqStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDnsmasqStopCreate request
	APIServicesDnsmasqStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDpingerRestartCreate request
	APIServicesDpingerRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDpingerStartCreate request
	APIServicesDpingerStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesDpingerStopCreate request
	APIServicesDpingerStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecApplyCreate request with any body
	APIServicesIPsecApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecApplyCreate(ctx context.Context, body APIServicesIPsecApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase1Delete request
	APIServicesIPsecPhase1Delete(ctx context.Context, params *APIServicesIPsecPhase1DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase1Read request
	APIServicesIPsecPhase1Read(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase1Create request with any body
	APIServicesIPsecPhase1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecPhase1Create(ctx context.Context, body APIServicesIPsecPhase1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase1Update request with any body
	APIServicesIPsecPhase1UpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecPhase1Update(ctx context.Context, body APIServicesIPsecPhase1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase1EncryptionCreate request with any body
	APIServicesIPsecPhase1EncryptionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecPhase1EncryptionCreate(ctx context.Context, body APIServicesIPsecPhase1EncryptionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase2Delete request
	APIServicesIPsecPhase2Delete(ctx context.Context, params *APIServicesIPsecPhase2DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase2Read request
	APIServicesIPsecPhase2Read(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase2Create request with any body
	APIServicesIPsecPhase2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecPhase2Create(ctx context.Context, body APIServicesIPsecPhase2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesIPsecPhase2Update request with any body
	APIServicesIPsecPhase2UpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesIPsecPhase2Update(ctx context.Context, body APIServicesIPsecPhase2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdRead request
	APIServicesNTPdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdUpdate request with any body
	APIServicesNTPdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesNTPdUpdate(ctx context.Context, body APIServicesNTPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdRestartCreate request
	APIServicesNTPdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdStartCreate request
	APIServicesNTPdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdStopCreate request
	APIServicesNTPdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdTimeServerDelete request
	APIServicesNTPdTimeServerDelete(ctx context.Context, params *APIServicesNTPdTimeServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesNTPdTimeServerCreate request with any body
	APIServicesNTPdTimeServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesNTPdTimeServerCreate(ctx context.Context, body APIServicesNTPdTimeServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientRead request
	APIServicesOpenVPNClientRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientCreate request with any body
	APIServicesOpenVPNClientCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNClientCreate(ctx context.Context, body APIServicesOpenVPNClientCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientUpdate request with any body
	APIServicesOpenVPNClientUpdateWithBody(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNClientUpdate(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, body APIServicesOpenVPNClientUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientSpecificOverridesDelete request
	APIServicesOpenVPNClientSpecificOverridesDelete(ctx context.Context, params *APIServicesOpenVPNClientSpecificOverridesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientSpecificOverridesRead request
	APIServicesOpenVPNClientSpecificOverridesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientSpecificOverridesCreate request with any body
	APIServicesOpenVPNClientSpecificOverridesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNClientSpecificOverridesCreate(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNClientSpecificOverridesUpdate request with any body
	APIServicesOpenVPNClientSpecificOverridesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNClientSpecificOverridesUpdate(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNServerRead request
	APIServicesOpenVPNServerRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNServerCreate request with any body
	APIServicesOpenVPNServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNServerCreate(ctx context.Context, body APIServicesOpenVPNServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesOpenVPNServerUpdate request with any body
	APIServicesOpenVPNServerUpdateWithBody(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesOpenVPNServerUpdate(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, body APIServicesOpenVPNServerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesRestartCreate request with any body
	APIServicesRestartCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesRestartCreate(ctx context.Context, body APIServicesRestartCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesServiceWatchdogRead request
	APIServicesServiceWatchdogRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesServiceWatchdogUpdate request with any body
	APIServicesServiceWatchdogUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesServiceWatchdogUpdate(ctx context.Context, body APIServicesServiceWatchdogUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSSHdRead request
	APIServicesSSHdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSSHdUpdate request with any body
	APIServicesSSHdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesSSHdUpdate(ctx context.Context, body APIServicesSSHdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSSHdRestartCreate request
	APIServicesSSHdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSSHdStartCreate request
	APIServicesSSHdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSSHdStopCreate request
	APIServicesSSHdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesStartCreate request
	APIServicesStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesStopCreate request with any body
	APIServicesStopCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesStopCreate(ctx context.Context, body APIServicesStopCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSyslogdRestartCreate request
	APIServicesSyslogdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSyslogdStartCreate request
	APIServicesSyslogdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesSyslogdStopCreate request
	APIServicesSyslogdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundRead request
	APIServicesUnboundRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundAccessListDelete request
	APIServicesUnboundAccessListDelete(ctx context.Context, params *APIServicesUnboundAccessListDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundAccessListRead request
	APIServicesUnboundAccessListRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundAccessListCreate request with any body
	APIServicesUnboundAccessListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundAccessListCreate(ctx context.Context, body APIServicesUnboundAccessListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundAccessListUpdate request with any body
	APIServicesUnboundAccessListUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundAccessListUpdate(ctx context.Context, body APIServicesUnboundAccessListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundAccessListRowCreate request with any body
	APIServicesUnboundAccessListRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundAccessListRowCreate(ctx context.Context, body APIServicesUnboundAccessListRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundApplyRead request
	APIServicesUnboundApplyRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundApplyCreate request with any body
	APIServicesUnboundApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundApplyCreate(ctx context.Context, body APIServicesUnboundApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideDelete request
	APIServicesUnboundHostOverrideDelete(ctx context.Context, params *APIServicesUnboundHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideRead request
	APIServicesUnboundHostOverrideRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideCreate request with any body
	APIServicesUnboundHostOverrideCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundHostOverrideCreate(ctx context.Context, body APIServicesUnboundHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideUpdate request with any body
	APIServicesUnboundHostOverrideUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundHostOverrideUpdate(ctx context.Context, body APIServicesUnboundHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideAliasCreate request with any body
	APIServicesUnboundHostOverrideAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundHostOverrideAliasCreate(ctx context.Context, body APIServicesUnboundHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideFlushDelete request
	APIServicesUnboundHostOverrideFlushDelete(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundHostOverrideFlushUpdate request with any body
	APIServicesUnboundHostOverrideFlushUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesUnboundHostOverrideFlushUpdate(ctx context.Context, body APIServicesUnboundHostOverrideFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundRestartCreate request
	APIServicesUnboundRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundStartCreate request
	APIServicesUnboundStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesUnboundStopCreate request
	APIServicesUnboundStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIServicesWOLSendCreate request with any body
	APIServicesWOLSendCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIServicesWOLSendCreate(ctx context.Context, body APIServicesWOLSendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusCARPRead request
	APIStatusCARPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusCARPUpdate request with any body
	APIStatusCARPUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIStatusCARPUpdate(ctx context.Context, body APIStatusCARPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusGatewayRead request
	APIStatusGatewayRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusInterfaceRead request
	APIStatusInterfaceRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusIPsecRead request
	APIStatusIPsecRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusLogConfigHistoryRead request
	APIStatusLogConfigHistoryRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusLogDHCPRead request
	APIStatusLogDHCPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusLogFirewallRead request
	APIStatusLogFirewallRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusLogSettingsUpdate request with any body
	APIStatusLogSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIStatusLogSettingsUpdate(ctx context.Context, body APIStatusLogSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusLogSystemRead request
	APIStatusLogSystemRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusOpenVPNRead request
	APIStatusOpenVPNRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIStatusSystemRead request
	APIStatusSystemRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemAPIRead request
	APISystemAPIRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemAPIUpdate request with any body
	APISystemAPIUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemAPIUpdate(ctx context.Context, body APISystemAPIUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemAPIErrorRead request
	APISystemAPIErrorRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemAPIVersionRead request
	APISystemAPIVersionRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemARPDelete request
	APISystemARPDelete(ctx context.Context, params *APISystemARPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemARPRead request
	APISystemARPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCADelete request
	APISystemCADelete(ctx context.Context, params *APISystemCADeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCARead request
	APISystemCARead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCACreate request with any body
	APISystemCACreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemCACreate(ctx context.Context, body APISystemCACreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCertificateDelete request
	APISystemCertificateDelete(ctx context.Context, params *APISystemCertificateDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCertificateRead request
	APISystemCertificateRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCertificateCreate request with any body
	APISystemCertificateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemCertificateCreate(ctx context.Context, body APISystemCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCertificateUpdate request with any body
	APISystemCertificateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemCertificateUpdate(ctx context.Context, body APISystemCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemConfigRead request
	APISystemConfigRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemConfigUpdate request with any body
	APISystemConfigUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemConsoleUpdate request with any body
	APISystemConsoleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemConsoleUpdate(ctx context.Context, body APISystemConsoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCRLDelete request
	APISystemCRLDelete(ctx context.Context, params *APISystemCRLDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCRLRead request
	APISystemCRLRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemCRLCreate request with any body
	APISystemCRLCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemCRLCreate(ctx context.Context, body APISystemCRLCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemDNSRead request
	APISystemDNSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemDNSUpdate request with any body
	APISystemDNSUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemDNSUpdate(ctx context.Context, body APISystemDNSUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemDNSServerDelete request
	APISystemDNSServerDelete(ctx context.Context, params *APISystemDNSServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemDNSServerCreate request with any body
	APISystemDNSServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemDNSServerCreate(ctx context.Context, body APISystemDNSServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemHaltCreate request
	APISystemHaltCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemHostnameRead request
	APISystemHostnameRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemHostnameUpdate request with any body
	APISystemHostnameUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemHostnameUpdate(ctx context.Context, body APISystemHostnameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemNotificationsEmailRead request
	APISystemNotificationsEmailRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemNotificationsEmailUpdate request with any body
	APISystemNotificationsEmailUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemNotificationsEmailUpdate(ctx context.Context, body APISystemNotificationsEmailUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemPackageDelete request
	APISystemPackageDelete(ctx context.Context, params *APISystemPackageDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemPackageRead request
	APISystemPackageRead(ctx context.Context, params *APISystemPackageReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemPackageCreate request with any body
	APISystemPackageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemPackageCreate(ctx context.Context, body APISystemPackageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemRebootCreate request
	APISystemRebootCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemTableRead request
	APISystemTableRead(ctx context.Context, params *APISystemTableReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemTunableDelete request
	APISystemTunableDelete(ctx context.Context, params *APISystemTunableDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemTunableRead request
	APISystemTunableRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemTunableCreate request with any body
	APISystemTunableCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemTunableCreate(ctx context.Context, body APISystemTunableCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemTunableUpdate request with any body
	APISystemTunableUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APISystemTunableUpdate(ctx context.Context, body APISystemTunableUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemVersionRead request
	APISystemVersionRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APISystemVersionUpgradeRead request
	APISystemVersionUpgradeRead(ctx context.Context, params *APISystemVersionUpgradeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserDelete request
	APIUserDelete(ctx context.Context, params *APIUserDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserRead request
	APIUserRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserCreate request with any body
	APIUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserCreate(ctx context.Context, body APIUserCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserUpdate request with any body
	APIUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserUpdate(ctx context.Context, body APIUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerDelete request
	APIUserAuthServerDelete(ctx context.Context, params *APIUserAuthServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerRead request
	APIUserAuthServerRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerLDAPDelete request
	APIUserAuthServerLDAPDelete(ctx context.Context, params *APIUserAuthServerLDAPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerLDAPRead request
	APIUserAuthServerLDAPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerLDAPCreate request with any body
	APIUserAuthServerLDAPCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserAuthServerLDAPCreate(ctx context.Context, body APIUserAuthServerLDAPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerRADIUSDelete request
	APIUserAuthServerRADIUSDelete(ctx context.Context, params *APIUserAuthServerRADIUSDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerRADIUSRead request
	APIUserAuthServerRADIUSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserAuthServerRADIUSCreate request with any body
	APIUserAuthServerRADIUSCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserAuthServerRADIUSCreate(ctx context.Context, body APIUserAuthServerRADIUSCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupDelete request
	APIUserGroupDelete(ctx context.Context, params *APIUserGroupDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupRead request
	APIUserGroupRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupCreate request with any body
	APIUserGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserGroupCreate(ctx context.Context, body APIUserGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupUpdate request with any body
	APIUserGroupUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserGroupUpdate(ctx context.Context, body APIUserGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupMemberDelete request
	APIUserGroupMemberDelete(ctx context.Context, params *APIUserGroupMemberDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserGroupMemberCreate request with any body
	APIUserGroupMemberCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserGroupMemberCreate(ctx context.Context, body APIUserGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserPrivilegeDelete request
	APIUserPrivilegeDelete(ctx context.Context, params *APIUserPrivilegeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUserPrivilegeCreate request with any body
	APIUserPrivilegeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	APIUserPrivilegeCreate(ctx context.Context, body APIUserPrivilegeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) APIAccessTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIAccessTokenCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIDiagnosticsCommandPromptCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIDiagnosticsCommandPromptCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIDiagnosticsCommandPromptCreate(ctx context.Context, body APIDiagnosticsCommandPromptCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIDiagnosticsCommandPromptCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasDelete(ctx context.Context, params *APIFirewallAliasDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasCreate(ctx context.Context, body APIFirewallAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasUpdate(ctx context.Context, body APIFirewallAliasUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasAdvancedRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasAdvancedReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasAdvancedUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasAdvancedUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasAdvancedUpdate(ctx context.Context, body APIFirewallAliasAdvancedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasAdvancedUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasEntryDelete(ctx context.Context, params *APIFirewallAliasEntryDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasEntryDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasEntryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasEntryCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallAliasEntryCreate(ctx context.Context, body APIFirewallAliasEntryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallAliasEntryCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallApplyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallApplyCreate(ctx context.Context, body APIFirewallApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallApplyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneDelete(ctx context.Context, params *APIFirewallNATOneToOneDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneCreate(ctx context.Context, body APIFirewallNATOneToOneCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOneToOneUpdate(ctx context.Context, body APIFirewallNATOneToOneUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOneToOneUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundUpdate(ctx context.Context, body APIFirewallNATOutboundUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingDelete(ctx context.Context, params *APIFirewallNATOutboundMappingDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingCreate(ctx context.Context, body APIFirewallNATOutboundMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundMappingUpdate(ctx context.Context, body APIFirewallNATOutboundMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundMappingUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardDelete(ctx context.Context, params *APIFirewallNATOutboundPortForwardDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardCreate(ctx context.Context, body APIFirewallNATOutboundPortForwardCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallNATOutboundPortForwardUpdate(ctx context.Context, body APIFirewallNATOutboundPortForwardUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallNATOutboundPortForwardUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleDelete(ctx context.Context, params *APIFirewallRuleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleCreate(ctx context.Context, body APIFirewallRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleUpdate(ctx context.Context, body APIFirewallRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleFlushDelete(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleFlushDeleteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleFlushUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleFlushUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleFlushUpdate(ctx context.Context, body APIFirewallRuleFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleFlushUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleSortUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleSortUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallRuleSortUpdate(ctx context.Context, body APIFirewallRuleSortUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallRuleSortUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleDelete(ctx context.Context, params *APIFirewallScheduleDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleCreate(ctx context.Context, body APIFirewallScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleUpdate(ctx context.Context, body APIFirewallScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleTimeRangeDelete(ctx context.Context, params *APIFirewallScheduleTimeRangeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleTimeRangeDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleTimeRangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleTimeRangeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallScheduleTimeRangeCreate(ctx context.Context, body APIFirewallScheduleTimeRangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallScheduleTimeRangeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallStatesDelete(ctx context.Context, params *APIFirewallStatesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallStatesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallStatesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallStatesReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallStatesSizeRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallStatesSizeReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallStatesSizeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallStatesSizeUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallStatesSizeUpdate(ctx context.Context, body APIFirewallStatesSizeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallStatesSizeUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperDelete(ctx context.Context, params *APIFirewallTrafficShaperDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperCreate(ctx context.Context, body APIFirewallTrafficShaperCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperUpdate(ctx context.Context, body APIFirewallTrafficShaperUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterBandwidthDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterBandwidthDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterBandwidthDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterBandwidthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterBandwidthCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterBandwidthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterQueueDelete(ctx context.Context, params *APIFirewallTrafficShaperLimiterQueueDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterQueueDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterQueueCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterQueueCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperLimiterQueueCreate(ctx context.Context, body APIFirewallTrafficShaperLimiterQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperLimiterQueueCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperQueueDelete(ctx context.Context, params *APIFirewallTrafficShaperQueueDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperQueueDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperQueueCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperQueueCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallTrafficShaperQueueCreate(ctx context.Context, body APIFirewallTrafficShaperQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallTrafficShaperQueueCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPDelete(ctx context.Context, params *APIFirewallVirtualIPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPCreate(ctx context.Context, body APIFirewallVirtualIPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIFirewallVirtualIPUpdate(ctx context.Context, body APIFirewallVirtualIPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIFirewallVirtualIPUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceDelete(ctx context.Context, params *APIInterfaceDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceCreate(ctx context.Context, body APIInterfaceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceUpdate(ctx context.Context, body APIInterfaceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceApplyRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceApplyReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceApplyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceApplyCreate(ctx context.Context, body APIInterfaceApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceApplyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceAvailableRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceAvailableReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeDelete(ctx context.Context, params *APIInterfaceBridgeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeCreate(ctx context.Context, body APIInterfaceBridgeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceBridgeUpdate(ctx context.Context, body APIInterfaceBridgeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceBridgeUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupDelete(ctx context.Context, params *APIInterfaceGroupDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupCreate(ctx context.Context, body APIInterfaceGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceGroupUpdate(ctx context.Context, body APIInterfaceGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceGroupUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANDelete(ctx context.Context, params *APIInterfaceVLANDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANCreate(ctx context.Context, body APIInterfaceVLANCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIInterfaceVLANUpdate(ctx context.Context, body APIInterfaceVLANUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIInterfaceVLANUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingApplyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingApplyCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayDelete(ctx context.Context, params *APIRoutingGatewayDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayCreate(ctx context.Context, body APIRoutingGatewayCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayUpdate(ctx context.Context, body APIRoutingGatewayUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayDefaultUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayDefaultUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayDefaultUpdate(ctx context.Context, body APIRoutingGatewayDefaultUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayDefaultUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingGatewayDetailRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingGatewayDetailReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteDelete(ctx context.Context, params *APIRoutingStaticRouteDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteCreate(ctx context.Context, body APIRoutingStaticRouteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIRoutingStaticRouteUpdate(ctx context.Context, body APIRoutingStaticRouteUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIRoutingStaticRouteUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDDNSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDDNSReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdUpdate(ctx context.Context, body APIServicesDHCPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdLeaseRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdLeaseReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdOptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdOptionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdOptionsCreate(ctx context.Context, body APIServicesDHCPdOptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdOptionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingDelete(ctx context.Context, params *APIServicesDHCPdStaticMappingDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingRead(ctx context.Context, params *APIServicesDHCPdStaticMappingReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingReadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingCreate(ctx context.Context, body APIServicesDHCPdStaticMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStaticMappingUpdate(ctx context.Context, body APIServicesDHCPdStaticMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStaticMappingUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDHCPdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDHCPdStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqApplyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqApplyCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideDelete(ctx context.Context, params *APIServicesDnsmasqHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideCreate(ctx context.Context, body APIServicesDnsmasqHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideUpdate(ctx context.Context, body APIServicesDnsmasqHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideAliasCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqHostOverrideAliasCreate(ctx context.Context, body APIServicesDnsmasqHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqHostOverrideAliasCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDnsmasqStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDnsmasqStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDpingerRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDpingerRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDpingerStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDpingerStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesDpingerStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesDpingerStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecApplyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecApplyCreate(ctx context.Context, body APIServicesIPsecApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecApplyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1Delete(ctx context.Context, params *APIServicesIPsecPhase1DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1DeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1Read(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1ReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1Create(ctx context.Context, body APIServicesIPsecPhase1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1UpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1UpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1Update(ctx context.Context, body APIServicesIPsecPhase1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1UpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1EncryptionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1EncryptionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase1EncryptionCreate(ctx context.Context, body APIServicesIPsecPhase1EncryptionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase1EncryptionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2Delete(ctx context.Context, params *APIServicesIPsecPhase2DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2DeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2Read(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2ReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2Create(ctx context.Context, body APIServicesIPsecPhase2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2UpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2UpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesIPsecPhase2Update(ctx context.Context, body APIServicesIPsecPhase2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesIPsecPhase2UpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdUpdate(ctx context.Context, body APIServicesNTPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdTimeServerDelete(ctx context.Context, params *APIServicesNTPdTimeServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdTimeServerDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdTimeServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdTimeServerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesNTPdTimeServerCreate(ctx context.Context, body APIServicesNTPdTimeServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesNTPdTimeServerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientCreate(ctx context.Context, body APIServicesOpenVPNClientCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientUpdateWithBody(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientUpdate(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, body APIServicesOpenVPNClientUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesDelete(ctx context.Context, params *APIServicesOpenVPNClientSpecificOverridesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesCreate(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNClientSpecificOverridesUpdate(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNServerRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNServerReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNServerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNServerCreate(ctx context.Context, body APIServicesOpenVPNServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNServerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNServerUpdateWithBody(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNServerUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesOpenVPNServerUpdate(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, body APIServicesOpenVPNServerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesOpenVPNServerUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesRestartCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesRestartCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesRestartCreate(ctx context.Context, body APIServicesRestartCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesRestartCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesServiceWatchdogRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesServiceWatchdogReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesServiceWatchdogUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesServiceWatchdogUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesServiceWatchdogUpdate(ctx context.Context, body APIServicesServiceWatchdogUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesServiceWatchdogUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdUpdate(ctx context.Context, body APIServicesSSHdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSSHdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSSHdStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesStopCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesStopCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesStopCreate(ctx context.Context, body APIServicesStopCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesStopCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSyslogdRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSyslogdRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSyslogdStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSyslogdStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesSyslogdStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesSyslogdStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListDelete(ctx context.Context, params *APIServicesUnboundAccessListDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListCreate(ctx context.Context, body APIServicesUnboundAccessListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListUpdate(ctx context.Context, body APIServicesUnboundAccessListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundAccessListRowCreate(ctx context.Context, body APIServicesUnboundAccessListRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundAccessListRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundApplyRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundApplyReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundApplyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundApplyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundApplyCreate(ctx context.Context, body APIServicesUnboundApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundApplyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideDelete(ctx context.Context, params *APIServicesUnboundHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideCreate(ctx context.Context, body APIServicesUnboundHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideUpdate(ctx context.Context, body APIServicesUnboundHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideAliasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideAliasCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideAliasCreate(ctx context.Context, body APIServicesUnboundHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideAliasCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideFlushDelete(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideFlushDeleteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideFlushUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideFlushUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundHostOverrideFlushUpdate(ctx context.Context, body APIServicesUnboundHostOverrideFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundHostOverrideFlushUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundRestartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundRestartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundStartCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundStartCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesUnboundStopCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesUnboundStopCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesWOLSendCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesWOLSendCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIServicesWOLSendCreate(ctx context.Context, body APIServicesWOLSendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIServicesWOLSendCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusCARPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusCARPReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusCARPUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusCARPUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusCARPUpdate(ctx context.Context, body APIStatusCARPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusCARPUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusGatewayRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusGatewayReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusInterfaceRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusInterfaceReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusIPsecRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusIPsecReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogConfigHistoryRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogConfigHistoryReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogDHCPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogDHCPReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogFirewallRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogFirewallReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogSettingsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogSettingsUpdate(ctx context.Context, body APIStatusLogSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogSettingsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusLogSystemRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusLogSystemReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusOpenVPNRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusOpenVPNReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIStatusSystemRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIStatusSystemReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemAPIRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemAPIReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemAPIUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemAPIUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemAPIUpdate(ctx context.Context, body APISystemAPIUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemAPIUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemAPIErrorRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemAPIErrorReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemAPIVersionRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemAPIVersionReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemARPDelete(ctx context.Context, params *APISystemARPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemARPDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemARPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemARPReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCADelete(ctx context.Context, params *APISystemCADeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCADeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCARead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCAReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCACreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCACreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCACreate(ctx context.Context, body APISystemCACreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCACreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateDelete(ctx context.Context, params *APISystemCertificateDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateCreate(ctx context.Context, body APISystemCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCertificateUpdate(ctx context.Context, body APISystemCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCertificateUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemConfigRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemConfigReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemConfigUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemConfigUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemConsoleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemConsoleUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemConsoleUpdate(ctx context.Context, body APISystemConsoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemConsoleUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCRLDelete(ctx context.Context, params *APISystemCRLDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCRLDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCRLRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCRLReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCRLCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCRLCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemCRLCreate(ctx context.Context, body APISystemCRLCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemCRLCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSUpdate(ctx context.Context, body APISystemDNSUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSServerDelete(ctx context.Context, params *APISystemDNSServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSServerDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSServerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSServerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemDNSServerCreate(ctx context.Context, body APISystemDNSServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemDNSServerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemHaltCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemHaltCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemHostnameRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemHostnameReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemHostnameUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemHostnameUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemHostnameUpdate(ctx context.Context, body APISystemHostnameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemHostnameUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemNotificationsEmailRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemNotificationsEmailReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemNotificationsEmailUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemNotificationsEmailUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemNotificationsEmailUpdate(ctx context.Context, body APISystemNotificationsEmailUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemNotificationsEmailUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemPackageDelete(ctx context.Context, params *APISystemPackageDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemPackageDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemPackageRead(ctx context.Context, params *APISystemPackageReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemPackageReadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemPackageCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemPackageCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemPackageCreate(ctx context.Context, body APISystemPackageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemPackageCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemRebootCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemRebootCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTableRead(ctx context.Context, params *APISystemTableReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTableReadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableDelete(ctx context.Context, params *APISystemTunableDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableCreate(ctx context.Context, body APISystemTunableCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemTunableUpdate(ctx context.Context, body APISystemTunableUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemTunableUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemVersionRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemVersionReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APISystemVersionUpgradeRead(ctx context.Context, params *APISystemVersionUpgradeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPISystemVersionUpgradeReadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserDelete(ctx context.Context, params *APIUserDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserCreate(ctx context.Context, body APIUserCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserUpdate(ctx context.Context, body APIUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerDelete(ctx context.Context, params *APIUserAuthServerDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerLDAPDelete(ctx context.Context, params *APIUserAuthServerLDAPDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerLDAPDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerLDAPRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerLDAPReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerLDAPCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerLDAPCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerLDAPCreate(ctx context.Context, body APIUserAuthServerLDAPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerLDAPCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerRADIUSDelete(ctx context.Context, params *APIUserAuthServerRADIUSDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerRADIUSDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerRADIUSRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerRADIUSReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerRADIUSCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerRADIUSCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserAuthServerRADIUSCreate(ctx context.Context, body APIUserAuthServerRADIUSCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserAuthServerRADIUSCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupDelete(ctx context.Context, params *APIUserGroupDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupCreate(ctx context.Context, body APIUserGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupUpdate(ctx context.Context, body APIUserGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupMemberDelete(ctx context.Context, params *APIUserGroupMemberDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupMemberDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupMemberCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupMemberCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserGroupMemberCreate(ctx context.Context, body APIUserGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserGroupMemberCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserPrivilegeDelete(ctx context.Context, params *APIUserPrivilegeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserPrivilegeDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserPrivilegeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserPrivilegeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUserPrivilegeCreate(ctx context.Context, body APIUserPrivilegeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserPrivilegeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAPIAccessTokenCreateRequest generates requests for APIAccessTokenCreate
func NewAPIAccessTokenCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/access_token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIDiagnosticsCommandPromptCreateRequest calls the generic APIDiagnosticsCommandPromptCreate builder with application/json body
func NewAPIDiagnosticsCommandPromptCreateRequest(server string, body APIDiagnosticsCommandPromptCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIDiagnosticsCommandPromptCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIDiagnosticsCommandPromptCreateRequestWithBody generates requests for APIDiagnosticsCommandPromptCreate with any type of body
func NewAPIDiagnosticsCommandPromptCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/diagnostics/command_prompt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallAliasDeleteRequest generates requests for APIFirewallAliasDelete
func NewAPIFirewallAliasDeleteRequest(server string, params *APIFirewallAliasDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallAliasReadRequest generates requests for APIFirewallAliasRead
func NewAPIFirewallAliasReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallAliasCreateRequest calls the generic APIFirewallAliasCreate builder with application/json body
func NewAPIFirewallAliasCreateRequest(server string, body APIFirewallAliasCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallAliasCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallAliasCreateRequestWithBody generates requests for APIFirewallAliasCreate with any type of body
func NewAPIFirewallAliasCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallAliasUpdateRequest calls the generic APIFirewallAliasUpdate builder with application/json body
func NewAPIFirewallAliasUpdateRequest(server string, body APIFirewallAliasUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallAliasUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallAliasUpdateRequestWithBody generates requests for APIFirewallAliasUpdate with any type of body
func NewAPIFirewallAliasUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallAliasAdvancedReadRequest generates requests for APIFirewallAliasAdvancedRead
func NewAPIFirewallAliasAdvancedReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias/advanced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallAliasAdvancedUpdateRequest calls the generic APIFirewallAliasAdvancedUpdate builder with application/json body
func NewAPIFirewallAliasAdvancedUpdateRequest(server string, body APIFirewallAliasAdvancedUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallAliasAdvancedUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallAliasAdvancedUpdateRequestWithBody generates requests for APIFirewallAliasAdvancedUpdate with any type of body
func NewAPIFirewallAliasAdvancedUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias/advanced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallAliasEntryDeleteRequest generates requests for APIFirewallAliasEntryDelete
func NewAPIFirewallAliasEntryDeleteRequest(server string, params *APIFirewallAliasEntryDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias/entry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallAliasEntryCreateRequest calls the generic APIFirewallAliasEntryCreate builder with application/json body
func NewAPIFirewallAliasEntryCreateRequest(server string, body APIFirewallAliasEntryCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallAliasEntryCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallAliasEntryCreateRequestWithBody generates requests for APIFirewallAliasEntryCreate with any type of body
func NewAPIFirewallAliasEntryCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/alias/entry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallApplyCreateRequest calls the generic APIFirewallApplyCreate builder with application/json body
func NewAPIFirewallApplyCreateRequest(server string, body APIFirewallApplyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallApplyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallApplyCreateRequestWithBody generates requests for APIFirewallApplyCreate with any type of body
func NewAPIFirewallApplyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOneToOneDeleteRequest generates requests for APIFirewallNATOneToOneDelete
func NewAPIFirewallNATOneToOneDeleteRequest(server string, params *APIFirewallNATOneToOneDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/one_to_one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOneToOneReadRequest generates requests for APIFirewallNATOneToOneRead
func NewAPIFirewallNATOneToOneReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/one_to_one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOneToOneCreateRequest calls the generic APIFirewallNATOneToOneCreate builder with application/json body
func NewAPIFirewallNATOneToOneCreateRequest(server string, body APIFirewallNATOneToOneCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOneToOneCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOneToOneCreateRequestWithBody generates requests for APIFirewallNATOneToOneCreate with any type of body
func NewAPIFirewallNATOneToOneCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/one_to_one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOneToOneUpdateRequest calls the generic APIFirewallNATOneToOneUpdate builder with application/json body
func NewAPIFirewallNATOneToOneUpdateRequest(server string, body APIFirewallNATOneToOneUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOneToOneUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOneToOneUpdateRequestWithBody generates requests for APIFirewallNATOneToOneUpdate with any type of body
func NewAPIFirewallNATOneToOneUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/one_to_one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOutboundReadRequest generates requests for APIFirewallNATOutboundRead
func NewAPIFirewallNATOutboundReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOutboundUpdateRequest calls the generic APIFirewallNATOutboundUpdate builder with application/json body
func NewAPIFirewallNATOutboundUpdateRequest(server string, body APIFirewallNATOutboundUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOutboundUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOutboundUpdateRequestWithBody generates requests for APIFirewallNATOutboundUpdate with any type of body
func NewAPIFirewallNATOutboundUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOutboundMappingDeleteRequest generates requests for APIFirewallNATOutboundMappingDelete
func NewAPIFirewallNATOutboundMappingDeleteRequest(server string, params *APIFirewallNATOutboundMappingDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound/mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOutboundMappingReadRequest generates requests for APIFirewallNATOutboundMappingRead
func NewAPIFirewallNATOutboundMappingReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound/mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOutboundMappingCreateRequest calls the generic APIFirewallNATOutboundMappingCreate builder with application/json body
func NewAPIFirewallNATOutboundMappingCreateRequest(server string, body APIFirewallNATOutboundMappingCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOutboundMappingCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOutboundMappingCreateRequestWithBody generates requests for APIFirewallNATOutboundMappingCreate with any type of body
func NewAPIFirewallNATOutboundMappingCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound/mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOutboundMappingUpdateRequest calls the generic APIFirewallNATOutboundMappingUpdate builder with application/json body
func NewAPIFirewallNATOutboundMappingUpdateRequest(server string, body APIFirewallNATOutboundMappingUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOutboundMappingUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOutboundMappingUpdateRequestWithBody generates requests for APIFirewallNATOutboundMappingUpdate with any type of body
func NewAPIFirewallNATOutboundMappingUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/outbound/mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOutboundPortForwardDeleteRequest generates requests for APIFirewallNATOutboundPortForwardDelete
func NewAPIFirewallNATOutboundPortForwardDeleteRequest(server string, params *APIFirewallNATOutboundPortForwardDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/port_forward")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOutboundPortForwardReadRequest generates requests for APIFirewallNATOutboundPortForwardRead
func NewAPIFirewallNATOutboundPortForwardReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/port_forward")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallNATOutboundPortForwardCreateRequest calls the generic APIFirewallNATOutboundPortForwardCreate builder with application/json body
func NewAPIFirewallNATOutboundPortForwardCreateRequest(server string, body APIFirewallNATOutboundPortForwardCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOutboundPortForwardCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOutboundPortForwardCreateRequestWithBody generates requests for APIFirewallNATOutboundPortForwardCreate with any type of body
func NewAPIFirewallNATOutboundPortForwardCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/port_forward")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallNATOutboundPortForwardUpdateRequest calls the generic APIFirewallNATOutboundPortForwardUpdate builder with application/json body
func NewAPIFirewallNATOutboundPortForwardUpdateRequest(server string, body APIFirewallNATOutboundPortForwardUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallNATOutboundPortForwardUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallNATOutboundPortForwardUpdateRequestWithBody generates requests for APIFirewallNATOutboundPortForwardUpdate with any type of body
func NewAPIFirewallNATOutboundPortForwardUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/nat/port_forward")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallRuleDeleteRequest generates requests for APIFirewallRuleDelete
func NewAPIFirewallRuleDeleteRequest(server string, params *APIFirewallRuleDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tracker", runtime.ParamLocationQuery, params.Tracker); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallRuleReadRequest generates requests for APIFirewallRuleRead
func NewAPIFirewallRuleReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallRuleCreateRequest calls the generic APIFirewallRuleCreate builder with application/json body
func NewAPIFirewallRuleCreateRequest(server string, body APIFirewallRuleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallRuleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallRuleCreateRequestWithBody generates requests for APIFirewallRuleCreate with any type of body
func NewAPIFirewallRuleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallRuleUpdateRequest calls the generic APIFirewallRuleUpdate builder with application/json body
func NewAPIFirewallRuleUpdateRequest(server string, body APIFirewallRuleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallRuleUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallRuleUpdateRequestWithBody generates requests for APIFirewallRuleUpdate with any type of body
func NewAPIFirewallRuleUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallRuleFlushDeleteRequest generates requests for APIFirewallRuleFlushDelete
func NewAPIFirewallRuleFlushDeleteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule/flush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallRuleFlushUpdateRequest calls the generic APIFirewallRuleFlushUpdate builder with application/json body
func NewAPIFirewallRuleFlushUpdateRequest(server string, body APIFirewallRuleFlushUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallRuleFlushUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallRuleFlushUpdateRequestWithBody generates requests for APIFirewallRuleFlushUpdate with any type of body
func NewAPIFirewallRuleFlushUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule/flush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallRuleSortUpdateRequest calls the generic APIFirewallRuleSortUpdate builder with application/json body
func NewAPIFirewallRuleSortUpdateRequest(server string, body APIFirewallRuleSortUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallRuleSortUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallRuleSortUpdateRequestWithBody generates requests for APIFirewallRuleSortUpdate with any type of body
func NewAPIFirewallRuleSortUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/rule/sort")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallScheduleDeleteRequest generates requests for APIFirewallScheduleDelete
func NewAPIFirewallScheduleDeleteRequest(server string, params *APIFirewallScheduleDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallScheduleReadRequest generates requests for APIFirewallScheduleRead
func NewAPIFirewallScheduleReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallScheduleCreateRequest calls the generic APIFirewallScheduleCreate builder with application/json body
func NewAPIFirewallScheduleCreateRequest(server string, body APIFirewallScheduleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallScheduleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallScheduleCreateRequestWithBody generates requests for APIFirewallScheduleCreate with any type of body
func NewAPIFirewallScheduleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallScheduleUpdateRequest calls the generic APIFirewallScheduleUpdate builder with application/json body
func NewAPIFirewallScheduleUpdateRequest(server string, body APIFirewallScheduleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallScheduleUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallScheduleUpdateRequestWithBody generates requests for APIFirewallScheduleUpdate with any type of body
func NewAPIFirewallScheduleUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallScheduleTimeRangeDeleteRequest generates requests for APIFirewallScheduleTimeRangeDelete
func NewAPIFirewallScheduleTimeRangeDeleteRequest(server string, params *APIFirewallScheduleTimeRangeDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule/time_range")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallScheduleTimeRangeCreateRequest calls the generic APIFirewallScheduleTimeRangeCreate builder with application/json body
func NewAPIFirewallScheduleTimeRangeCreateRequest(server string, body APIFirewallScheduleTimeRangeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallScheduleTimeRangeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallScheduleTimeRangeCreateRequestWithBody generates requests for APIFirewallScheduleTimeRangeCreate with any type of body
func NewAPIFirewallScheduleTimeRangeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/schedule/time_range")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallStatesDeleteRequest generates requests for APIFirewallStatesDelete
func NewAPIFirewallStatesDeleteRequest(server string, params *APIFirewallStatesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Source != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Destination != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destination", runtime.ParamLocationQuery, *params.Destination); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reset", runtime.ParamLocationQuery, *params.Reset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Async != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "async", runtime.ParamLocationQuery, *params.Async); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sleep != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sleep", runtime.ParamLocationQuery, *params.Sleep); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallStatesReadRequest generates requests for APIFirewallStatesRead
func NewAPIFirewallStatesReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallStatesSizeReadRequest generates requests for APIFirewallStatesSizeRead
func NewAPIFirewallStatesSizeReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/states/size")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallStatesSizeUpdateRequest calls the generic APIFirewallStatesSizeUpdate builder with application/json body
func NewAPIFirewallStatesSizeUpdateRequest(server string, body APIFirewallStatesSizeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallStatesSizeUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallStatesSizeUpdateRequestWithBody generates requests for APIFirewallStatesSizeUpdate with any type of body
func NewAPIFirewallStatesSizeUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/states/size")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperDeleteRequest generates requests for APIFirewallTrafficShaperDelete
func NewAPIFirewallTrafficShaperDeleteRequest(server string, params *APIFirewallTrafficShaperDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interface", runtime.ParamLocationQuery, params.Interface); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperReadRequest generates requests for APIFirewallTrafficShaperRead
func NewAPIFirewallTrafficShaperReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperCreateRequest calls the generic APIFirewallTrafficShaperCreate builder with application/json body
func NewAPIFirewallTrafficShaperCreateRequest(server string, body APIFirewallTrafficShaperCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperCreateRequestWithBody generates requests for APIFirewallTrafficShaperCreate with any type of body
func NewAPIFirewallTrafficShaperCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperUpdateRequest calls the generic APIFirewallTrafficShaperUpdate builder with application/json body
func NewAPIFirewallTrafficShaperUpdateRequest(server string, body APIFirewallTrafficShaperUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperUpdateRequestWithBody generates requests for APIFirewallTrafficShaperUpdate with any type of body
func NewAPIFirewallTrafficShaperUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterDeleteRequest generates requests for APIFirewallTrafficShaperLimiterDelete
func NewAPIFirewallTrafficShaperLimiterDeleteRequest(server string, params *APIFirewallTrafficShaperLimiterDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterReadRequest generates requests for APIFirewallTrafficShaperLimiterRead
func NewAPIFirewallTrafficShaperLimiterReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterCreateRequest calls the generic APIFirewallTrafficShaperLimiterCreate builder with application/json body
func NewAPIFirewallTrafficShaperLimiterCreateRequest(server string, body APIFirewallTrafficShaperLimiterCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperLimiterCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperLimiterCreateRequestWithBody generates requests for APIFirewallTrafficShaperLimiterCreate with any type of body
func NewAPIFirewallTrafficShaperLimiterCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterBandwidthDeleteRequest generates requests for APIFirewallTrafficShaperLimiterBandwidthDelete
func NewAPIFirewallTrafficShaperLimiterBandwidthDeleteRequest(server string, params *APIFirewallTrafficShaperLimiterBandwidthDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter/bandwidth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequest calls the generic APIFirewallTrafficShaperLimiterBandwidthCreate builder with application/json body
func NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequest(server string, body APIFirewallTrafficShaperLimiterBandwidthCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequestWithBody generates requests for APIFirewallTrafficShaperLimiterBandwidthCreate with any type of body
func NewAPIFirewallTrafficShaperLimiterBandwidthCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter/bandwidth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterQueueDeleteRequest generates requests for APIFirewallTrafficShaperLimiterQueueDelete
func NewAPIFirewallTrafficShaperLimiterQueueDeleteRequest(server string, params *APIFirewallTrafficShaperLimiterQueueDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter/queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limiter", runtime.ParamLocationQuery, params.Limiter); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperLimiterQueueCreateRequest calls the generic APIFirewallTrafficShaperLimiterQueueCreate builder with application/json body
func NewAPIFirewallTrafficShaperLimiterQueueCreateRequest(server string, body APIFirewallTrafficShaperLimiterQueueCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperLimiterQueueCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperLimiterQueueCreateRequestWithBody generates requests for APIFirewallTrafficShaperLimiterQueueCreate with any type of body
func NewAPIFirewallTrafficShaperLimiterQueueCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/limiter/queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallTrafficShaperQueueDeleteRequest generates requests for APIFirewallTrafficShaperQueueDelete
func NewAPIFirewallTrafficShaperQueueDeleteRequest(server string, params *APIFirewallTrafficShaperQueueDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interface", runtime.ParamLocationQuery, params.Interface); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallTrafficShaperQueueCreateRequest calls the generic APIFirewallTrafficShaperQueueCreate builder with application/json body
func NewAPIFirewallTrafficShaperQueueCreateRequest(server string, body APIFirewallTrafficShaperQueueCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallTrafficShaperQueueCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallTrafficShaperQueueCreateRequestWithBody generates requests for APIFirewallTrafficShaperQueueCreate with any type of body
func NewAPIFirewallTrafficShaperQueueCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/traffic_shaper/queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallVirtualIPDeleteRequest generates requests for APIFirewallVirtualIPDelete
func NewAPIFirewallVirtualIPDeleteRequest(server string, params *APIFirewallVirtualIPDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/virtual_ip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallVirtualIPReadRequest generates requests for APIFirewallVirtualIPRead
func NewAPIFirewallVirtualIPReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/virtual_ip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIFirewallVirtualIPCreateRequest calls the generic APIFirewallVirtualIPCreate builder with application/json body
func NewAPIFirewallVirtualIPCreateRequest(server string, body APIFirewallVirtualIPCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallVirtualIPCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallVirtualIPCreateRequestWithBody generates requests for APIFirewallVirtualIPCreate with any type of body
func NewAPIFirewallVirtualIPCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/virtual_ip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIFirewallVirtualIPUpdateRequest calls the generic APIFirewallVirtualIPUpdate builder with application/json body
func NewAPIFirewallVirtualIPUpdateRequest(server string, body APIFirewallVirtualIPUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIFirewallVirtualIPUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIFirewallVirtualIPUpdateRequestWithBody generates requests for APIFirewallVirtualIPUpdate with any type of body
func NewAPIFirewallVirtualIPUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/firewall/virtual_ip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceDeleteRequest generates requests for APIInterfaceDelete
func NewAPIInterfaceDeleteRequest(server string, params *APIInterfaceDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "if", runtime.ParamLocationQuery, params.If); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceReadRequest generates requests for APIInterfaceRead
func NewAPIInterfaceReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceCreateRequest calls the generic APIInterfaceCreate builder with application/json body
func NewAPIInterfaceCreateRequest(server string, body APIInterfaceCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceCreateRequestWithBody generates requests for APIInterfaceCreate with any type of body
func NewAPIInterfaceCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceUpdateRequest calls the generic APIInterfaceUpdate builder with application/json body
func NewAPIInterfaceUpdateRequest(server string, body APIInterfaceUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceUpdateRequestWithBody generates requests for APIInterfaceUpdate with any type of body
func NewAPIInterfaceUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceApplyReadRequest generates requests for APIInterfaceApplyRead
func NewAPIInterfaceApplyReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceApplyCreateRequest calls the generic APIInterfaceApplyCreate builder with application/json body
func NewAPIInterfaceApplyCreateRequest(server string, body APIInterfaceApplyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceApplyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceApplyCreateRequestWithBody generates requests for APIInterfaceApplyCreate with any type of body
func NewAPIInterfaceApplyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceAvailableReadRequest generates requests for APIInterfaceAvailableRead
func NewAPIInterfaceAvailableReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceBridgeDeleteRequest generates requests for APIInterfaceBridgeDelete
func NewAPIInterfaceBridgeDeleteRequest(server string, params *APIInterfaceBridgeDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/bridge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceBridgeReadRequest generates requests for APIInterfaceBridgeRead
func NewAPIInterfaceBridgeReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/bridge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceBridgeCreateRequest calls the generic APIInterfaceBridgeCreate builder with application/json body
func NewAPIInterfaceBridgeCreateRequest(server string, body APIInterfaceBridgeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceBridgeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceBridgeCreateRequestWithBody generates requests for APIInterfaceBridgeCreate with any type of body
func NewAPIInterfaceBridgeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/bridge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceBridgeUpdateRequest calls the generic APIInterfaceBridgeUpdate builder with application/json body
func NewAPIInterfaceBridgeUpdateRequest(server string, body APIInterfaceBridgeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceBridgeUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceBridgeUpdateRequestWithBody generates requests for APIInterfaceBridgeUpdate with any type of body
func NewAPIInterfaceBridgeUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/bridge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceGroupDeleteRequest generates requests for APIInterfaceGroupDelete
func NewAPIInterfaceGroupDeleteRequest(server string, params *APIInterfaceGroupDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceGroupReadRequest generates requests for APIInterfaceGroupRead
func NewAPIInterfaceGroupReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceGroupCreateRequest calls the generic APIInterfaceGroupCreate builder with application/json body
func NewAPIInterfaceGroupCreateRequest(server string, body APIInterfaceGroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceGroupCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceGroupCreateRequestWithBody generates requests for APIInterfaceGroupCreate with any type of body
func NewAPIInterfaceGroupCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceGroupUpdateRequest calls the generic APIInterfaceGroupUpdate builder with application/json body
func NewAPIInterfaceGroupUpdateRequest(server string, body APIInterfaceGroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceGroupUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceGroupUpdateRequestWithBody generates requests for APIInterfaceGroupUpdate with any type of body
func NewAPIInterfaceGroupUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceVLANDeleteRequest generates requests for APIInterfaceVLANDelete
func NewAPIInterfaceVLANDeleteRequest(server string, params *APIInterfaceVLANDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceVLANReadRequest generates requests for APIInterfaceVLANRead
func NewAPIInterfaceVLANReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIInterfaceVLANCreateRequest calls the generic APIInterfaceVLANCreate builder with application/json body
func NewAPIInterfaceVLANCreateRequest(server string, body APIInterfaceVLANCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceVLANCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceVLANCreateRequestWithBody generates requests for APIInterfaceVLANCreate with any type of body
func NewAPIInterfaceVLANCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIInterfaceVLANUpdateRequest calls the generic APIInterfaceVLANUpdate builder with application/json body
func NewAPIInterfaceVLANUpdateRequest(server string, body APIInterfaceVLANUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIInterfaceVLANUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIInterfaceVLANUpdateRequestWithBody generates requests for APIInterfaceVLANUpdate with any type of body
func NewAPIInterfaceVLANUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/interface/vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIRoutingApplyCreateRequest generates requests for APIRoutingApplyCreate
func NewAPIRoutingApplyCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingGatewayDeleteRequest generates requests for APIRoutingGatewayDelete
func NewAPIRoutingGatewayDeleteRequest(server string, params *APIRoutingGatewayDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingGatewayReadRequest generates requests for APIRoutingGatewayRead
func NewAPIRoutingGatewayReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingGatewayCreateRequest calls the generic APIRoutingGatewayCreate builder with application/json body
func NewAPIRoutingGatewayCreateRequest(server string, body APIRoutingGatewayCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIRoutingGatewayCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIRoutingGatewayCreateRequestWithBody generates requests for APIRoutingGatewayCreate with any type of body
func NewAPIRoutingGatewayCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIRoutingGatewayUpdateRequest calls the generic APIRoutingGatewayUpdate builder with application/json body
func NewAPIRoutingGatewayUpdateRequest(server string, body APIRoutingGatewayUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIRoutingGatewayUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIRoutingGatewayUpdateRequestWithBody generates requests for APIRoutingGatewayUpdate with any type of body
func NewAPIRoutingGatewayUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIRoutingGatewayDefaultUpdateRequest calls the generic APIRoutingGatewayDefaultUpdate builder with application/json body
func NewAPIRoutingGatewayDefaultUpdateRequest(server string, body APIRoutingGatewayDefaultUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIRoutingGatewayDefaultUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIRoutingGatewayDefaultUpdateRequestWithBody generates requests for APIRoutingGatewayDefaultUpdate with any type of body
func NewAPIRoutingGatewayDefaultUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway/default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIRoutingGatewayDetailReadRequest generates requests for APIRoutingGatewayDetailRead
func NewAPIRoutingGatewayDetailReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/gateway/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingStaticRouteDeleteRequest generates requests for APIRoutingStaticRouteDelete
func NewAPIRoutingStaticRouteDeleteRequest(server string, params *APIRoutingStaticRouteDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/static_route")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingStaticRouteReadRequest generates requests for APIRoutingStaticRouteRead
func NewAPIRoutingStaticRouteReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/static_route")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIRoutingStaticRouteCreateRequest calls the generic APIRoutingStaticRouteCreate builder with application/json body
func NewAPIRoutingStaticRouteCreateRequest(server string, body APIRoutingStaticRouteCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIRoutingStaticRouteCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIRoutingStaticRouteCreateRequestWithBody generates requests for APIRoutingStaticRouteCreate with any type of body
func NewAPIRoutingStaticRouteCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/static_route")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIRoutingStaticRouteUpdateRequest calls the generic APIRoutingStaticRouteUpdate builder with application/json body
func NewAPIRoutingStaticRouteUpdateRequest(server string, body APIRoutingStaticRouteUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIRoutingStaticRouteUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIRoutingStaticRouteUpdateRequestWithBody generates requests for APIRoutingStaticRouteUpdate with any type of body
func NewAPIRoutingStaticRouteUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/routing/static_route")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesReadRequest generates requests for APIServicesRead
func NewAPIServicesReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDDNSReadRequest generates requests for APIServicesDDNSRead
func NewAPIServicesDDNSReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ddns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdReadRequest generates requests for APIServicesDHCPdRead
func NewAPIServicesDHCPdReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdUpdateRequest calls the generic APIServicesDHCPdUpdate builder with application/json body
func NewAPIServicesDHCPdUpdateRequest(server string, body APIServicesDHCPdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDHCPdUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDHCPdUpdateRequestWithBody generates requests for APIServicesDHCPdUpdate with any type of body
func NewAPIServicesDHCPdUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDHCPdLeaseReadRequest generates requests for APIServicesDHCPdLeaseRead
func NewAPIServicesDHCPdLeaseReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/lease")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdOptionsCreateRequest calls the generic APIServicesDHCPdOptionsCreate builder with application/json body
func NewAPIServicesDHCPdOptionsCreateRequest(server string, body APIServicesDHCPdOptionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDHCPdOptionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDHCPdOptionsCreateRequestWithBody generates requests for APIServicesDHCPdOptionsCreate with any type of body
func NewAPIServicesDHCPdOptionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDHCPdRestartCreateRequest generates requests for APIServicesDHCPdRestartCreate
func NewAPIServicesDHCPdRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdStartCreateRequest generates requests for APIServicesDHCPdStartCreate
func NewAPIServicesDHCPdStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdStaticMappingDeleteRequest generates requests for APIServicesDHCPdStaticMappingDelete
func NewAPIServicesDHCPdStaticMappingDeleteRequest(server string, params *APIServicesDHCPdStaticMappingDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/static_mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interface", runtime.ParamLocationQuery, params.Interface); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdStaticMappingReadRequest generates requests for APIServicesDHCPdStaticMappingRead
func NewAPIServicesDHCPdStaticMappingReadRequest(server string, params *APIServicesDHCPdStaticMappingReadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/static_mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interface", runtime.ParamLocationQuery, params.Interface); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDHCPdStaticMappingCreateRequest calls the generic APIServicesDHCPdStaticMappingCreate builder with application/json body
func NewAPIServicesDHCPdStaticMappingCreateRequest(server string, body APIServicesDHCPdStaticMappingCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDHCPdStaticMappingCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDHCPdStaticMappingCreateRequestWithBody generates requests for APIServicesDHCPdStaticMappingCreate with any type of body
func NewAPIServicesDHCPdStaticMappingCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/static_mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDHCPdStaticMappingUpdateRequest calls the generic APIServicesDHCPdStaticMappingUpdate builder with application/json body
func NewAPIServicesDHCPdStaticMappingUpdateRequest(server string, body APIServicesDHCPdStaticMappingUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDHCPdStaticMappingUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDHCPdStaticMappingUpdateRequestWithBody generates requests for APIServicesDHCPdStaticMappingUpdate with any type of body
func NewAPIServicesDHCPdStaticMappingUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/static_mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDHCPdStopCreateRequest generates requests for APIServicesDHCPdStopCreate
func NewAPIServicesDHCPdStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dhcpd/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqReadRequest generates requests for APIServicesDnsmasqRead
func NewAPIServicesDnsmasqReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqApplyCreateRequest generates requests for APIServicesDnsmasqApplyCreate
func NewAPIServicesDnsmasqApplyCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqHostOverrideDeleteRequest generates requests for APIServicesDnsmasqHostOverrideDelete
func NewAPIServicesDnsmasqHostOverrideDeleteRequest(server string, params *APIServicesDnsmasqHostOverrideDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqHostOverrideReadRequest generates requests for APIServicesDnsmasqHostOverrideRead
func NewAPIServicesDnsmasqHostOverrideReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqHostOverrideCreateRequest calls the generic APIServicesDnsmasqHostOverrideCreate builder with application/json body
func NewAPIServicesDnsmasqHostOverrideCreateRequest(server string, body APIServicesDnsmasqHostOverrideCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDnsmasqHostOverrideCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDnsmasqHostOverrideCreateRequestWithBody generates requests for APIServicesDnsmasqHostOverrideCreate with any type of body
func NewAPIServicesDnsmasqHostOverrideCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDnsmasqHostOverrideUpdateRequest calls the generic APIServicesDnsmasqHostOverrideUpdate builder with application/json body
func NewAPIServicesDnsmasqHostOverrideUpdateRequest(server string, body APIServicesDnsmasqHostOverrideUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDnsmasqHostOverrideUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDnsmasqHostOverrideUpdateRequestWithBody generates requests for APIServicesDnsmasqHostOverrideUpdate with any type of body
func NewAPIServicesDnsmasqHostOverrideUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDnsmasqHostOverrideAliasCreateRequest calls the generic APIServicesDnsmasqHostOverrideAliasCreate builder with application/json body
func NewAPIServicesDnsmasqHostOverrideAliasCreateRequest(server string, body APIServicesDnsmasqHostOverrideAliasCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesDnsmasqHostOverrideAliasCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesDnsmasqHostOverrideAliasCreateRequestWithBody generates requests for APIServicesDnsmasqHostOverrideAliasCreate with any type of body
func NewAPIServicesDnsmasqHostOverrideAliasCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/host_override/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesDnsmasqRestartCreateRequest generates requests for APIServicesDnsmasqRestartCreate
func NewAPIServicesDnsmasqRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqStartCreateRequest generates requests for APIServicesDnsmasqStartCreate
func NewAPIServicesDnsmasqStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDnsmasqStopCreateRequest generates requests for APIServicesDnsmasqStopCreate
func NewAPIServicesDnsmasqStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dnsmasq/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDpingerRestartCreateRequest generates requests for APIServicesDpingerRestartCreate
func NewAPIServicesDpingerRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dpinger/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDpingerStartCreateRequest generates requests for APIServicesDpingerStartCreate
func NewAPIServicesDpingerStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dpinger/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesDpingerStopCreateRequest generates requests for APIServicesDpingerStopCreate
func NewAPIServicesDpingerStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/dpinger/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesIPsecApplyCreateRequest calls the generic APIServicesIPsecApplyCreate builder with application/json body
func NewAPIServicesIPsecApplyCreateRequest(server string, body APIServicesIPsecApplyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecApplyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecApplyCreateRequestWithBody generates requests for APIServicesIPsecApplyCreate with any type of body
func NewAPIServicesIPsecApplyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesIPsecPhase1DeleteRequest generates requests for APIServicesIPsecPhase1Delete
func NewAPIServicesIPsecPhase1DeleteRequest(server string, params *APIServicesIPsecPhase1DeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ikeid", runtime.ParamLocationQuery, params.Ikeid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesIPsecPhase1ReadRequest generates requests for APIServicesIPsecPhase1Read
func NewAPIServicesIPsecPhase1ReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesIPsecPhase1CreateRequest calls the generic APIServicesIPsecPhase1Create builder with application/json body
func NewAPIServicesIPsecPhase1CreateRequest(server string, body APIServicesIPsecPhase1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecPhase1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecPhase1CreateRequestWithBody generates requests for APIServicesIPsecPhase1Create with any type of body
func NewAPIServicesIPsecPhase1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesIPsecPhase1UpdateRequest calls the generic APIServicesIPsecPhase1Update builder with application/json body
func NewAPIServicesIPsecPhase1UpdateRequest(server string, body APIServicesIPsecPhase1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecPhase1UpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecPhase1UpdateRequestWithBody generates requests for APIServicesIPsecPhase1Update with any type of body
func NewAPIServicesIPsecPhase1UpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesIPsecPhase1EncryptionCreateRequest calls the generic APIServicesIPsecPhase1EncryptionCreate builder with application/json body
func NewAPIServicesIPsecPhase1EncryptionCreateRequest(server string, body APIServicesIPsecPhase1EncryptionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecPhase1EncryptionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecPhase1EncryptionCreateRequestWithBody generates requests for APIServicesIPsecPhase1EncryptionCreate with any type of body
func NewAPIServicesIPsecPhase1EncryptionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase1/encryption")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesIPsecPhase2DeleteRequest generates requests for APIServicesIPsecPhase2Delete
func NewAPIServicesIPsecPhase2DeleteRequest(server string, params *APIServicesIPsecPhase2DeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uniqid", runtime.ParamLocationQuery, params.Uniqid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesIPsecPhase2ReadRequest generates requests for APIServicesIPsecPhase2Read
func NewAPIServicesIPsecPhase2ReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesIPsecPhase2CreateRequest calls the generic APIServicesIPsecPhase2Create builder with application/json body
func NewAPIServicesIPsecPhase2CreateRequest(server string, body APIServicesIPsecPhase2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecPhase2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecPhase2CreateRequestWithBody generates requests for APIServicesIPsecPhase2Create with any type of body
func NewAPIServicesIPsecPhase2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesIPsecPhase2UpdateRequest calls the generic APIServicesIPsecPhase2Update builder with application/json body
func NewAPIServicesIPsecPhase2UpdateRequest(server string, body APIServicesIPsecPhase2UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesIPsecPhase2UpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesIPsecPhase2UpdateRequestWithBody generates requests for APIServicesIPsecPhase2Update with any type of body
func NewAPIServicesIPsecPhase2UpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ipsec/phase2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesNTPdReadRequest generates requests for APIServicesNTPdRead
func NewAPIServicesNTPdReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesNTPdUpdateRequest calls the generic APIServicesNTPdUpdate builder with application/json body
func NewAPIServicesNTPdUpdateRequest(server string, body APIServicesNTPdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesNTPdUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesNTPdUpdateRequestWithBody generates requests for APIServicesNTPdUpdate with any type of body
func NewAPIServicesNTPdUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesNTPdRestartCreateRequest generates requests for APIServicesNTPdRestartCreate
func NewAPIServicesNTPdRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesNTPdStartCreateRequest generates requests for APIServicesNTPdStartCreate
func NewAPIServicesNTPdStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesNTPdStopCreateRequest generates requests for APIServicesNTPdStopCreate
func NewAPIServicesNTPdStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesNTPdTimeServerDeleteRequest generates requests for APIServicesNTPdTimeServerDelete
func NewAPIServicesNTPdTimeServerDeleteRequest(server string, params *APIServicesNTPdTimeServerDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd/time_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeserver", runtime.ParamLocationQuery, params.Timeserver); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesNTPdTimeServerCreateRequest calls the generic APIServicesNTPdTimeServerCreate builder with application/json body
func NewAPIServicesNTPdTimeServerCreateRequest(server string, body APIServicesNTPdTimeServerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesNTPdTimeServerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesNTPdTimeServerCreateRequestWithBody generates requests for APIServicesNTPdTimeServerCreate with any type of body
func NewAPIServicesNTPdTimeServerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/ntpd/time_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNClientReadRequest generates requests for APIServicesOpenVPNClientRead
func NewAPIServicesOpenVPNClientReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesOpenVPNClientCreateRequest calls the generic APIServicesOpenVPNClientCreate builder with application/json body
func NewAPIServicesOpenVPNClientCreateRequest(server string, body APIServicesOpenVPNClientCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNClientCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNClientCreateRequestWithBody generates requests for APIServicesOpenVPNClientCreate with any type of body
func NewAPIServicesOpenVPNClientCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNClientUpdateRequest calls the generic APIServicesOpenVPNClientUpdate builder with application/json body
func NewAPIServicesOpenVPNClientUpdateRequest(server string, params *APIServicesOpenVPNClientUpdateParams, body APIServicesOpenVPNClientUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNClientUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNClientUpdateRequestWithBody generates requests for APIServicesOpenVPNClientUpdate with any type of body
func NewAPIServicesOpenVPNClientUpdateRequestWithBody(server string, params *APIServicesOpenVPNClientUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpnid", runtime.ParamLocationQuery, params.Vpnid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNClientSpecificOverridesDeleteRequest generates requests for APIServicesOpenVPNClientSpecificOverridesDelete
func NewAPIServicesOpenVPNClientSpecificOverridesDeleteRequest(server string, params *APIServicesOpenVPNClientSpecificOverridesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/csc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesOpenVPNClientSpecificOverridesReadRequest generates requests for APIServicesOpenVPNClientSpecificOverridesRead
func NewAPIServicesOpenVPNClientSpecificOverridesReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/csc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesOpenVPNClientSpecificOverridesCreateRequest calls the generic APIServicesOpenVPNClientSpecificOverridesCreate builder with application/json body
func NewAPIServicesOpenVPNClientSpecificOverridesCreateRequest(server string, body APIServicesOpenVPNClientSpecificOverridesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNClientSpecificOverridesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNClientSpecificOverridesCreateRequestWithBody generates requests for APIServicesOpenVPNClientSpecificOverridesCreate with any type of body
func NewAPIServicesOpenVPNClientSpecificOverridesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/csc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequest calls the generic APIServicesOpenVPNClientSpecificOverridesUpdate builder with application/json body
func NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequest(server string, body APIServicesOpenVPNClientSpecificOverridesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequestWithBody generates requests for APIServicesOpenVPNClientSpecificOverridesUpdate with any type of body
func NewAPIServicesOpenVPNClientSpecificOverridesUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/csc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNServerReadRequest generates requests for APIServicesOpenVPNServerRead
func NewAPIServicesOpenVPNServerReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesOpenVPNServerCreateRequest calls the generic APIServicesOpenVPNServerCreate builder with application/json body
func NewAPIServicesOpenVPNServerCreateRequest(server string, body APIServicesOpenVPNServerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNServerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNServerCreateRequestWithBody generates requests for APIServicesOpenVPNServerCreate with any type of body
func NewAPIServicesOpenVPNServerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesOpenVPNServerUpdateRequest calls the generic APIServicesOpenVPNServerUpdate builder with application/json body
func NewAPIServicesOpenVPNServerUpdateRequest(server string, params *APIServicesOpenVPNServerUpdateParams, body APIServicesOpenVPNServerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesOpenVPNServerUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAPIServicesOpenVPNServerUpdateRequestWithBody generates requests for APIServicesOpenVPNServerUpdate with any type of body
func NewAPIServicesOpenVPNServerUpdateRequestWithBody(server string, params *APIServicesOpenVPNServerUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/openvpn/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vpnid", runtime.ParamLocationQuery, params.Vpnid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesRestartCreateRequest calls the generic APIServicesRestartCreate builder with application/json body
func NewAPIServicesRestartCreateRequest(server string, body APIServicesRestartCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesRestartCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesRestartCreateRequestWithBody generates requests for APIServicesRestartCreate with any type of body
func NewAPIServicesRestartCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesServiceWatchdogReadRequest generates requests for APIServicesServiceWatchdogRead
func NewAPIServicesServiceWatchdogReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/service_watchdog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesServiceWatchdogUpdateRequest calls the generic APIServicesServiceWatchdogUpdate builder with application/json body
func NewAPIServicesServiceWatchdogUpdateRequest(server string, body APIServicesServiceWatchdogUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesServiceWatchdogUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesServiceWatchdogUpdateRequestWithBody generates requests for APIServicesServiceWatchdogUpdate with any type of body
func NewAPIServicesServiceWatchdogUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/service_watchdog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesSSHdReadRequest generates requests for APIServicesSSHdRead
func NewAPIServicesSSHdReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/sshd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesSSHdUpdateRequest calls the generic APIServicesSSHdUpdate builder with application/json body
func NewAPIServicesSSHdUpdateRequest(server string, body APIServicesSSHdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesSSHdUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesSSHdUpdateRequestWithBody generates requests for APIServicesSSHdUpdate with any type of body
func NewAPIServicesSSHdUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/sshd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesSSHdRestartCreateRequest generates requests for APIServicesSSHdRestartCreate
func NewAPIServicesSSHdRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/sshd/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesSSHdStartCreateRequest generates requests for APIServicesSSHdStartCreate
func NewAPIServicesSSHdStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/sshd/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesSSHdStopCreateRequest generates requests for APIServicesSSHdStopCreate
func NewAPIServicesSSHdStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/sshd/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesStartCreateRequest generates requests for APIServicesStartCreate
func NewAPIServicesStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesStopCreateRequest calls the generic APIServicesStopCreate builder with application/json body
func NewAPIServicesStopCreateRequest(server string, body APIServicesStopCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesStopCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesStopCreateRequestWithBody generates requests for APIServicesStopCreate with any type of body
func NewAPIServicesStopCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesSyslogdRestartCreateRequest generates requests for APIServicesSyslogdRestartCreate
func NewAPIServicesSyslogdRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/syslogd/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesSyslogdStartCreateRequest generates requests for APIServicesSyslogdStartCreate
func NewAPIServicesSyslogdStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/syslogd/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesSyslogdStopCreateRequest generates requests for APIServicesSyslogdStopCreate
func NewAPIServicesSyslogdStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/syslogd/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundReadRequest generates requests for APIServicesUnboundRead
func NewAPIServicesUnboundReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundAccessListDeleteRequest generates requests for APIServicesUnboundAccessListDelete
func NewAPIServicesUnboundAccessListDeleteRequest(server string, params *APIServicesUnboundAccessListDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/access_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundAccessListReadRequest generates requests for APIServicesUnboundAccessListRead
func NewAPIServicesUnboundAccessListReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/access_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundAccessListCreateRequest calls the generic APIServicesUnboundAccessListCreate builder with application/json body
func NewAPIServicesUnboundAccessListCreateRequest(server string, body APIServicesUnboundAccessListCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundAccessListCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundAccessListCreateRequestWithBody generates requests for APIServicesUnboundAccessListCreate with any type of body
func NewAPIServicesUnboundAccessListCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/access_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundAccessListUpdateRequest calls the generic APIServicesUnboundAccessListUpdate builder with application/json body
func NewAPIServicesUnboundAccessListUpdateRequest(server string, body APIServicesUnboundAccessListUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundAccessListUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundAccessListUpdateRequestWithBody generates requests for APIServicesUnboundAccessListUpdate with any type of body
func NewAPIServicesUnboundAccessListUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/access_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundAccessListRowCreateRequest calls the generic APIServicesUnboundAccessListRowCreate builder with application/json body
func NewAPIServicesUnboundAccessListRowCreateRequest(server string, body APIServicesUnboundAccessListRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundAccessListRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundAccessListRowCreateRequestWithBody generates requests for APIServicesUnboundAccessListRowCreate with any type of body
func NewAPIServicesUnboundAccessListRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/access_list/row")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundApplyReadRequest generates requests for APIServicesUnboundApplyRead
func NewAPIServicesUnboundApplyReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundApplyCreateRequest calls the generic APIServicesUnboundApplyCreate builder with application/json body
func NewAPIServicesUnboundApplyCreateRequest(server string, body APIServicesUnboundApplyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundApplyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundApplyCreateRequestWithBody generates requests for APIServicesUnboundApplyCreate with any type of body
func NewAPIServicesUnboundApplyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundHostOverrideDeleteRequest generates requests for APIServicesUnboundHostOverrideDelete
func NewAPIServicesUnboundHostOverrideDeleteRequest(server string, params *APIServicesUnboundHostOverrideDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Apply != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundHostOverrideReadRequest generates requests for APIServicesUnboundHostOverrideRead
func NewAPIServicesUnboundHostOverrideReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundHostOverrideCreateRequest calls the generic APIServicesUnboundHostOverrideCreate builder with application/json body
func NewAPIServicesUnboundHostOverrideCreateRequest(server string, body APIServicesUnboundHostOverrideCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundHostOverrideCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundHostOverrideCreateRequestWithBody generates requests for APIServicesUnboundHostOverrideCreate with any type of body
func NewAPIServicesUnboundHostOverrideCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundHostOverrideUpdateRequest calls the generic APIServicesUnboundHostOverrideUpdate builder with application/json body
func NewAPIServicesUnboundHostOverrideUpdateRequest(server string, body APIServicesUnboundHostOverrideUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundHostOverrideUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundHostOverrideUpdateRequestWithBody generates requests for APIServicesUnboundHostOverrideUpdate with any type of body
func NewAPIServicesUnboundHostOverrideUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundHostOverrideAliasCreateRequest calls the generic APIServicesUnboundHostOverrideAliasCreate builder with application/json body
func NewAPIServicesUnboundHostOverrideAliasCreateRequest(server string, body APIServicesUnboundHostOverrideAliasCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundHostOverrideAliasCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundHostOverrideAliasCreateRequestWithBody generates requests for APIServicesUnboundHostOverrideAliasCreate with any type of body
func NewAPIServicesUnboundHostOverrideAliasCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override/alias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundHostOverrideFlushDeleteRequest generates requests for APIServicesUnboundHostOverrideFlushDelete
func NewAPIServicesUnboundHostOverrideFlushDeleteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override/flush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundHostOverrideFlushUpdateRequest calls the generic APIServicesUnboundHostOverrideFlushUpdate builder with application/json body
func NewAPIServicesUnboundHostOverrideFlushUpdateRequest(server string, body APIServicesUnboundHostOverrideFlushUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesUnboundHostOverrideFlushUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesUnboundHostOverrideFlushUpdateRequestWithBody generates requests for APIServicesUnboundHostOverrideFlushUpdate with any type of body
func NewAPIServicesUnboundHostOverrideFlushUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/host_override/flush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIServicesUnboundRestartCreateRequest generates requests for APIServicesUnboundRestartCreate
func NewAPIServicesUnboundRestartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundStartCreateRequest generates requests for APIServicesUnboundStartCreate
func NewAPIServicesUnboundStartCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesUnboundStopCreateRequest generates requests for APIServicesUnboundStopCreate
func NewAPIServicesUnboundStopCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/unbound/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIServicesWOLSendCreateRequest calls the generic APIServicesWOLSendCreate builder with application/json body
func NewAPIServicesWOLSendCreateRequest(server string, body APIServicesWOLSendCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIServicesWOLSendCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIServicesWOLSendCreateRequestWithBody generates requests for APIServicesWOLSendCreate with any type of body
func NewAPIServicesWOLSendCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/services/wol/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIStatusCARPReadRequest generates requests for APIStatusCARPRead
func NewAPIStatusCARPReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/carp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusCARPUpdateRequest calls the generic APIStatusCARPUpdate builder with application/json body
func NewAPIStatusCARPUpdateRequest(server string, body APIStatusCARPUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIStatusCARPUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIStatusCARPUpdateRequestWithBody generates requests for APIStatusCARPUpdate with any type of body
func NewAPIStatusCARPUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/carp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIStatusGatewayReadRequest generates requests for APIStatusGatewayRead
func NewAPIStatusGatewayReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusInterfaceReadRequest generates requests for APIStatusInterfaceRead
func NewAPIStatusInterfaceReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusIPsecReadRequest generates requests for APIStatusIPsecRead
func NewAPIStatusIPsecReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/ipsec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusLogConfigHistoryReadRequest generates requests for APIStatusLogConfigHistoryRead
func NewAPIStatusLogConfigHistoryReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/log/config_history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusLogDHCPReadRequest generates requests for APIStatusLogDHCPRead
func NewAPIStatusLogDHCPReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/log/dhcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusLogFirewallReadRequest generates requests for APIStatusLogFirewallRead
func NewAPIStatusLogFirewallReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/log/firewall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusLogSettingsUpdateRequest calls the generic APIStatusLogSettingsUpdate builder with application/json body
func NewAPIStatusLogSettingsUpdateRequest(server string, body APIStatusLogSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIStatusLogSettingsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIStatusLogSettingsUpdateRequestWithBody generates requests for APIStatusLogSettingsUpdate with any type of body
func NewAPIStatusLogSettingsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/log/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIStatusLogSystemReadRequest generates requests for APIStatusLogSystemRead
func NewAPIStatusLogSystemReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/log/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusOpenVPNReadRequest generates requests for APIStatusOpenVPNRead
func NewAPIStatusOpenVPNReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/openvpn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIStatusSystemReadRequest generates requests for APIStatusSystemRead
func NewAPIStatusSystemReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/status/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemAPIReadRequest generates requests for APISystemAPIRead
func NewAPISystemAPIReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemAPIUpdateRequest calls the generic APISystemAPIUpdate builder with application/json body
func NewAPISystemAPIUpdateRequest(server string, body APISystemAPIUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemAPIUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemAPIUpdateRequestWithBody generates requests for APISystemAPIUpdate with any type of body
func NewAPISystemAPIUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemAPIErrorReadRequest generates requests for APISystemAPIErrorRead
func NewAPISystemAPIErrorReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/api/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemAPIVersionReadRequest generates requests for APISystemAPIVersionRead
func NewAPISystemAPIVersionReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/api/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemARPDeleteRequest generates requests for APISystemARPDelete
func NewAPISystemARPDeleteRequest(server string, params *APISystemARPDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/arp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemARPReadRequest generates requests for APISystemARPRead
func NewAPISystemARPReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/arp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCADeleteRequest generates requests for APISystemCADelete
func NewAPISystemCADeleteRequest(server string, params *APISystemCADeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/ca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refid", runtime.ParamLocationQuery, params.Refid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCAReadRequest generates requests for APISystemCARead
func NewAPISystemCAReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/ca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCACreateRequest calls the generic APISystemCACreate builder with application/json body
func NewAPISystemCACreateRequest(server string, body APISystemCACreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemCACreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemCACreateRequestWithBody generates requests for APISystemCACreate with any type of body
func NewAPISystemCACreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/ca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemCertificateDeleteRequest generates requests for APISystemCertificateDelete
func NewAPISystemCertificateDeleteRequest(server string, params *APISystemCertificateDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refid", runtime.ParamLocationQuery, params.Refid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCertificateReadRequest generates requests for APISystemCertificateRead
func NewAPISystemCertificateReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCertificateCreateRequest calls the generic APISystemCertificateCreate builder with application/json body
func NewAPISystemCertificateCreateRequest(server string, body APISystemCertificateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemCertificateCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemCertificateCreateRequestWithBody generates requests for APISystemCertificateCreate with any type of body
func NewAPISystemCertificateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemCertificateUpdateRequest calls the generic APISystemCertificateUpdate builder with application/json body
func NewAPISystemCertificateUpdateRequest(server string, body APISystemCertificateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemCertificateUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemCertificateUpdateRequestWithBody generates requests for APISystemCertificateUpdate with any type of body
func NewAPISystemCertificateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemConfigReadRequest generates requests for APISystemConfigRead
func NewAPISystemConfigReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemConfigUpdateRequestWithBody generates requests for APISystemConfigUpdate with any type of body
func NewAPISystemConfigUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemConsoleUpdateRequest calls the generic APISystemConsoleUpdate builder with application/json body
func NewAPISystemConsoleUpdateRequest(server string, body APISystemConsoleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemConsoleUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemConsoleUpdateRequestWithBody generates requests for APISystemConsoleUpdate with any type of body
func NewAPISystemConsoleUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/console")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemCRLDeleteRequest generates requests for APISystemCRLDelete
func NewAPISystemCRLDeleteRequest(server string, params *APISystemCRLDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/crl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refid", runtime.ParamLocationQuery, params.Refid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCRLReadRequest generates requests for APISystemCRLRead
func NewAPISystemCRLReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/crl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemCRLCreateRequest calls the generic APISystemCRLCreate builder with application/json body
func NewAPISystemCRLCreateRequest(server string, body APISystemCRLCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemCRLCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemCRLCreateRequestWithBody generates requests for APISystemCRLCreate with any type of body
func NewAPISystemCRLCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/crl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemDNSReadRequest generates requests for APISystemDNSRead
func NewAPISystemDNSReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/dns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemDNSUpdateRequest calls the generic APISystemDNSUpdate builder with application/json body
func NewAPISystemDNSUpdateRequest(server string, body APISystemDNSUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemDNSUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemDNSUpdateRequestWithBody generates requests for APISystemDNSUpdate with any type of body
func NewAPISystemDNSUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/dns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemDNSServerDeleteRequest generates requests for APISystemDNSServerDelete
func NewAPISystemDNSServerDeleteRequest(server string, params *APISystemDNSServerDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/dns/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnsserver", runtime.ParamLocationQuery, params.Dnsserver); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemDNSServerCreateRequest calls the generic APISystemDNSServerCreate builder with application/json body
func NewAPISystemDNSServerCreateRequest(server string, body APISystemDNSServerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemDNSServerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemDNSServerCreateRequestWithBody generates requests for APISystemDNSServerCreate with any type of body
func NewAPISystemDNSServerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/dns/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemHaltCreateRequest generates requests for APISystemHaltCreate
func NewAPISystemHaltCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/halt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemHostnameReadRequest generates requests for APISystemHostnameRead
func NewAPISystemHostnameReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/hostname")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemHostnameUpdateRequest calls the generic APISystemHostnameUpdate builder with application/json body
func NewAPISystemHostnameUpdateRequest(server string, body APISystemHostnameUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemHostnameUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemHostnameUpdateRequestWithBody generates requests for APISystemHostnameUpdate with any type of body
func NewAPISystemHostnameUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/hostname")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemNotificationsEmailReadRequest generates requests for APISystemNotificationsEmailRead
func NewAPISystemNotificationsEmailReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/notifications/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemNotificationsEmailUpdateRequest calls the generic APISystemNotificationsEmailUpdate builder with application/json body
func NewAPISystemNotificationsEmailUpdateRequest(server string, body APISystemNotificationsEmailUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemNotificationsEmailUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemNotificationsEmailUpdateRequestWithBody generates requests for APISystemNotificationsEmailUpdate with any type of body
func NewAPISystemNotificationsEmailUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/notifications/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemPackageDeleteRequest generates requests for APISystemPackageDelete
func NewAPISystemPackageDeleteRequest(server string, params *APISystemPackageDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemPackageReadRequest generates requests for APISystemPackageRead
func NewAPISystemPackageReadRequest(server string, params *APISystemPackageReadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.All != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemPackageCreateRequest calls the generic APISystemPackageCreate builder with application/json body
func NewAPISystemPackageCreateRequest(server string, body APISystemPackageCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemPackageCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemPackageCreateRequestWithBody generates requests for APISystemPackageCreate with any type of body
func NewAPISystemPackageCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemRebootCreateRequest generates requests for APISystemRebootCreate
func NewAPISystemRebootCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemTableReadRequest generates requests for APISystemTableRead
func NewAPISystemTableReadRequest(server string, params *APISystemTableReadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/table")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemTunableDeleteRequest generates requests for APISystemTunableDelete
func NewAPISystemTunableDeleteRequest(server string, params *APISystemTunableDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemTunableReadRequest generates requests for APISystemTunableRead
func NewAPISystemTunableReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemTunableCreateRequest calls the generic APISystemTunableCreate builder with application/json body
func NewAPISystemTunableCreateRequest(server string, body APISystemTunableCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemTunableCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemTunableCreateRequestWithBody generates requests for APISystemTunableCreate with any type of body
func NewAPISystemTunableCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemTunableUpdateRequest calls the generic APISystemTunableUpdate builder with application/json body
func NewAPISystemTunableUpdateRequest(server string, body APISystemTunableUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPISystemTunableUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPISystemTunableUpdateRequestWithBody generates requests for APISystemTunableUpdate with any type of body
func NewAPISystemTunableUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPISystemVersionReadRequest generates requests for APISystemVersionRead
func NewAPISystemVersionReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPISystemVersionUpgradeReadRequest generates requests for APISystemVersionUpgradeRead
func NewAPISystemVersionUpgradeReadRequest(server string, params *APISystemVersionUpgradeReadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/version/upgrade")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UseCache != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use_cache", runtime.ParamLocationQuery, *params.UseCache); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserDeleteRequest generates requests for APIUserDelete
func NewAPIUserDeleteRequest(server string, params *APIUserDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserReadRequest generates requests for APIUserRead
func NewAPIUserReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserCreateRequest calls the generic APIUserCreate builder with application/json body
func NewAPIUserCreateRequest(server string, body APIUserCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserCreateRequestWithBody generates requests for APIUserCreate with any type of body
func NewAPIUserCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserUpdateRequest calls the generic APIUserUpdate builder with application/json body
func NewAPIUserUpdateRequest(server string, body APIUserUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserUpdateRequestWithBody generates requests for APIUserUpdate with any type of body
func NewAPIUserUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserAuthServerDeleteRequest generates requests for APIUserAuthServerDelete
func NewAPIUserAuthServerDeleteRequest(server string, params *APIUserAuthServerDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerReadRequest generates requests for APIUserAuthServerRead
func NewAPIUserAuthServerReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerLDAPDeleteRequest generates requests for APIUserAuthServerLDAPDelete
func NewAPIUserAuthServerLDAPDeleteRequest(server string, params *APIUserAuthServerLDAPDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/ldap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerLDAPReadRequest generates requests for APIUserAuthServerLDAPRead
func NewAPIUserAuthServerLDAPReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/ldap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerLDAPCreateRequest calls the generic APIUserAuthServerLDAPCreate builder with application/json body
func NewAPIUserAuthServerLDAPCreateRequest(server string, body APIUserAuthServerLDAPCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserAuthServerLDAPCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserAuthServerLDAPCreateRequestWithBody generates requests for APIUserAuthServerLDAPCreate with any type of body
func NewAPIUserAuthServerLDAPCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/ldap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserAuthServerRADIUSDeleteRequest generates requests for APIUserAuthServerRADIUSDelete
func NewAPIUserAuthServerRADIUSDeleteRequest(server string, params *APIUserAuthServerRADIUSDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/radius")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerRADIUSReadRequest generates requests for APIUserAuthServerRADIUSRead
func NewAPIUserAuthServerRADIUSReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/radius")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserAuthServerRADIUSCreateRequest calls the generic APIUserAuthServerRADIUSCreate builder with application/json body
func NewAPIUserAuthServerRADIUSCreateRequest(server string, body APIUserAuthServerRADIUSCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserAuthServerRADIUSCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserAuthServerRADIUSCreateRequestWithBody generates requests for APIUserAuthServerRADIUSCreate with any type of body
func NewAPIUserAuthServerRADIUSCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/auth_server/radius")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserGroupDeleteRequest generates requests for APIUserGroupDelete
func NewAPIUserGroupDeleteRequest(server string, params *APIUserGroupDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserGroupReadRequest generates requests for APIUserGroupRead
func NewAPIUserGroupReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserGroupCreateRequest calls the generic APIUserGroupCreate builder with application/json body
func NewAPIUserGroupCreateRequest(server string, body APIUserGroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserGroupCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserGroupCreateRequestWithBody generates requests for APIUserGroupCreate with any type of body
func NewAPIUserGroupCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserGroupUpdateRequest calls the generic APIUserGroupUpdate builder with application/json body
func NewAPIUserGroupUpdateRequest(server string, body APIUserGroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserGroupUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserGroupUpdateRequestWithBody generates requests for APIUserGroupUpdate with any type of body
func NewAPIUserGroupUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserGroupMemberDeleteRequest generates requests for APIUserGroupMemberDelete
func NewAPIUserGroupMemberDeleteRequest(server string, params *APIUserGroupMemberDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group/member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, params.Group); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserGroupMemberCreateRequest calls the generic APIUserGroupMemberCreate builder with application/json body
func NewAPIUserGroupMemberCreateRequest(server string, body APIUserGroupMemberCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserGroupMemberCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserGroupMemberCreateRequestWithBody generates requests for APIUserGroupMemberCreate with any type of body
func NewAPIUserGroupMemberCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/group/member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAPIUserPrivilegeDeleteRequest generates requests for APIUserPrivilegeDelete
func NewAPIUserPrivilegeDeleteRequest(server string, params *APIUserPrivilegeDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/privilege")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "priv", runtime.ParamLocationQuery, params.Priv); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAPIUserPrivilegeCreateRequest calls the generic APIUserPrivilegeCreate builder with application/json body
func NewAPIUserPrivilegeCreateRequest(server string, body APIUserPrivilegeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAPIUserPrivilegeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAPIUserPrivilegeCreateRequestWithBody generates requests for APIUserPrivilegeCreate with any type of body
func NewAPIUserPrivilegeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/privilege")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// APIAccessTokenCreate request
	APIAccessTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIAccessTokenCreateResponse, error)

	// APIDiagnosticsCommandPromptCreate request with any body
	APIDiagnosticsCommandPromptCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIDiagnosticsCommandPromptCreateResponse, error)

	APIDiagnosticsCommandPromptCreateWithResponse(ctx context.Context, body APIDiagnosticsCommandPromptCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIDiagnosticsCommandPromptCreateResponse, error)

	// APIFirewallAliasDelete request
	APIFirewallAliasDeleteWithResponse(ctx context.Context, params *APIFirewallAliasDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallAliasDeleteResponse, error)

	// APIFirewallAliasRead request
	APIFirewallAliasReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallAliasReadResponse, error)

	// APIFirewallAliasCreate request with any body
	APIFirewallAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasCreateResponse, error)

	APIFirewallAliasCreateWithResponse(ctx context.Context, body APIFirewallAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasCreateResponse, error)

	// APIFirewallAliasUpdate request with any body
	APIFirewallAliasUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasUpdateResponse, error)

	APIFirewallAliasUpdateWithResponse(ctx context.Context, body APIFirewallAliasUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasUpdateResponse, error)

	// APIFirewallAliasAdvancedRead request
	APIFirewallAliasAdvancedReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedReadResponse, error)

	// APIFirewallAliasAdvancedUpdate request with any body
	APIFirewallAliasAdvancedUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedUpdateResponse, error)

	APIFirewallAliasAdvancedUpdateWithResponse(ctx context.Context, body APIFirewallAliasAdvancedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedUpdateResponse, error)

	// APIFirewallAliasEntryDelete request
	APIFirewallAliasEntryDeleteWithResponse(ctx context.Context, params *APIFirewallAliasEntryDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryDeleteResponse, error)

	// APIFirewallAliasEntryCreate request with any body
	APIFirewallAliasEntryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryCreateResponse, error)

	APIFirewallAliasEntryCreateWithResponse(ctx context.Context, body APIFirewallAliasEntryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryCreateResponse, error)

	// APIFirewallApplyCreate request with any body
	APIFirewallApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallApplyCreateResponse, error)

	APIFirewallApplyCreateWithResponse(ctx context.Context, body APIFirewallApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallApplyCreateResponse, error)

	// APIFirewallNATOneToOneDelete request
	APIFirewallNATOneToOneDeleteWithResponse(ctx context.Context, params *APIFirewallNATOneToOneDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneDeleteResponse, error)

	// APIFirewallNATOneToOneRead request
	APIFirewallNATOneToOneReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneReadResponse, error)

	// APIFirewallNATOneToOneCreate request with any body
	APIFirewallNATOneToOneCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneCreateResponse, error)

	APIFirewallNATOneToOneCreateWithResponse(ctx context.Context, body APIFirewallNATOneToOneCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneCreateResponse, error)

	// APIFirewallNATOneToOneUpdate request with any body
	APIFirewallNATOneToOneUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneUpdateResponse, error)

	APIFirewallNATOneToOneUpdateWithResponse(ctx context.Context, body APIFirewallNATOneToOneUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneUpdateResponse, error)

	// APIFirewallNATOutboundRead request
	APIFirewallNATOutboundReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundReadResponse, error)

	// APIFirewallNATOutboundUpdate request with any body
	APIFirewallNATOutboundUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundUpdateResponse, error)

	APIFirewallNATOutboundUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundUpdateResponse, error)

	// APIFirewallNATOutboundMappingDelete request
	APIFirewallNATOutboundMappingDeleteWithResponse(ctx context.Context, params *APIFirewallNATOutboundMappingDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingDeleteResponse, error)

	// APIFirewallNATOutboundMappingRead request
	APIFirewallNATOutboundMappingReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingReadResponse, error)

	// APIFirewallNATOutboundMappingCreate request with any body
	APIFirewallNATOutboundMappingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingCreateResponse, error)

	APIFirewallNATOutboundMappingCreateWithResponse(ctx context.Context, body APIFirewallNATOutboundMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingCreateResponse, error)

	// APIFirewallNATOutboundMappingUpdate request with any body
	APIFirewallNATOutboundMappingUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingUpdateResponse, error)

	APIFirewallNATOutboundMappingUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingUpdateResponse, error)

	// APIFirewallNATOutboundPortForwardDelete request
	APIFirewallNATOutboundPortForwardDeleteWithResponse(ctx context.Context, params *APIFirewallNATOutboundPortForwardDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardDeleteResponse, error)

	// APIFirewallNATOutboundPortForwardRead request
	APIFirewallNATOutboundPortForwardReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardReadResponse, error)

	// APIFirewallNATOutboundPortForwardCreate request with any body
	APIFirewallNATOutboundPortForwardCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardCreateResponse, error)

	APIFirewallNATOutboundPortForwardCreateWithResponse(ctx context.Context, body APIFirewallNATOutboundPortForwardCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardCreateResponse, error)

	// APIFirewallNATOutboundPortForwardUpdate request with any body
	APIFirewallNATOutboundPortForwardUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardUpdateResponse, error)

	APIFirewallNATOutboundPortForwardUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundPortForwardUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardUpdateResponse, error)

	// APIFirewallRuleDelete request
	APIFirewallRuleDeleteWithResponse(ctx context.Context, params *APIFirewallRuleDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallRuleDeleteResponse, error)

	// APIFirewallRuleRead request
	APIFirewallRuleReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallRuleReadResponse, error)

	// APIFirewallRuleCreate request with any body
	APIFirewallRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleCreateResponse, error)

	APIFirewallRuleCreateWithResponse(ctx context.Context, body APIFirewallRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleCreateResponse, error)

	// APIFirewallRuleUpdate request with any body
	APIFirewallRuleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleUpdateResponse, error)

	APIFirewallRuleUpdateWithResponse(ctx context.Context, body APIFirewallRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleUpdateResponse, error)

	// APIFirewallRuleFlushDelete request
	APIFirewallRuleFlushDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushDeleteResponse, error)

	// APIFirewallRuleFlushUpdate request with any body
	APIFirewallRuleFlushUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushUpdateResponse, error)

	APIFirewallRuleFlushUpdateWithResponse(ctx context.Context, body APIFirewallRuleFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushUpdateResponse, error)

	// APIFirewallRuleSortUpdate request with any body
	APIFirewallRuleSortUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleSortUpdateResponse, error)

	APIFirewallRuleSortUpdateWithResponse(ctx context.Context, body APIFirewallRuleSortUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleSortUpdateResponse, error)

	// APIFirewallScheduleDelete request
	APIFirewallScheduleDeleteWithResponse(ctx context.Context, params *APIFirewallScheduleDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallScheduleDeleteResponse, error)

	// APIFirewallScheduleRead request
	APIFirewallScheduleReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallScheduleReadResponse, error)

	// APIFirewallScheduleCreate request with any body
	APIFirewallScheduleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleCreateResponse, error)

	APIFirewallScheduleCreateWithResponse(ctx context.Context, body APIFirewallScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleCreateResponse, error)

	// APIFirewallScheduleUpdate request with any body
	APIFirewallScheduleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleUpdateResponse, error)

	APIFirewallScheduleUpdateWithResponse(ctx context.Context, body APIFirewallScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleUpdateResponse, error)

	// APIFirewallScheduleTimeRangeDelete request
	APIFirewallScheduleTimeRangeDeleteWithResponse(ctx context.Context, params *APIFirewallScheduleTimeRangeDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeDeleteResponse, error)

	// APIFirewallScheduleTimeRangeCreate request with any body
	APIFirewallScheduleTimeRangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeCreateResponse, error)

	APIFirewallScheduleTimeRangeCreateWithResponse(ctx context.Context, body APIFirewallScheduleTimeRangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeCreateResponse, error)

	// APIFirewallStatesDelete request
	APIFirewallStatesDeleteWithResponse(ctx context.Context, params *APIFirewallStatesDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallStatesDeleteResponse, error)

	// APIFirewallStatesRead request
	APIFirewallStatesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallStatesReadResponse, error)

	// APIFirewallStatesSizeRead request
	APIFirewallStatesSizeReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeReadResponse, error)

	// APIFirewallStatesSizeUpdate request with any body
	APIFirewallStatesSizeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeUpdateResponse, error)

	APIFirewallStatesSizeUpdateWithResponse(ctx context.Context, body APIFirewallStatesSizeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeUpdateResponse, error)

	// APIFirewallTrafficShaperDelete request
	APIFirewallTrafficShaperDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperDeleteResponse, error)

	// APIFirewallTrafficShaperRead request
	APIFirewallTrafficShaperReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperReadResponse, error)

	// APIFirewallTrafficShaperCreate request with any body
	APIFirewallTrafficShaperCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperCreateResponse, error)

	APIFirewallTrafficShaperCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperCreateResponse, error)

	// APIFirewallTrafficShaperUpdate request with any body
	APIFirewallTrafficShaperUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperUpdateResponse, error)

	APIFirewallTrafficShaperUpdateWithResponse(ctx context.Context, body APIFirewallTrafficShaperUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperUpdateResponse, error)

	// APIFirewallTrafficShaperLimiterDelete request
	APIFirewallTrafficShaperLimiterDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterDeleteResponse, error)

	// APIFirewallTrafficShaperLimiterRead request
	APIFirewallTrafficShaperLimiterReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterReadResponse, error)

	// APIFirewallTrafficShaperLimiterCreate request with any body
	APIFirewallTrafficShaperLimiterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterCreateResponse, error)

	APIFirewallTrafficShaperLimiterCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterCreateResponse, error)

	// APIFirewallTrafficShaperLimiterBandwidthDelete request
	APIFirewallTrafficShaperLimiterBandwidthDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterBandwidthDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthDeleteResponse, error)

	// APIFirewallTrafficShaperLimiterBandwidthCreate request with any body
	APIFirewallTrafficShaperLimiterBandwidthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthCreateResponse, error)

	APIFirewallTrafficShaperLimiterBandwidthCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterBandwidthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthCreateResponse, error)

	// APIFirewallTrafficShaperLimiterQueueDelete request
	APIFirewallTrafficShaperLimiterQueueDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterQueueDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueDeleteResponse, error)

	// APIFirewallTrafficShaperLimiterQueueCreate request with any body
	APIFirewallTrafficShaperLimiterQueueCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueCreateResponse, error)

	APIFirewallTrafficShaperLimiterQueueCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueCreateResponse, error)

	// APIFirewallTrafficShaperQueueDelete request
	APIFirewallTrafficShaperQueueDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperQueueDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueDeleteResponse, error)

	// APIFirewallTrafficShaperQueueCreate request with any body
	APIFirewallTrafficShaperQueueCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueCreateResponse, error)

	APIFirewallTrafficShaperQueueCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueCreateResponse, error)

	// APIFirewallVirtualIPDelete request
	APIFirewallVirtualIPDeleteWithResponse(ctx context.Context, params *APIFirewallVirtualIPDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPDeleteResponse, error)

	// APIFirewallVirtualIPRead request
	APIFirewallVirtualIPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPReadResponse, error)

	// APIFirewallVirtualIPCreate request with any body
	APIFirewallVirtualIPCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPCreateResponse, error)

	APIFirewallVirtualIPCreateWithResponse(ctx context.Context, body APIFirewallVirtualIPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPCreateResponse, error)

	// APIFirewallVirtualIPUpdate request with any body
	APIFirewallVirtualIPUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPUpdateResponse, error)

	APIFirewallVirtualIPUpdateWithResponse(ctx context.Context, body APIFirewallVirtualIPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPUpdateResponse, error)

	// APIInterfaceDelete request
	APIInterfaceDeleteWithResponse(ctx context.Context, params *APIInterfaceDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceDeleteResponse, error)

	// APIInterfaceRead request
	APIInterfaceReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceReadResponse, error)

	// APIInterfaceCreate request with any body
	APIInterfaceCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceCreateResponse, error)

	APIInterfaceCreateWithResponse(ctx context.Context, body APIInterfaceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceCreateResponse, error)

	// APIInterfaceUpdate request with any body
	APIInterfaceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceUpdateResponse, error)

	APIInterfaceUpdateWithResponse(ctx context.Context, body APIInterfaceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceUpdateResponse, error)

	// APIInterfaceApplyRead request
	APIInterfaceApplyReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceApplyReadResponse, error)

	// APIInterfaceApplyCreate request with any body
	APIInterfaceApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceApplyCreateResponse, error)

	APIInterfaceApplyCreateWithResponse(ctx context.Context, body APIInterfaceApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceApplyCreateResponse, error)

	// APIInterfaceAvailableRead request
	APIInterfaceAvailableReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceAvailableReadResponse, error)

	// APIInterfaceBridgeDelete request
	APIInterfaceBridgeDeleteWithResponse(ctx context.Context, params *APIInterfaceBridgeDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeDeleteResponse, error)

	// APIInterfaceBridgeRead request
	APIInterfaceBridgeReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeReadResponse, error)

	// APIInterfaceBridgeCreate request with any body
	APIInterfaceBridgeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeCreateResponse, error)

	APIInterfaceBridgeCreateWithResponse(ctx context.Context, body APIInterfaceBridgeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeCreateResponse, error)

	// APIInterfaceBridgeUpdate request with any body
	APIInterfaceBridgeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeUpdateResponse, error)

	APIInterfaceBridgeUpdateWithResponse(ctx context.Context, body APIInterfaceBridgeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeUpdateResponse, error)

	// APIInterfaceGroupDelete request
	APIInterfaceGroupDeleteWithResponse(ctx context.Context, params *APIInterfaceGroupDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceGroupDeleteResponse, error)

	// APIInterfaceGroupRead request
	APIInterfaceGroupReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceGroupReadResponse, error)

	// APIInterfaceGroupCreate request with any body
	APIInterfaceGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceGroupCreateResponse, error)

	APIInterfaceGroupCreateWithResponse(ctx context.Context, body APIInterfaceGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceGroupCreateResponse, error)

	// APIInterfaceGroupUpdate request with any body
	APIInterfaceGroupUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceGroupUpdateResponse, error)

	APIInterfaceGroupUpdateWithResponse(ctx context.Context, body APIInterfaceGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceGroupUpdateResponse, error)

	// APIInterfaceVLANDelete request
	APIInterfaceVLANDeleteWithResponse(ctx context.Context, params *APIInterfaceVLANDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceVLANDeleteResponse, error)

	// APIInterfaceVLANRead request
	APIInterfaceVLANReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceVLANReadResponse, error)

	// APIInterfaceVLANCreate request with any body
	APIInterfaceVLANCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceVLANCreateResponse, error)

	APIInterfaceVLANCreateWithResponse(ctx context.Context, body APIInterfaceVLANCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceVLANCreateResponse, error)

	// APIInterfaceVLANUpdate request with any body
	APIInterfaceVLANUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceVLANUpdateResponse, error)

	APIInterfaceVLANUpdateWithResponse(ctx context.Context, body APIInterfaceVLANUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceVLANUpdateResponse, error)

	// APIRoutingApplyCreate request
	APIRoutingApplyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingApplyCreateResponse, error)

	// APIRoutingGatewayDelete request
	APIRoutingGatewayDeleteWithResponse(ctx context.Context, params *APIRoutingGatewayDeleteParams, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDeleteResponse, error)

	// APIRoutingGatewayRead request
	APIRoutingGatewayReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingGatewayReadResponse, error)

	// APIRoutingGatewayCreate request with any body
	APIRoutingGatewayCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayCreateResponse, error)

	APIRoutingGatewayCreateWithResponse(ctx context.Context, body APIRoutingGatewayCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayCreateResponse, error)

	// APIRoutingGatewayUpdate request with any body
	APIRoutingGatewayUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayUpdateResponse, error)

	APIRoutingGatewayUpdateWithResponse(ctx context.Context, body APIRoutingGatewayUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayUpdateResponse, error)

	// APIRoutingGatewayDefaultUpdate request with any body
	APIRoutingGatewayDefaultUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDefaultUpdateResponse, error)

	APIRoutingGatewayDefaultUpdateWithResponse(ctx context.Context, body APIRoutingGatewayDefaultUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDefaultUpdateResponse, error)

	// APIRoutingGatewayDetailRead request
	APIRoutingGatewayDetailReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDetailReadResponse, error)

	// APIRoutingStaticRouteDelete request
	APIRoutingStaticRouteDeleteWithResponse(ctx context.Context, params *APIRoutingStaticRouteDeleteParams, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteDeleteResponse, error)

	// APIRoutingStaticRouteRead request
	APIRoutingStaticRouteReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteReadResponse, error)

	// APIRoutingStaticRouteCreate request with any body
	APIRoutingStaticRouteCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteCreateResponse, error)

	APIRoutingStaticRouteCreateWithResponse(ctx context.Context, body APIRoutingStaticRouteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteCreateResponse, error)

	// APIRoutingStaticRouteUpdate request with any body
	APIRoutingStaticRouteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteUpdateResponse, error)

	APIRoutingStaticRouteUpdateWithResponse(ctx context.Context, body APIRoutingStaticRouteUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteUpdateResponse, error)

	// APIServicesRead request
	APIServicesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesReadResponse, error)

	// APIServicesDDNSRead request
	APIServicesDDNSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDDNSReadResponse, error)

	// APIServicesDHCPdRead request
	APIServicesDHCPdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdReadResponse, error)

	// APIServicesDHCPdUpdate request with any body
	APIServicesDHCPdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdUpdateResponse, error)

	APIServicesDHCPdUpdateWithResponse(ctx context.Context, body APIServicesDHCPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdUpdateResponse, error)

	// APIServicesDHCPdLeaseRead request
	APIServicesDHCPdLeaseReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdLeaseReadResponse, error)

	// APIServicesDHCPdOptionsCreate request with any body
	APIServicesDHCPdOptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdOptionsCreateResponse, error)

	APIServicesDHCPdOptionsCreateWithResponse(ctx context.Context, body APIServicesDHCPdOptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdOptionsCreateResponse, error)

	// APIServicesDHCPdRestartCreate request
	APIServicesDHCPdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdRestartCreateResponse, error)

	// APIServicesDHCPdStartCreate request
	APIServicesDHCPdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStartCreateResponse, error)

	// APIServicesDHCPdStaticMappingDelete request
	APIServicesDHCPdStaticMappingDeleteWithResponse(ctx context.Context, params *APIServicesDHCPdStaticMappingDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingDeleteResponse, error)

	// APIServicesDHCPdStaticMappingRead request
	APIServicesDHCPdStaticMappingReadWithResponse(ctx context.Context, params *APIServicesDHCPdStaticMappingReadParams, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingReadResponse, error)

	// APIServicesDHCPdStaticMappingCreate request with any body
	APIServicesDHCPdStaticMappingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingCreateResponse, error)

	APIServicesDHCPdStaticMappingCreateWithResponse(ctx context.Context, body APIServicesDHCPdStaticMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingCreateResponse, error)

	// APIServicesDHCPdStaticMappingUpdate request with any body
	APIServicesDHCPdStaticMappingUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingUpdateResponse, error)

	APIServicesDHCPdStaticMappingUpdateWithResponse(ctx context.Context, body APIServicesDHCPdStaticMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingUpdateResponse, error)

	// APIServicesDHCPdStopCreate request
	APIServicesDHCPdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStopCreateResponse, error)

	// APIServicesDnsmasqRead request
	APIServicesDnsmasqReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqReadResponse, error)

	// APIServicesDnsmasqApplyCreate request
	APIServicesDnsmasqApplyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqApplyCreateResponse, error)

	// APIServicesDnsmasqHostOverrideDelete request
	APIServicesDnsmasqHostOverrideDeleteWithResponse(ctx context.Context, params *APIServicesDnsmasqHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideDeleteResponse, error)

	// APIServicesDnsmasqHostOverrideRead request
	APIServicesDnsmasqHostOverrideReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideReadResponse, error)

	// APIServicesDnsmasqHostOverrideCreate request with any body
	APIServicesDnsmasqHostOverrideCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideCreateResponse, error)

	APIServicesDnsmasqHostOverrideCreateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideCreateResponse, error)

	// APIServicesDnsmasqHostOverrideUpdate request with any body
	APIServicesDnsmasqHostOverrideUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideUpdateResponse, error)

	APIServicesDnsmasqHostOverrideUpdateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideUpdateResponse, error)

	// APIServicesDnsmasqHostOverrideAliasCreate request with any body
	APIServicesDnsmasqHostOverrideAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideAliasCreateResponse, error)

	APIServicesDnsmasqHostOverrideAliasCreateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideAliasCreateResponse, error)

	// APIServicesDnsmasqRestartCreate request
	APIServicesDnsmasqRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqRestartCreateResponse, error)

	// APIServicesDnsmasqStartCreate request
	APIServicesDnsmasqStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqStartCreateResponse, error)

	// APIServicesDnsmasqStopCreate request
	APIServicesDnsmasqStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqStopCreateResponse, error)

	// APIServicesDpingerRestartCreate request
	APIServicesDpingerRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerRestartCreateResponse, error)

	// APIServicesDpingerStartCreate request
	APIServicesDpingerStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerStartCreateResponse, error)

	// APIServicesDpingerStopCreate request
	APIServicesDpingerStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerStopCreateResponse, error)

	// APIServicesIPsecApplyCreate request with any body
	APIServicesIPsecApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecApplyCreateResponse, error)

	APIServicesIPsecApplyCreateWithResponse(ctx context.Context, body APIServicesIPsecApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecApplyCreateResponse, error)

	// APIServicesIPsecPhase1Delete request
	APIServicesIPsecPhase1DeleteWithResponse(ctx context.Context, params *APIServicesIPsecPhase1DeleteParams, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1DeleteResponse, error)

	// APIServicesIPsecPhase1Read request
	APIServicesIPsecPhase1ReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1ReadResponse, error)

	// APIServicesIPsecPhase1Create request with any body
	APIServicesIPsecPhase1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1CreateResponse, error)

	APIServicesIPsecPhase1CreateWithResponse(ctx context.Context, body APIServicesIPsecPhase1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1CreateResponse, error)

	// APIServicesIPsecPhase1Update request with any body
	APIServicesIPsecPhase1UpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1UpdateResponse, error)

	APIServicesIPsecPhase1UpdateWithResponse(ctx context.Context, body APIServicesIPsecPhase1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1UpdateResponse, error)

	// APIServicesIPsecPhase1EncryptionCreate request with any body
	APIServicesIPsecPhase1EncryptionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1EncryptionCreateResponse, error)

	APIServicesIPsecPhase1EncryptionCreateWithResponse(ctx context.Context, body APIServicesIPsecPhase1EncryptionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1EncryptionCreateResponse, error)

	// APIServicesIPsecPhase2Delete request
	APIServicesIPsecPhase2DeleteWithResponse(ctx context.Context, params *APIServicesIPsecPhase2DeleteParams, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2DeleteResponse, error)

	// APIServicesIPsecPhase2Read request
	APIServicesIPsecPhase2ReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2ReadResponse, error)

	// APIServicesIPsecPhase2Create request with any body
	APIServicesIPsecPhase2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2CreateResponse, error)

	APIServicesIPsecPhase2CreateWithResponse(ctx context.Context, body APIServicesIPsecPhase2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2CreateResponse, error)

	// APIServicesIPsecPhase2Update request with any body
	APIServicesIPsecPhase2UpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2UpdateResponse, error)

	APIServicesIPsecPhase2UpdateWithResponse(ctx context.Context, body APIServicesIPsecPhase2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2UpdateResponse, error)

	// APIServicesNTPdRead request
	APIServicesNTPdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdReadResponse, error)

	// APIServicesNTPdUpdate request with any body
	APIServicesNTPdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesNTPdUpdateResponse, error)

	APIServicesNTPdUpdateWithResponse(ctx context.Context, body APIServicesNTPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesNTPdUpdateResponse, error)

	// APIServicesNTPdRestartCreate request
	APIServicesNTPdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdRestartCreateResponse, error)

	// APIServicesNTPdStartCreate request
	APIServicesNTPdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdStartCreateResponse, error)

	// APIServicesNTPdStopCreate request
	APIServicesNTPdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdStopCreateResponse, error)

	// APIServicesNTPdTimeServerDelete request
	APIServicesNTPdTimeServerDeleteWithResponse(ctx context.Context, params *APIServicesNTPdTimeServerDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerDeleteResponse, error)

	// APIServicesNTPdTimeServerCreate request with any body
	APIServicesNTPdTimeServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerCreateResponse, error)

	APIServicesNTPdTimeServerCreateWithResponse(ctx context.Context, body APIServicesNTPdTimeServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerCreateResponse, error)

	// APIServicesOpenVPNClientRead request
	APIServicesOpenVPNClientReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientReadResponse, error)

	// APIServicesOpenVPNClientCreate request with any body
	APIServicesOpenVPNClientCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientCreateResponse, error)

	APIServicesOpenVPNClientCreateWithResponse(ctx context.Context, body APIServicesOpenVPNClientCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientCreateResponse, error)

	// APIServicesOpenVPNClientUpdate request with any body
	APIServicesOpenVPNClientUpdateWithBodyWithResponse(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientUpdateResponse, error)

	APIServicesOpenVPNClientUpdateWithResponse(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, body APIServicesOpenVPNClientUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientUpdateResponse, error)

	// APIServicesOpenVPNClientSpecificOverridesDelete request
	APIServicesOpenVPNClientSpecificOverridesDeleteWithResponse(ctx context.Context, params *APIServicesOpenVPNClientSpecificOverridesDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesDeleteResponse, error)

	// APIServicesOpenVPNClientSpecificOverridesRead request
	APIServicesOpenVPNClientSpecificOverridesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesReadResponse, error)

	// APIServicesOpenVPNClientSpecificOverridesCreate request with any body
	APIServicesOpenVPNClientSpecificOverridesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesCreateResponse, error)

	APIServicesOpenVPNClientSpecificOverridesCreateWithResponse(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesCreateResponse, error)

	// APIServicesOpenVPNClientSpecificOverridesUpdate request with any body
	APIServicesOpenVPNClientSpecificOverridesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesUpdateResponse, error)

	APIServicesOpenVPNClientSpecificOverridesUpdateWithResponse(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesUpdateResponse, error)

	// APIServicesOpenVPNServerRead request
	APIServicesOpenVPNServerReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerReadResponse, error)

	// APIServicesOpenVPNServerCreate request with any body
	APIServicesOpenVPNServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerCreateResponse, error)

	APIServicesOpenVPNServerCreateWithResponse(ctx context.Context, body APIServicesOpenVPNServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerCreateResponse, error)

	// APIServicesOpenVPNServerUpdate request with any body
	APIServicesOpenVPNServerUpdateWithBodyWithResponse(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerUpdateResponse, error)

	APIServicesOpenVPNServerUpdateWithResponse(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, body APIServicesOpenVPNServerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerUpdateResponse, error)

	// APIServicesRestartCreate request with any body
	APIServicesRestartCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesRestartCreateResponse, error)

	APIServicesRestartCreateWithResponse(ctx context.Context, body APIServicesRestartCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesRestartCreateResponse, error)

	// APIServicesServiceWatchdogRead request
	APIServicesServiceWatchdogReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogReadResponse, error)

	// APIServicesServiceWatchdogUpdate request with any body
	APIServicesServiceWatchdogUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogUpdateResponse, error)

	APIServicesServiceWatchdogUpdateWithResponse(ctx context.Context, body APIServicesServiceWatchdogUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogUpdateResponse, error)

	// APIServicesSSHdRead request
	APIServicesSSHdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdReadResponse, error)

	// APIServicesSSHdUpdate request with any body
	APIServicesSSHdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesSSHdUpdateResponse, error)

	APIServicesSSHdUpdateWithResponse(ctx context.Context, body APIServicesSSHdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesSSHdUpdateResponse, error)

	// APIServicesSSHdRestartCreate request
	APIServicesSSHdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdRestartCreateResponse, error)

	// APIServicesSSHdStartCreate request
	APIServicesSSHdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdStartCreateResponse, error)

	// APIServicesSSHdStopCreate request
	APIServicesSSHdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdStopCreateResponse, error)

	// APIServicesStartCreate request
	APIServicesStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesStartCreateResponse, error)

	// APIServicesStopCreate request with any body
	APIServicesStopCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesStopCreateResponse, error)

	APIServicesStopCreateWithResponse(ctx context.Context, body APIServicesStopCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesStopCreateResponse, error)

	// APIServicesSyslogdRestartCreate request
	APIServicesSyslogdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdRestartCreateResponse, error)

	// APIServicesSyslogdStartCreate request
	APIServicesSyslogdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdStartCreateResponse, error)

	// APIServicesSyslogdStopCreate request
	APIServicesSyslogdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdStopCreateResponse, error)

	// APIServicesUnboundRead request
	APIServicesUnboundReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundReadResponse, error)

	// APIServicesUnboundAccessListDelete request
	APIServicesUnboundAccessListDeleteWithResponse(ctx context.Context, params *APIServicesUnboundAccessListDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListDeleteResponse, error)

	// APIServicesUnboundAccessListRead request
	APIServicesUnboundAccessListReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListReadResponse, error)

	// APIServicesUnboundAccessListCreate request with any body
	APIServicesUnboundAccessListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListCreateResponse, error)

	APIServicesUnboundAccessListCreateWithResponse(ctx context.Context, body APIServicesUnboundAccessListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListCreateResponse, error)

	// APIServicesUnboundAccessListUpdate request with any body
	APIServicesUnboundAccessListUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListUpdateResponse, error)

	APIServicesUnboundAccessListUpdateWithResponse(ctx context.Context, body APIServicesUnboundAccessListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListUpdateResponse, error)

	// APIServicesUnboundAccessListRowCreate request with any body
	APIServicesUnboundAccessListRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListRowCreateResponse, error)

	APIServicesUnboundAccessListRowCreateWithResponse(ctx context.Context, body APIServicesUnboundAccessListRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListRowCreateResponse, error)

	// APIServicesUnboundApplyRead request
	APIServicesUnboundApplyReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyReadResponse, error)

	// APIServicesUnboundApplyCreate request with any body
	APIServicesUnboundApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyCreateResponse, error)

	APIServicesUnboundApplyCreateWithResponse(ctx context.Context, body APIServicesUnboundApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyCreateResponse, error)

	// APIServicesUnboundHostOverrideDelete request
	APIServicesUnboundHostOverrideDeleteWithResponse(ctx context.Context, params *APIServicesUnboundHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideDeleteResponse, error)

	// APIServicesUnboundHostOverrideRead request
	APIServicesUnboundHostOverrideReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideReadResponse, error)

	// APIServicesUnboundHostOverrideCreate request with any body
	APIServicesUnboundHostOverrideCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideCreateResponse, error)

	APIServicesUnboundHostOverrideCreateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideCreateResponse, error)

	// APIServicesUnboundHostOverrideUpdate request with any body
	APIServicesUnboundHostOverrideUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideUpdateResponse, error)

	APIServicesUnboundHostOverrideUpdateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideUpdateResponse, error)

	// APIServicesUnboundHostOverrideAliasCreate request with any body
	APIServicesUnboundHostOverrideAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideAliasCreateResponse, error)

	APIServicesUnboundHostOverrideAliasCreateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideAliasCreateResponse, error)

	// APIServicesUnboundHostOverrideFlushDelete request
	APIServicesUnboundHostOverrideFlushDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushDeleteResponse, error)

	// APIServicesUnboundHostOverrideFlushUpdate request with any body
	APIServicesUnboundHostOverrideFlushUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushUpdateResponse, error)

	APIServicesUnboundHostOverrideFlushUpdateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushUpdateResponse, error)

	// APIServicesUnboundRestartCreate request
	APIServicesUnboundRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundRestartCreateResponse, error)

	// APIServicesUnboundStartCreate request
	APIServicesUnboundStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundStartCreateResponse, error)

	// APIServicesUnboundStopCreate request
	APIServicesUnboundStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundStopCreateResponse, error)

	// APIServicesWOLSendCreate request with any body
	APIServicesWOLSendCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesWOLSendCreateResponse, error)

	APIServicesWOLSendCreateWithResponse(ctx context.Context, body APIServicesWOLSendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesWOLSendCreateResponse, error)

	// APIStatusCARPRead request
	APIStatusCARPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusCARPReadResponse, error)

	// APIStatusCARPUpdate request with any body
	APIStatusCARPUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIStatusCARPUpdateResponse, error)

	APIStatusCARPUpdateWithResponse(ctx context.Context, body APIStatusCARPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIStatusCARPUpdateResponse, error)

	// APIStatusGatewayRead request
	APIStatusGatewayReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusGatewayReadResponse, error)

	// APIStatusInterfaceRead request
	APIStatusInterfaceReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusInterfaceReadResponse, error)

	// APIStatusIPsecRead request
	APIStatusIPsecReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusIPsecReadResponse, error)

	// APIStatusLogConfigHistoryRead request
	APIStatusLogConfigHistoryReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogConfigHistoryReadResponse, error)

	// APIStatusLogDHCPRead request
	APIStatusLogDHCPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogDHCPReadResponse, error)

	// APIStatusLogFirewallRead request
	APIStatusLogFirewallReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogFirewallReadResponse, error)

	// APIStatusLogSettingsUpdate request with any body
	APIStatusLogSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIStatusLogSettingsUpdateResponse, error)

	APIStatusLogSettingsUpdateWithResponse(ctx context.Context, body APIStatusLogSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIStatusLogSettingsUpdateResponse, error)

	// APIStatusLogSystemRead request
	APIStatusLogSystemReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogSystemReadResponse, error)

	// APIStatusOpenVPNRead request
	APIStatusOpenVPNReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusOpenVPNReadResponse, error)

	// APIStatusSystemRead request
	APIStatusSystemReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusSystemReadResponse, error)

	// APISystemAPIRead request
	APISystemAPIReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIReadResponse, error)

	// APISystemAPIUpdate request with any body
	APISystemAPIUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemAPIUpdateResponse, error)

	APISystemAPIUpdateWithResponse(ctx context.Context, body APISystemAPIUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemAPIUpdateResponse, error)

	// APISystemAPIErrorRead request
	APISystemAPIErrorReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIErrorReadResponse, error)

	// APISystemAPIVersionRead request
	APISystemAPIVersionReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIVersionReadResponse, error)

	// APISystemARPDelete request
	APISystemARPDeleteWithResponse(ctx context.Context, params *APISystemARPDeleteParams, reqEditors ...RequestEditorFn) (*APISystemARPDeleteResponse, error)

	// APISystemARPRead request
	APISystemARPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemARPReadResponse, error)

	// APISystemCADelete request
	APISystemCADeleteWithResponse(ctx context.Context, params *APISystemCADeleteParams, reqEditors ...RequestEditorFn) (*APISystemCADeleteResponse, error)

	// APISystemCARead request
	APISystemCAReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCAReadResponse, error)

	// APISystemCACreate request with any body
	APISystemCACreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCACreateResponse, error)

	APISystemCACreateWithResponse(ctx context.Context, body APISystemCACreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCACreateResponse, error)

	// APISystemCertificateDelete request
	APISystemCertificateDeleteWithResponse(ctx context.Context, params *APISystemCertificateDeleteParams, reqEditors ...RequestEditorFn) (*APISystemCertificateDeleteResponse, error)

	// APISystemCertificateRead request
	APISystemCertificateReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCertificateReadResponse, error)

	// APISystemCertificateCreate request with any body
	APISystemCertificateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCertificateCreateResponse, error)

	APISystemCertificateCreateWithResponse(ctx context.Context, body APISystemCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCertificateCreateResponse, error)

	// APISystemCertificateUpdate request with any body
	APISystemCertificateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCertificateUpdateResponse, error)

	APISystemCertificateUpdateWithResponse(ctx context.Context, body APISystemCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCertificateUpdateResponse, error)

	// APISystemConfigRead request
	APISystemConfigReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemConfigReadResponse, error)

	// APISystemConfigUpdate request with any body
	APISystemConfigUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemConfigUpdateResponse, error)

	// APISystemConsoleUpdate request with any body
	APISystemConsoleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemConsoleUpdateResponse, error)

	APISystemConsoleUpdateWithResponse(ctx context.Context, body APISystemConsoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemConsoleUpdateResponse, error)

	// APISystemCRLDelete request
	APISystemCRLDeleteWithResponse(ctx context.Context, params *APISystemCRLDeleteParams, reqEditors ...RequestEditorFn) (*APISystemCRLDeleteResponse, error)

	// APISystemCRLRead request
	APISystemCRLReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCRLReadResponse, error)

	// APISystemCRLCreate request with any body
	APISystemCRLCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCRLCreateResponse, error)

	APISystemCRLCreateWithResponse(ctx context.Context, body APISystemCRLCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCRLCreateResponse, error)

	// APISystemDNSRead request
	APISystemDNSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemDNSReadResponse, error)

	// APISystemDNSUpdate request with any body
	APISystemDNSUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemDNSUpdateResponse, error)

	APISystemDNSUpdateWithResponse(ctx context.Context, body APISystemDNSUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemDNSUpdateResponse, error)

	// APISystemDNSServerDelete request
	APISystemDNSServerDeleteWithResponse(ctx context.Context, params *APISystemDNSServerDeleteParams, reqEditors ...RequestEditorFn) (*APISystemDNSServerDeleteResponse, error)

	// APISystemDNSServerCreate request with any body
	APISystemDNSServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemDNSServerCreateResponse, error)

	APISystemDNSServerCreateWithResponse(ctx context.Context, body APISystemDNSServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemDNSServerCreateResponse, error)

	// APISystemHaltCreate request
	APISystemHaltCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemHaltCreateResponse, error)

	// APISystemHostnameRead request
	APISystemHostnameReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemHostnameReadResponse, error)

	// APISystemHostnameUpdate request with any body
	APISystemHostnameUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemHostnameUpdateResponse, error)

	APISystemHostnameUpdateWithResponse(ctx context.Context, body APISystemHostnameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemHostnameUpdateResponse, error)

	// APISystemNotificationsEmailRead request
	APISystemNotificationsEmailReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailReadResponse, error)

	// APISystemNotificationsEmailUpdate request with any body
	APISystemNotificationsEmailUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailUpdateResponse, error)

	APISystemNotificationsEmailUpdateWithResponse(ctx context.Context, body APISystemNotificationsEmailUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailUpdateResponse, error)

	// APISystemPackageDelete request
	APISystemPackageDeleteWithResponse(ctx context.Context, params *APISystemPackageDeleteParams, reqEditors ...RequestEditorFn) (*APISystemPackageDeleteResponse, error)

	// APISystemPackageRead request
	APISystemPackageReadWithResponse(ctx context.Context, params *APISystemPackageReadParams, reqEditors ...RequestEditorFn) (*APISystemPackageReadResponse, error)

	// APISystemPackageCreate request with any body
	APISystemPackageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemPackageCreateResponse, error)

	APISystemPackageCreateWithResponse(ctx context.Context, body APISystemPackageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemPackageCreateResponse, error)

	// APISystemRebootCreate request
	APISystemRebootCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemRebootCreateResponse, error)

	// APISystemTableRead request
	APISystemTableReadWithResponse(ctx context.Context, params *APISystemTableReadParams, reqEditors ...RequestEditorFn) (*APISystemTableReadResponse, error)

	// APISystemTunableDelete request
	APISystemTunableDeleteWithResponse(ctx context.Context, params *APISystemTunableDeleteParams, reqEditors ...RequestEditorFn) (*APISystemTunableDeleteResponse, error)

	// APISystemTunableRead request
	APISystemTunableReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemTunableReadResponse, error)

	// APISystemTunableCreate request with any body
	APISystemTunableCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemTunableCreateResponse, error)

	APISystemTunableCreateWithResponse(ctx context.Context, body APISystemTunableCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemTunableCreateResponse, error)

	// APISystemTunableUpdate request with any body
	APISystemTunableUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemTunableUpdateResponse, error)

	APISystemTunableUpdateWithResponse(ctx context.Context, body APISystemTunableUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemTunableUpdateResponse, error)

	// APISystemVersionRead request
	APISystemVersionReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemVersionReadResponse, error)

	// APISystemVersionUpgradeRead request
	APISystemVersionUpgradeReadWithResponse(ctx context.Context, params *APISystemVersionUpgradeReadParams, reqEditors ...RequestEditorFn) (*APISystemVersionUpgradeReadResponse, error)

	// APIUserDelete request
	APIUserDeleteWithResponse(ctx context.Context, params *APIUserDeleteParams, reqEditors ...RequestEditorFn) (*APIUserDeleteResponse, error)

	// APIUserRead request
	APIUserReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserReadResponse, error)

	// APIUserCreate request with any body
	APIUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserCreateResponse, error)

	APIUserCreateWithResponse(ctx context.Context, body APIUserCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserCreateResponse, error)

	// APIUserUpdate request with any body
	APIUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserUpdateResponse, error)

	APIUserUpdateWithResponse(ctx context.Context, body APIUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserUpdateResponse, error)

	// APIUserAuthServerDelete request
	APIUserAuthServerDeleteWithResponse(ctx context.Context, params *APIUserAuthServerDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerDeleteResponse, error)

	// APIUserAuthServerRead request
	APIUserAuthServerReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerReadResponse, error)

	// APIUserAuthServerLDAPDelete request
	APIUserAuthServerLDAPDeleteWithResponse(ctx context.Context, params *APIUserAuthServerLDAPDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPDeleteResponse, error)

	// APIUserAuthServerLDAPRead request
	APIUserAuthServerLDAPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPReadResponse, error)

	// APIUserAuthServerLDAPCreate request with any body
	APIUserAuthServerLDAPCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPCreateResponse, error)

	APIUserAuthServerLDAPCreateWithResponse(ctx context.Context, body APIUserAuthServerLDAPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPCreateResponse, error)

	// APIUserAuthServerRADIUSDelete request
	APIUserAuthServerRADIUSDeleteWithResponse(ctx context.Context, params *APIUserAuthServerRADIUSDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSDeleteResponse, error)

	// APIUserAuthServerRADIUSRead request
	APIUserAuthServerRADIUSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSReadResponse, error)

	// APIUserAuthServerRADIUSCreate request with any body
	APIUserAuthServerRADIUSCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSCreateResponse, error)

	APIUserAuthServerRADIUSCreateWithResponse(ctx context.Context, body APIUserAuthServerRADIUSCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSCreateResponse, error)

	// APIUserGroupDelete request
	APIUserGroupDeleteWithResponse(ctx context.Context, params *APIUserGroupDeleteParams, reqEditors ...RequestEditorFn) (*APIUserGroupDeleteResponse, error)

	// APIUserGroupRead request
	APIUserGroupReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserGroupReadResponse, error)

	// APIUserGroupCreate request with any body
	APIUserGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupCreateResponse, error)

	APIUserGroupCreateWithResponse(ctx context.Context, body APIUserGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupCreateResponse, error)

	// APIUserGroupUpdate request with any body
	APIUserGroupUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupUpdateResponse, error)

	APIUserGroupUpdateWithResponse(ctx context.Context, body APIUserGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupUpdateResponse, error)

	// APIUserGroupMemberDelete request
	APIUserGroupMemberDeleteWithResponse(ctx context.Context, params *APIUserGroupMemberDeleteParams, reqEditors ...RequestEditorFn) (*APIUserGroupMemberDeleteResponse, error)

	// APIUserGroupMemberCreate request with any body
	APIUserGroupMemberCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupMemberCreateResponse, error)

	APIUserGroupMemberCreateWithResponse(ctx context.Context, body APIUserGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupMemberCreateResponse, error)

	// APIUserPrivilegeDelete request
	APIUserPrivilegeDeleteWithResponse(ctx context.Context, params *APIUserPrivilegeDeleteParams, reqEditors ...RequestEditorFn) (*APIUserPrivilegeDeleteResponse, error)

	// APIUserPrivilegeCreate request with any body
	APIUserPrivilegeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserPrivilegeCreateResponse, error)

	APIUserPrivilegeCreateWithResponse(ctx context.Context, body APIUserPrivilegeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserPrivilegeCreateResponse, error)
}

type APIAccessTokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIAccessTokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIAccessTokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIDiagnosticsCommandPromptCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIDiagnosticsCommandPromptCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIDiagnosticsCommandPromptCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasAdvancedReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasAdvancedReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasAdvancedReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasAdvancedUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasAdvancedUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasAdvancedUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasEntryDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasEntryDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasEntryDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallAliasEntryCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallAliasEntryCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallAliasEntryCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOneToOneDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOneToOneDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOneToOneDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOneToOneReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOneToOneReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOneToOneReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOneToOneCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOneToOneCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOneToOneCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOneToOneUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOneToOneUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOneToOneUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundMappingDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundMappingDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundMappingDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundMappingReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundMappingReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundMappingReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundMappingCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundMappingCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundMappingCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundMappingUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundMappingUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundMappingUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundPortForwardDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundPortForwardDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundPortForwardDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundPortForwardReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundPortForwardReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundPortForwardReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundPortForwardCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundPortForwardCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundPortForwardCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallNATOutboundPortForwardUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallNATOutboundPortForwardUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallNATOutboundPortForwardUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleFlushDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleFlushDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleFlushDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleFlushUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleFlushUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleFlushUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallRuleSortUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallRuleSortUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallRuleSortUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleTimeRangeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleTimeRangeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleTimeRangeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallScheduleTimeRangeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallScheduleTimeRangeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallScheduleTimeRangeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallStatesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallStatesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallStatesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallStatesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallStatesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallStatesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallStatesSizeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallStatesSizeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallStatesSizeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallStatesSizeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallStatesSizeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallStatesSizeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterBandwidthDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterBandwidthDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterBandwidthDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterBandwidthCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterBandwidthCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterBandwidthCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterQueueDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterQueueDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterQueueDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperLimiterQueueCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperLimiterQueueCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperLimiterQueueCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperQueueDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperQueueDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperQueueDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallTrafficShaperQueueCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallTrafficShaperQueueCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallTrafficShaperQueueCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallVirtualIPDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallVirtualIPDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallVirtualIPDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallVirtualIPReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallVirtualIPReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallVirtualIPReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallVirtualIPCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallVirtualIPCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallVirtualIPCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIFirewallVirtualIPUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIFirewallVirtualIPUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIFirewallVirtualIPUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceApplyReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceApplyReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceApplyReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceAvailableReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceAvailableReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceAvailableReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceBridgeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceBridgeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceBridgeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceBridgeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceBridgeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceBridgeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceBridgeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceBridgeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceBridgeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceBridgeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceBridgeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceBridgeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceGroupDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceGroupDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceGroupDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceGroupReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceGroupReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceGroupReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceGroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceGroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceGroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceGroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceGroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceGroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceVLANDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceVLANDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceVLANDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceVLANReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceVLANReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceVLANReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceVLANCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceVLANCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceVLANCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIInterfaceVLANUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIInterfaceVLANUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIInterfaceVLANUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayDefaultUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayDefaultUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayDefaultUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingGatewayDetailReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingGatewayDetailReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingGatewayDetailReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingStaticRouteDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingStaticRouteDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingStaticRouteDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingStaticRouteReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingStaticRouteReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingStaticRouteReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingStaticRouteCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingStaticRouteCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingStaticRouteCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIRoutingStaticRouteUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIRoutingStaticRouteUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIRoutingStaticRouteUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDDNSReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDDNSReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDDNSReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdLeaseReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdLeaseReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdLeaseReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdOptionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdOptionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdOptionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStaticMappingDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStaticMappingDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStaticMappingDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStaticMappingReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStaticMappingReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStaticMappingReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStaticMappingCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStaticMappingCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStaticMappingCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStaticMappingUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStaticMappingUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStaticMappingUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDHCPdStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDHCPdStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDHCPdStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqHostOverrideDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqHostOverrideDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqHostOverrideDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqHostOverrideReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqHostOverrideReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqHostOverrideReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqHostOverrideCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqHostOverrideCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqHostOverrideCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqHostOverrideUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqHostOverrideUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqHostOverrideUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqHostOverrideAliasCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqHostOverrideAliasCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqHostOverrideAliasCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDnsmasqStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDnsmasqStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDnsmasqStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDpingerRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDpingerRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDpingerRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDpingerStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDpingerStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDpingerStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesDpingerStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesDpingerStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesDpingerStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase1ReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase1ReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase1ReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase1EncryptionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase1EncryptionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase1EncryptionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase2DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase2DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase2DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase2ReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase2ReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase2ReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesIPsecPhase2UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesIPsecPhase2UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesIPsecPhase2UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdTimeServerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdTimeServerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdTimeServerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesNTPdTimeServerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesNTPdTimeServerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesNTPdTimeServerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientSpecificOverridesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientSpecificOverridesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientSpecificOverridesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientSpecificOverridesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientSpecificOverridesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientSpecificOverridesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientSpecificOverridesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientSpecificOverridesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientSpecificOverridesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNClientSpecificOverridesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNClientSpecificOverridesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNClientSpecificOverridesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNServerReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNServerReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNServerReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNServerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNServerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNServerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesOpenVPNServerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesOpenVPNServerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesOpenVPNServerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesServiceWatchdogReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesServiceWatchdogReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesServiceWatchdogReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesServiceWatchdogUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesServiceWatchdogUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesServiceWatchdogUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSSHdReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSSHdReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSSHdReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSSHdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSSHdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSSHdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSSHdRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSSHdRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSSHdRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSSHdStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSSHdStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSSHdStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSSHdStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSSHdStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSSHdStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSyslogdRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSyslogdRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSyslogdRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSyslogdStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSyslogdStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSyslogdStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesSyslogdStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesSyslogdStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesSyslogdStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundAccessListDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundAccessListDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundAccessListDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundAccessListReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundAccessListReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundAccessListReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundAccessListCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundAccessListCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundAccessListCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundAccessListUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundAccessListUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundAccessListUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundAccessListRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundAccessListRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundAccessListRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundApplyReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundApplyReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundApplyReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundApplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundApplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundApplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideAliasCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideAliasCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideAliasCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideFlushDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideFlushDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideFlushDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundHostOverrideFlushUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundHostOverrideFlushUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundHostOverrideFlushUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundRestartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundRestartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundRestartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundStartCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundStartCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundStartCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesUnboundStopCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesUnboundStopCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesUnboundStopCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIServicesWOLSendCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIServicesWOLSendCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIServicesWOLSendCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusCARPReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusCARPReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusCARPReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusCARPUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusCARPUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusCARPUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusGatewayReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusGatewayReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusGatewayReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusInterfaceReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusInterfaceReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusInterfaceReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusIPsecReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusIPsecReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusIPsecReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusLogConfigHistoryReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusLogConfigHistoryReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusLogConfigHistoryReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusLogDHCPReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusLogDHCPReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusLogDHCPReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusLogFirewallReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusLogFirewallReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusLogFirewallReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusLogSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusLogSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusLogSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusLogSystemReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusLogSystemReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusLogSystemReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusOpenVPNReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusOpenVPNReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusOpenVPNReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIStatusSystemReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIStatusSystemReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIStatusSystemReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemAPIReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemAPIReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemAPIReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemAPIUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemAPIUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemAPIUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemAPIErrorReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemAPIErrorReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemAPIErrorReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemAPIVersionReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemAPIVersionReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemAPIVersionReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemARPDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemARPDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemARPDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemARPReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemARPReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemARPReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCADeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCADeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCADeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCAReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCAReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCAReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCACreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCACreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCACreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCertificateDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCertificateDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCertificateDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCertificateReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCertificateReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCertificateReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCertificateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCertificateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCertificateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCertificateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCertificateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCertificateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemConfigReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemConfigReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemConfigReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemConfigUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemConfigUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemConfigUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemConsoleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemConsoleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemConsoleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCRLDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCRLDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCRLDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCRLReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCRLReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCRLReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemCRLCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemCRLCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemCRLCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemDNSReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemDNSReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemDNSReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemDNSUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemDNSUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemDNSUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemDNSServerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemDNSServerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemDNSServerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemDNSServerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemDNSServerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemDNSServerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemHaltCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemHaltCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemHaltCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemHostnameReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemHostnameReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemHostnameReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemHostnameUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemHostnameUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemHostnameUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemNotificationsEmailReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemNotificationsEmailReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemNotificationsEmailReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemNotificationsEmailUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemNotificationsEmailUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemNotificationsEmailUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemPackageDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemPackageDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemPackageDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemPackageReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemPackageReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemPackageReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemPackageCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemPackageCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemPackageCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemRebootCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemRebootCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemRebootCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemTableReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemTableReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemTableReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemTunableDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemTunableDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemTunableDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemTunableReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemTunableReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemTunableReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemTunableCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemTunableCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemTunableCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemTunableUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemTunableUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemTunableUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemVersionReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemVersionReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemVersionReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APISystemVersionUpgradeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APISystemVersionUpgradeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APISystemVersionUpgradeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerLDAPDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerLDAPDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerLDAPDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerLDAPReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerLDAPReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerLDAPReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerLDAPCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerLDAPCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerLDAPCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerRADIUSDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerRADIUSDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerRADIUSDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerRADIUSReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerRADIUSReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerRADIUSReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserAuthServerRADIUSCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserAuthServerRADIUSCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserAuthServerRADIUSCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupMemberDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupMemberDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupMemberDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserGroupMemberCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserGroupMemberCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserGroupMemberCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserPrivilegeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserPrivilegeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserPrivilegeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserPrivilegeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
	JSON401      *Response
}

// Status returns HTTPResponse.Status
func (r APIUserPrivilegeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserPrivilegeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// APIAccessTokenCreateWithResponse request returning *APIAccessTokenCreateResponse
func (c *ClientWithResponses) APIAccessTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIAccessTokenCreateResponse, error) {
	rsp, err := c.APIAccessTokenCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIAccessTokenCreateResponse(rsp)
}

// APIDiagnosticsCommandPromptCreateWithBodyWithResponse request with arbitrary body returning *APIDiagnosticsCommandPromptCreateResponse
func (c *ClientWithResponses) APIDiagnosticsCommandPromptCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIDiagnosticsCommandPromptCreateResponse, error) {
	rsp, err := c.APIDiagnosticsCommandPromptCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIDiagnosticsCommandPromptCreateResponse(rsp)
}

func (c *ClientWithResponses) APIDiagnosticsCommandPromptCreateWithResponse(ctx context.Context, body APIDiagnosticsCommandPromptCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIDiagnosticsCommandPromptCreateResponse, error) {
	rsp, err := c.APIDiagnosticsCommandPromptCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIDiagnosticsCommandPromptCreateResponse(rsp)
}

// APIFirewallAliasDeleteWithResponse request returning *APIFirewallAliasDeleteResponse
func (c *ClientWithResponses) APIFirewallAliasDeleteWithResponse(ctx context.Context, params *APIFirewallAliasDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallAliasDeleteResponse, error) {
	rsp, err := c.APIFirewallAliasDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasDeleteResponse(rsp)
}

// APIFirewallAliasReadWithResponse request returning *APIFirewallAliasReadResponse
func (c *ClientWithResponses) APIFirewallAliasReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallAliasReadResponse, error) {
	rsp, err := c.APIFirewallAliasRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasReadResponse(rsp)
}

// APIFirewallAliasCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallAliasCreateResponse
func (c *ClientWithResponses) APIFirewallAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasCreateResponse, error) {
	rsp, err := c.APIFirewallAliasCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallAliasCreateWithResponse(ctx context.Context, body APIFirewallAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasCreateResponse, error) {
	rsp, err := c.APIFirewallAliasCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasCreateResponse(rsp)
}

// APIFirewallAliasUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallAliasUpdateResponse
func (c *ClientWithResponses) APIFirewallAliasUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasUpdateResponse, error) {
	rsp, err := c.APIFirewallAliasUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallAliasUpdateWithResponse(ctx context.Context, body APIFirewallAliasUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasUpdateResponse, error) {
	rsp, err := c.APIFirewallAliasUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasUpdateResponse(rsp)
}

// APIFirewallAliasAdvancedReadWithResponse request returning *APIFirewallAliasAdvancedReadResponse
func (c *ClientWithResponses) APIFirewallAliasAdvancedReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedReadResponse, error) {
	rsp, err := c.APIFirewallAliasAdvancedRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasAdvancedReadResponse(rsp)
}

// APIFirewallAliasAdvancedUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallAliasAdvancedUpdateResponse
func (c *ClientWithResponses) APIFirewallAliasAdvancedUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedUpdateResponse, error) {
	rsp, err := c.APIFirewallAliasAdvancedUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasAdvancedUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallAliasAdvancedUpdateWithResponse(ctx context.Context, body APIFirewallAliasAdvancedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasAdvancedUpdateResponse, error) {
	rsp, err := c.APIFirewallAliasAdvancedUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasAdvancedUpdateResponse(rsp)
}

// APIFirewallAliasEntryDeleteWithResponse request returning *APIFirewallAliasEntryDeleteResponse
func (c *ClientWithResponses) APIFirewallAliasEntryDeleteWithResponse(ctx context.Context, params *APIFirewallAliasEntryDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryDeleteResponse, error) {
	rsp, err := c.APIFirewallAliasEntryDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasEntryDeleteResponse(rsp)
}

// APIFirewallAliasEntryCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallAliasEntryCreateResponse
func (c *ClientWithResponses) APIFirewallAliasEntryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryCreateResponse, error) {
	rsp, err := c.APIFirewallAliasEntryCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasEntryCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallAliasEntryCreateWithResponse(ctx context.Context, body APIFirewallAliasEntryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallAliasEntryCreateResponse, error) {
	rsp, err := c.APIFirewallAliasEntryCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallAliasEntryCreateResponse(rsp)
}

// APIFirewallApplyCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallApplyCreateResponse
func (c *ClientWithResponses) APIFirewallApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallApplyCreateResponse, error) {
	rsp, err := c.APIFirewallApplyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallApplyCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallApplyCreateWithResponse(ctx context.Context, body APIFirewallApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallApplyCreateResponse, error) {
	rsp, err := c.APIFirewallApplyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallApplyCreateResponse(rsp)
}

// APIFirewallNATOneToOneDeleteWithResponse request returning *APIFirewallNATOneToOneDeleteResponse
func (c *ClientWithResponses) APIFirewallNATOneToOneDeleteWithResponse(ctx context.Context, params *APIFirewallNATOneToOneDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneDeleteResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneDeleteResponse(rsp)
}

// APIFirewallNATOneToOneReadWithResponse request returning *APIFirewallNATOneToOneReadResponse
func (c *ClientWithResponses) APIFirewallNATOneToOneReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneReadResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneReadResponse(rsp)
}

// APIFirewallNATOneToOneCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOneToOneCreateResponse
func (c *ClientWithResponses) APIFirewallNATOneToOneCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneCreateResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOneToOneCreateWithResponse(ctx context.Context, body APIFirewallNATOneToOneCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneCreateResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneCreateResponse(rsp)
}

// APIFirewallNATOneToOneUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOneToOneUpdateResponse
func (c *ClientWithResponses) APIFirewallNATOneToOneUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOneToOneUpdateWithResponse(ctx context.Context, body APIFirewallNATOneToOneUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOneToOneUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOneToOneUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOneToOneUpdateResponse(rsp)
}

// APIFirewallNATOutboundReadWithResponse request returning *APIFirewallNATOutboundReadResponse
func (c *ClientWithResponses) APIFirewallNATOutboundReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundReadResponse, error) {
	rsp, err := c.APIFirewallNATOutboundRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundReadResponse(rsp)
}

// APIFirewallNATOutboundUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOutboundUpdateResponse
func (c *ClientWithResponses) APIFirewallNATOutboundUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOutboundUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundUpdateResponse(rsp)
}

// APIFirewallNATOutboundMappingDeleteWithResponse request returning *APIFirewallNATOutboundMappingDeleteResponse
func (c *ClientWithResponses) APIFirewallNATOutboundMappingDeleteWithResponse(ctx context.Context, params *APIFirewallNATOutboundMappingDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingDeleteResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingDeleteResponse(rsp)
}

// APIFirewallNATOutboundMappingReadWithResponse request returning *APIFirewallNATOutboundMappingReadResponse
func (c *ClientWithResponses) APIFirewallNATOutboundMappingReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingReadResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingReadResponse(rsp)
}

// APIFirewallNATOutboundMappingCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOutboundMappingCreateResponse
func (c *ClientWithResponses) APIFirewallNATOutboundMappingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingCreateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOutboundMappingCreateWithResponse(ctx context.Context, body APIFirewallNATOutboundMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingCreateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingCreateResponse(rsp)
}

// APIFirewallNATOutboundMappingUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOutboundMappingUpdateResponse
func (c *ClientWithResponses) APIFirewallNATOutboundMappingUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOutboundMappingUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundMappingUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundMappingUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundMappingUpdateResponse(rsp)
}

// APIFirewallNATOutboundPortForwardDeleteWithResponse request returning *APIFirewallNATOutboundPortForwardDeleteResponse
func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardDeleteWithResponse(ctx context.Context, params *APIFirewallNATOutboundPortForwardDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardDeleteResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardDeleteResponse(rsp)
}

// APIFirewallNATOutboundPortForwardReadWithResponse request returning *APIFirewallNATOutboundPortForwardReadResponse
func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardReadResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardReadResponse(rsp)
}

// APIFirewallNATOutboundPortForwardCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOutboundPortForwardCreateResponse
func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardCreateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardCreateWithResponse(ctx context.Context, body APIFirewallNATOutboundPortForwardCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardCreateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardCreateResponse(rsp)
}

// APIFirewallNATOutboundPortForwardUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallNATOutboundPortForwardUpdateResponse
func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallNATOutboundPortForwardUpdateWithResponse(ctx context.Context, body APIFirewallNATOutboundPortForwardUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallNATOutboundPortForwardUpdateResponse, error) {
	rsp, err := c.APIFirewallNATOutboundPortForwardUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallNATOutboundPortForwardUpdateResponse(rsp)
}

// APIFirewallRuleDeleteWithResponse request returning *APIFirewallRuleDeleteResponse
func (c *ClientWithResponses) APIFirewallRuleDeleteWithResponse(ctx context.Context, params *APIFirewallRuleDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallRuleDeleteResponse, error) {
	rsp, err := c.APIFirewallRuleDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleDeleteResponse(rsp)
}

// APIFirewallRuleReadWithResponse request returning *APIFirewallRuleReadResponse
func (c *ClientWithResponses) APIFirewallRuleReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallRuleReadResponse, error) {
	rsp, err := c.APIFirewallRuleRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleReadResponse(rsp)
}

// APIFirewallRuleCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallRuleCreateResponse
func (c *ClientWithResponses) APIFirewallRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleCreateResponse, error) {
	rsp, err := c.APIFirewallRuleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallRuleCreateWithResponse(ctx context.Context, body APIFirewallRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleCreateResponse, error) {
	rsp, err := c.APIFirewallRuleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleCreateResponse(rsp)
}

// APIFirewallRuleUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallRuleUpdateResponse
func (c *ClientWithResponses) APIFirewallRuleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallRuleUpdateWithResponse(ctx context.Context, body APIFirewallRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleUpdateResponse(rsp)
}

// APIFirewallRuleFlushDeleteWithResponse request returning *APIFirewallRuleFlushDeleteResponse
func (c *ClientWithResponses) APIFirewallRuleFlushDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushDeleteResponse, error) {
	rsp, err := c.APIFirewallRuleFlushDelete(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleFlushDeleteResponse(rsp)
}

// APIFirewallRuleFlushUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallRuleFlushUpdateResponse
func (c *ClientWithResponses) APIFirewallRuleFlushUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleFlushUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleFlushUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallRuleFlushUpdateWithResponse(ctx context.Context, body APIFirewallRuleFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleFlushUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleFlushUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleFlushUpdateResponse(rsp)
}

// APIFirewallRuleSortUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallRuleSortUpdateResponse
func (c *ClientWithResponses) APIFirewallRuleSortUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallRuleSortUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleSortUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleSortUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallRuleSortUpdateWithResponse(ctx context.Context, body APIFirewallRuleSortUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallRuleSortUpdateResponse, error) {
	rsp, err := c.APIFirewallRuleSortUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallRuleSortUpdateResponse(rsp)
}

// APIFirewallScheduleDeleteWithResponse request returning *APIFirewallScheduleDeleteResponse
func (c *ClientWithResponses) APIFirewallScheduleDeleteWithResponse(ctx context.Context, params *APIFirewallScheduleDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallScheduleDeleteResponse, error) {
	rsp, err := c.APIFirewallScheduleDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleDeleteResponse(rsp)
}

// APIFirewallScheduleReadWithResponse request returning *APIFirewallScheduleReadResponse
func (c *ClientWithResponses) APIFirewallScheduleReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallScheduleReadResponse, error) {
	rsp, err := c.APIFirewallScheduleRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleReadResponse(rsp)
}

// APIFirewallScheduleCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallScheduleCreateResponse
func (c *ClientWithResponses) APIFirewallScheduleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleCreateResponse, error) {
	rsp, err := c.APIFirewallScheduleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallScheduleCreateWithResponse(ctx context.Context, body APIFirewallScheduleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleCreateResponse, error) {
	rsp, err := c.APIFirewallScheduleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleCreateResponse(rsp)
}

// APIFirewallScheduleUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallScheduleUpdateResponse
func (c *ClientWithResponses) APIFirewallScheduleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleUpdateResponse, error) {
	rsp, err := c.APIFirewallScheduleUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallScheduleUpdateWithResponse(ctx context.Context, body APIFirewallScheduleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleUpdateResponse, error) {
	rsp, err := c.APIFirewallScheduleUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleUpdateResponse(rsp)
}

// APIFirewallScheduleTimeRangeDeleteWithResponse request returning *APIFirewallScheduleTimeRangeDeleteResponse
func (c *ClientWithResponses) APIFirewallScheduleTimeRangeDeleteWithResponse(ctx context.Context, params *APIFirewallScheduleTimeRangeDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeDeleteResponse, error) {
	rsp, err := c.APIFirewallScheduleTimeRangeDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleTimeRangeDeleteResponse(rsp)
}

// APIFirewallScheduleTimeRangeCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallScheduleTimeRangeCreateResponse
func (c *ClientWithResponses) APIFirewallScheduleTimeRangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeCreateResponse, error) {
	rsp, err := c.APIFirewallScheduleTimeRangeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleTimeRangeCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallScheduleTimeRangeCreateWithResponse(ctx context.Context, body APIFirewallScheduleTimeRangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallScheduleTimeRangeCreateResponse, error) {
	rsp, err := c.APIFirewallScheduleTimeRangeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallScheduleTimeRangeCreateResponse(rsp)
}

// APIFirewallStatesDeleteWithResponse request returning *APIFirewallStatesDeleteResponse
func (c *ClientWithResponses) APIFirewallStatesDeleteWithResponse(ctx context.Context, params *APIFirewallStatesDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallStatesDeleteResponse, error) {
	rsp, err := c.APIFirewallStatesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallStatesDeleteResponse(rsp)
}

// APIFirewallStatesReadWithResponse request returning *APIFirewallStatesReadResponse
func (c *ClientWithResponses) APIFirewallStatesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallStatesReadResponse, error) {
	rsp, err := c.APIFirewallStatesRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallStatesReadResponse(rsp)
}

// APIFirewallStatesSizeReadWithResponse request returning *APIFirewallStatesSizeReadResponse
func (c *ClientWithResponses) APIFirewallStatesSizeReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeReadResponse, error) {
	rsp, err := c.APIFirewallStatesSizeRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallStatesSizeReadResponse(rsp)
}

// APIFirewallStatesSizeUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallStatesSizeUpdateResponse
func (c *ClientWithResponses) APIFirewallStatesSizeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeUpdateResponse, error) {
	rsp, err := c.APIFirewallStatesSizeUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallStatesSizeUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallStatesSizeUpdateWithResponse(ctx context.Context, body APIFirewallStatesSizeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallStatesSizeUpdateResponse, error) {
	rsp, err := c.APIFirewallStatesSizeUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallStatesSizeUpdateResponse(rsp)
}

// APIFirewallTrafficShaperDeleteWithResponse request returning *APIFirewallTrafficShaperDeleteResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperDeleteResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperDeleteResponse(rsp)
}

// APIFirewallTrafficShaperReadWithResponse request returning *APIFirewallTrafficShaperReadResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperReadResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperReadResponse(rsp)
}

// APIFirewallTrafficShaperCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperCreateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperCreateResponse(rsp)
}

// APIFirewallTrafficShaperUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperUpdateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperUpdateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperUpdateWithResponse(ctx context.Context, body APIFirewallTrafficShaperUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperUpdateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperUpdateResponse(rsp)
}

// APIFirewallTrafficShaperLimiterDeleteWithResponse request returning *APIFirewallTrafficShaperLimiterDeleteResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterDeleteResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterDeleteResponse(rsp)
}

// APIFirewallTrafficShaperLimiterReadWithResponse request returning *APIFirewallTrafficShaperLimiterReadResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterReadResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterReadResponse(rsp)
}

// APIFirewallTrafficShaperLimiterCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperLimiterCreateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterCreateResponse(rsp)
}

// APIFirewallTrafficShaperLimiterBandwidthDeleteWithResponse request returning *APIFirewallTrafficShaperLimiterBandwidthDeleteResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterBandwidthDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterBandwidthDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthDeleteResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterBandwidthDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterBandwidthDeleteResponse(rsp)
}

// APIFirewallTrafficShaperLimiterBandwidthCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperLimiterBandwidthCreateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterBandwidthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterBandwidthCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterBandwidthCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterBandwidthCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterBandwidthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterBandwidthCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterBandwidthCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterBandwidthCreateResponse(rsp)
}

// APIFirewallTrafficShaperLimiterQueueDeleteWithResponse request returning *APIFirewallTrafficShaperLimiterQueueDeleteResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterQueueDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperLimiterQueueDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueDeleteResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterQueueDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterQueueDeleteResponse(rsp)
}

// APIFirewallTrafficShaperLimiterQueueCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperLimiterQueueCreateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterQueueCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterQueueCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterQueueCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperLimiterQueueCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperLimiterQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperLimiterQueueCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperLimiterQueueCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperLimiterQueueCreateResponse(rsp)
}

// APIFirewallTrafficShaperQueueDeleteWithResponse request returning *APIFirewallTrafficShaperQueueDeleteResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperQueueDeleteWithResponse(ctx context.Context, params *APIFirewallTrafficShaperQueueDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueDeleteResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperQueueDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperQueueDeleteResponse(rsp)
}

// APIFirewallTrafficShaperQueueCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallTrafficShaperQueueCreateResponse
func (c *ClientWithResponses) APIFirewallTrafficShaperQueueCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperQueueCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperQueueCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallTrafficShaperQueueCreateWithResponse(ctx context.Context, body APIFirewallTrafficShaperQueueCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallTrafficShaperQueueCreateResponse, error) {
	rsp, err := c.APIFirewallTrafficShaperQueueCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallTrafficShaperQueueCreateResponse(rsp)
}

// APIFirewallVirtualIPDeleteWithResponse request returning *APIFirewallVirtualIPDeleteResponse
func (c *ClientWithResponses) APIFirewallVirtualIPDeleteWithResponse(ctx context.Context, params *APIFirewallVirtualIPDeleteParams, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPDeleteResponse, error) {
	rsp, err := c.APIFirewallVirtualIPDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPDeleteResponse(rsp)
}

// APIFirewallVirtualIPReadWithResponse request returning *APIFirewallVirtualIPReadResponse
func (c *ClientWithResponses) APIFirewallVirtualIPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPReadResponse, error) {
	rsp, err := c.APIFirewallVirtualIPRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPReadResponse(rsp)
}

// APIFirewallVirtualIPCreateWithBodyWithResponse request with arbitrary body returning *APIFirewallVirtualIPCreateResponse
func (c *ClientWithResponses) APIFirewallVirtualIPCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPCreateResponse, error) {
	rsp, err := c.APIFirewallVirtualIPCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPCreateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallVirtualIPCreateWithResponse(ctx context.Context, body APIFirewallVirtualIPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPCreateResponse, error) {
	rsp, err := c.APIFirewallVirtualIPCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPCreateResponse(rsp)
}

// APIFirewallVirtualIPUpdateWithBodyWithResponse request with arbitrary body returning *APIFirewallVirtualIPUpdateResponse
func (c *ClientWithResponses) APIFirewallVirtualIPUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPUpdateResponse, error) {
	rsp, err := c.APIFirewallVirtualIPUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIFirewallVirtualIPUpdateWithResponse(ctx context.Context, body APIFirewallVirtualIPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIFirewallVirtualIPUpdateResponse, error) {
	rsp, err := c.APIFirewallVirtualIPUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIFirewallVirtualIPUpdateResponse(rsp)
}

// APIInterfaceDeleteWithResponse request returning *APIInterfaceDeleteResponse
func (c *ClientWithResponses) APIInterfaceDeleteWithResponse(ctx context.Context, params *APIInterfaceDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceDeleteResponse, error) {
	rsp, err := c.APIInterfaceDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceDeleteResponse(rsp)
}

// APIInterfaceReadWithResponse request returning *APIInterfaceReadResponse
func (c *ClientWithResponses) APIInterfaceReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceReadResponse, error) {
	rsp, err := c.APIInterfaceRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceReadResponse(rsp)
}

// APIInterfaceCreateWithBodyWithResponse request with arbitrary body returning *APIInterfaceCreateResponse
func (c *ClientWithResponses) APIInterfaceCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceCreateResponse, error) {
	rsp, err := c.APIInterfaceCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceCreateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceCreateWithResponse(ctx context.Context, body APIInterfaceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceCreateResponse, error) {
	rsp, err := c.APIInterfaceCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceCreateResponse(rsp)
}

// APIInterfaceUpdateWithBodyWithResponse request with arbitrary body returning *APIInterfaceUpdateResponse
func (c *ClientWithResponses) APIInterfaceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceUpdateResponse, error) {
	rsp, err := c.APIInterfaceUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceUpdateWithResponse(ctx context.Context, body APIInterfaceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceUpdateResponse, error) {
	rsp, err := c.APIInterfaceUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceUpdateResponse(rsp)
}

// APIInterfaceApplyReadWithResponse request returning *APIInterfaceApplyReadResponse
func (c *ClientWithResponses) APIInterfaceApplyReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceApplyReadResponse, error) {
	rsp, err := c.APIInterfaceApplyRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceApplyReadResponse(rsp)
}

// APIInterfaceApplyCreateWithBodyWithResponse request with arbitrary body returning *APIInterfaceApplyCreateResponse
func (c *ClientWithResponses) APIInterfaceApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceApplyCreateResponse, error) {
	rsp, err := c.APIInterfaceApplyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceApplyCreateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceApplyCreateWithResponse(ctx context.Context, body APIInterfaceApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceApplyCreateResponse, error) {
	rsp, err := c.APIInterfaceApplyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceApplyCreateResponse(rsp)
}

// APIInterfaceAvailableReadWithResponse request returning *APIInterfaceAvailableReadResponse
func (c *ClientWithResponses) APIInterfaceAvailableReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceAvailableReadResponse, error) {
	rsp, err := c.APIInterfaceAvailableRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceAvailableReadResponse(rsp)
}

// APIInterfaceBridgeDeleteWithResponse request returning *APIInterfaceBridgeDeleteResponse
func (c *ClientWithResponses) APIInterfaceBridgeDeleteWithResponse(ctx context.Context, params *APIInterfaceBridgeDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeDeleteResponse, error) {
	rsp, err := c.APIInterfaceBridgeDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeDeleteResponse(rsp)
}

// APIInterfaceBridgeReadWithResponse request returning *APIInterfaceBridgeReadResponse
func (c *ClientWithResponses) APIInterfaceBridgeReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeReadResponse, error) {
	rsp, err := c.APIInterfaceBridgeRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeReadResponse(rsp)
}

// APIInterfaceBridgeCreateWithBodyWithResponse request with arbitrary body returning *APIInterfaceBridgeCreateResponse
func (c *ClientWithResponses) APIInterfaceBridgeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeCreateResponse, error) {
	rsp, err := c.APIInterfaceBridgeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeCreateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceBridgeCreateWithResponse(ctx context.Context, body APIInterfaceBridgeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeCreateResponse, error) {
	rsp, err := c.APIInterfaceBridgeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeCreateResponse(rsp)
}

// APIInterfaceBridgeUpdateWithBodyWithResponse request with arbitrary body returning *APIInterfaceBridgeUpdateResponse
func (c *ClientWithResponses) APIInterfaceBridgeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeUpdateResponse, error) {
	rsp, err := c.APIInterfaceBridgeUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceBridgeUpdateWithResponse(ctx context.Context, body APIInterfaceBridgeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceBridgeUpdateResponse, error) {
	rsp, err := c.APIInterfaceBridgeUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceBridgeUpdateResponse(rsp)
}

// APIInterfaceGroupDeleteWithResponse request returning *APIInterfaceGroupDeleteResponse
func (c *ClientWithResponses) APIInterfaceGroupDeleteWithResponse(ctx context.Context, params *APIInterfaceGroupDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceGroupDeleteResponse, error) {
	rsp, err := c.APIInterfaceGroupDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupDeleteResponse(rsp)
}

// APIInterfaceGroupReadWithResponse request returning *APIInterfaceGroupReadResponse
func (c *ClientWithResponses) APIInterfaceGroupReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceGroupReadResponse, error) {
	rsp, err := c.APIInterfaceGroupRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupReadResponse(rsp)
}

// APIInterfaceGroupCreateWithBodyWithResponse request with arbitrary body returning *APIInterfaceGroupCreateResponse
func (c *ClientWithResponses) APIInterfaceGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceGroupCreateResponse, error) {
	rsp, err := c.APIInterfaceGroupCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceGroupCreateWithResponse(ctx context.Context, body APIInterfaceGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceGroupCreateResponse, error) {
	rsp, err := c.APIInterfaceGroupCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupCreateResponse(rsp)
}

// APIInterfaceGroupUpdateWithBodyWithResponse request with arbitrary body returning *APIInterfaceGroupUpdateResponse
func (c *ClientWithResponses) APIInterfaceGroupUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceGroupUpdateResponse, error) {
	rsp, err := c.APIInterfaceGroupUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceGroupUpdateWithResponse(ctx context.Context, body APIInterfaceGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceGroupUpdateResponse, error) {
	rsp, err := c.APIInterfaceGroupUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceGroupUpdateResponse(rsp)
}

// APIInterfaceVLANDeleteWithResponse request returning *APIInterfaceVLANDeleteResponse
func (c *ClientWithResponses) APIInterfaceVLANDeleteWithResponse(ctx context.Context, params *APIInterfaceVLANDeleteParams, reqEditors ...RequestEditorFn) (*APIInterfaceVLANDeleteResponse, error) {
	rsp, err := c.APIInterfaceVLANDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANDeleteResponse(rsp)
}

// APIInterfaceVLANReadWithResponse request returning *APIInterfaceVLANReadResponse
func (c *ClientWithResponses) APIInterfaceVLANReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIInterfaceVLANReadResponse, error) {
	rsp, err := c.APIInterfaceVLANRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANReadResponse(rsp)
}

// APIInterfaceVLANCreateWithBodyWithResponse request with arbitrary body returning *APIInterfaceVLANCreateResponse
func (c *ClientWithResponses) APIInterfaceVLANCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceVLANCreateResponse, error) {
	rsp, err := c.APIInterfaceVLANCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANCreateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceVLANCreateWithResponse(ctx context.Context, body APIInterfaceVLANCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceVLANCreateResponse, error) {
	rsp, err := c.APIInterfaceVLANCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANCreateResponse(rsp)
}

// APIInterfaceVLANUpdateWithBodyWithResponse request with arbitrary body returning *APIInterfaceVLANUpdateResponse
func (c *ClientWithResponses) APIInterfaceVLANUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIInterfaceVLANUpdateResponse, error) {
	rsp, err := c.APIInterfaceVLANUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIInterfaceVLANUpdateWithResponse(ctx context.Context, body APIInterfaceVLANUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIInterfaceVLANUpdateResponse, error) {
	rsp, err := c.APIInterfaceVLANUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIInterfaceVLANUpdateResponse(rsp)
}

// APIRoutingApplyCreateWithResponse request returning *APIRoutingApplyCreateResponse
func (c *ClientWithResponses) APIRoutingApplyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingApplyCreateResponse, error) {
	rsp, err := c.APIRoutingApplyCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingApplyCreateResponse(rsp)
}

// APIRoutingGatewayDeleteWithResponse request returning *APIRoutingGatewayDeleteResponse
func (c *ClientWithResponses) APIRoutingGatewayDeleteWithResponse(ctx context.Context, params *APIRoutingGatewayDeleteParams, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDeleteResponse, error) {
	rsp, err := c.APIRoutingGatewayDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayDeleteResponse(rsp)
}

// APIRoutingGatewayReadWithResponse request returning *APIRoutingGatewayReadResponse
func (c *ClientWithResponses) APIRoutingGatewayReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingGatewayReadResponse, error) {
	rsp, err := c.APIRoutingGatewayRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayReadResponse(rsp)
}

// APIRoutingGatewayCreateWithBodyWithResponse request with arbitrary body returning *APIRoutingGatewayCreateResponse
func (c *ClientWithResponses) APIRoutingGatewayCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayCreateResponse, error) {
	rsp, err := c.APIRoutingGatewayCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayCreateResponse(rsp)
}

func (c *ClientWithResponses) APIRoutingGatewayCreateWithResponse(ctx context.Context, body APIRoutingGatewayCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayCreateResponse, error) {
	rsp, err := c.APIRoutingGatewayCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayCreateResponse(rsp)
}

// APIRoutingGatewayUpdateWithBodyWithResponse request with arbitrary body returning *APIRoutingGatewayUpdateResponse
func (c *ClientWithResponses) APIRoutingGatewayUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayUpdateResponse, error) {
	rsp, err := c.APIRoutingGatewayUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIRoutingGatewayUpdateWithResponse(ctx context.Context, body APIRoutingGatewayUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayUpdateResponse, error) {
	rsp, err := c.APIRoutingGatewayUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayUpdateResponse(rsp)
}

// APIRoutingGatewayDefaultUpdateWithBodyWithResponse request with arbitrary body returning *APIRoutingGatewayDefaultUpdateResponse
func (c *ClientWithResponses) APIRoutingGatewayDefaultUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDefaultUpdateResponse, error) {
	rsp, err := c.APIRoutingGatewayDefaultUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayDefaultUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIRoutingGatewayDefaultUpdateWithResponse(ctx context.Context, body APIRoutingGatewayDefaultUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDefaultUpdateResponse, error) {
	rsp, err := c.APIRoutingGatewayDefaultUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayDefaultUpdateResponse(rsp)
}

// APIRoutingGatewayDetailReadWithResponse request returning *APIRoutingGatewayDetailReadResponse
func (c *ClientWithResponses) APIRoutingGatewayDetailReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingGatewayDetailReadResponse, error) {
	rsp, err := c.APIRoutingGatewayDetailRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingGatewayDetailReadResponse(rsp)
}

// APIRoutingStaticRouteDeleteWithResponse request returning *APIRoutingStaticRouteDeleteResponse
func (c *ClientWithResponses) APIRoutingStaticRouteDeleteWithResponse(ctx context.Context, params *APIRoutingStaticRouteDeleteParams, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteDeleteResponse, error) {
	rsp, err := c.APIRoutingStaticRouteDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteDeleteResponse(rsp)
}

// APIRoutingStaticRouteReadWithResponse request returning *APIRoutingStaticRouteReadResponse
func (c *ClientWithResponses) APIRoutingStaticRouteReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteReadResponse, error) {
	rsp, err := c.APIRoutingStaticRouteRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteReadResponse(rsp)
}

// APIRoutingStaticRouteCreateWithBodyWithResponse request with arbitrary body returning *APIRoutingStaticRouteCreateResponse
func (c *ClientWithResponses) APIRoutingStaticRouteCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteCreateResponse, error) {
	rsp, err := c.APIRoutingStaticRouteCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteCreateResponse(rsp)
}

func (c *ClientWithResponses) APIRoutingStaticRouteCreateWithResponse(ctx context.Context, body APIRoutingStaticRouteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteCreateResponse, error) {
	rsp, err := c.APIRoutingStaticRouteCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteCreateResponse(rsp)
}

// APIRoutingStaticRouteUpdateWithBodyWithResponse request with arbitrary body returning *APIRoutingStaticRouteUpdateResponse
func (c *ClientWithResponses) APIRoutingStaticRouteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteUpdateResponse, error) {
	rsp, err := c.APIRoutingStaticRouteUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIRoutingStaticRouteUpdateWithResponse(ctx context.Context, body APIRoutingStaticRouteUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIRoutingStaticRouteUpdateResponse, error) {
	rsp, err := c.APIRoutingStaticRouteUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIRoutingStaticRouteUpdateResponse(rsp)
}

// APIServicesReadWithResponse request returning *APIServicesReadResponse
func (c *ClientWithResponses) APIServicesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesReadResponse, error) {
	rsp, err := c.APIServicesRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesReadResponse(rsp)
}

// APIServicesDDNSReadWithResponse request returning *APIServicesDDNSReadResponse
func (c *ClientWithResponses) APIServicesDDNSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDDNSReadResponse, error) {
	rsp, err := c.APIServicesDDNSRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDDNSReadResponse(rsp)
}

// APIServicesDHCPdReadWithResponse request returning *APIServicesDHCPdReadResponse
func (c *ClientWithResponses) APIServicesDHCPdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdReadResponse, error) {
	rsp, err := c.APIServicesDHCPdRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdReadResponse(rsp)
}

// APIServicesDHCPdUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesDHCPdUpdateResponse
func (c *ClientWithResponses) APIServicesDHCPdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdUpdateResponse, error) {
	rsp, err := c.APIServicesDHCPdUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDHCPdUpdateWithResponse(ctx context.Context, body APIServicesDHCPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdUpdateResponse, error) {
	rsp, err := c.APIServicesDHCPdUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdUpdateResponse(rsp)
}

// APIServicesDHCPdLeaseReadWithResponse request returning *APIServicesDHCPdLeaseReadResponse
func (c *ClientWithResponses) APIServicesDHCPdLeaseReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdLeaseReadResponse, error) {
	rsp, err := c.APIServicesDHCPdLeaseRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdLeaseReadResponse(rsp)
}

// APIServicesDHCPdOptionsCreateWithBodyWithResponse request with arbitrary body returning *APIServicesDHCPdOptionsCreateResponse
func (c *ClientWithResponses) APIServicesDHCPdOptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdOptionsCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdOptionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdOptionsCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDHCPdOptionsCreateWithResponse(ctx context.Context, body APIServicesDHCPdOptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdOptionsCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdOptionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdOptionsCreateResponse(rsp)
}

// APIServicesDHCPdRestartCreateWithResponse request returning *APIServicesDHCPdRestartCreateResponse
func (c *ClientWithResponses) APIServicesDHCPdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdRestartCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdRestartCreateResponse(rsp)
}

// APIServicesDHCPdStartCreateWithResponse request returning *APIServicesDHCPdStartCreateResponse
func (c *ClientWithResponses) APIServicesDHCPdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStartCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStartCreateResponse(rsp)
}

// APIServicesDHCPdStaticMappingDeleteWithResponse request returning *APIServicesDHCPdStaticMappingDeleteResponse
func (c *ClientWithResponses) APIServicesDHCPdStaticMappingDeleteWithResponse(ctx context.Context, params *APIServicesDHCPdStaticMappingDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingDeleteResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingDeleteResponse(rsp)
}

// APIServicesDHCPdStaticMappingReadWithResponse request returning *APIServicesDHCPdStaticMappingReadResponse
func (c *ClientWithResponses) APIServicesDHCPdStaticMappingReadWithResponse(ctx context.Context, params *APIServicesDHCPdStaticMappingReadParams, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingReadResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingRead(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingReadResponse(rsp)
}

// APIServicesDHCPdStaticMappingCreateWithBodyWithResponse request with arbitrary body returning *APIServicesDHCPdStaticMappingCreateResponse
func (c *ClientWithResponses) APIServicesDHCPdStaticMappingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDHCPdStaticMappingCreateWithResponse(ctx context.Context, body APIServicesDHCPdStaticMappingCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingCreateResponse(rsp)
}

// APIServicesDHCPdStaticMappingUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesDHCPdStaticMappingUpdateResponse
func (c *ClientWithResponses) APIServicesDHCPdStaticMappingUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingUpdateResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDHCPdStaticMappingUpdateWithResponse(ctx context.Context, body APIServicesDHCPdStaticMappingUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStaticMappingUpdateResponse, error) {
	rsp, err := c.APIServicesDHCPdStaticMappingUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStaticMappingUpdateResponse(rsp)
}

// APIServicesDHCPdStopCreateWithResponse request returning *APIServicesDHCPdStopCreateResponse
func (c *ClientWithResponses) APIServicesDHCPdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDHCPdStopCreateResponse, error) {
	rsp, err := c.APIServicesDHCPdStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDHCPdStopCreateResponse(rsp)
}

// APIServicesDnsmasqReadWithResponse request returning *APIServicesDnsmasqReadResponse
func (c *ClientWithResponses) APIServicesDnsmasqReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqReadResponse, error) {
	rsp, err := c.APIServicesDnsmasqRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqReadResponse(rsp)
}

// APIServicesDnsmasqApplyCreateWithResponse request returning *APIServicesDnsmasqApplyCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqApplyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqApplyCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqApplyCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqApplyCreateResponse(rsp)
}

// APIServicesDnsmasqHostOverrideDeleteWithResponse request returning *APIServicesDnsmasqHostOverrideDeleteResponse
func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideDeleteWithResponse(ctx context.Context, params *APIServicesDnsmasqHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideDeleteResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideDeleteResponse(rsp)
}

// APIServicesDnsmasqHostOverrideReadWithResponse request returning *APIServicesDnsmasqHostOverrideReadResponse
func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideReadResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideReadResponse(rsp)
}

// APIServicesDnsmasqHostOverrideCreateWithBodyWithResponse request with arbitrary body returning *APIServicesDnsmasqHostOverrideCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideCreateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideCreateResponse(rsp)
}

// APIServicesDnsmasqHostOverrideUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesDnsmasqHostOverrideUpdateResponse
func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideUpdateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideUpdateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideUpdateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideUpdateResponse(rsp)
}

// APIServicesDnsmasqHostOverrideAliasCreateWithBodyWithResponse request with arbitrary body returning *APIServicesDnsmasqHostOverrideAliasCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideAliasCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideAliasCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideAliasCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesDnsmasqHostOverrideAliasCreateWithResponse(ctx context.Context, body APIServicesDnsmasqHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqHostOverrideAliasCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqHostOverrideAliasCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqHostOverrideAliasCreateResponse(rsp)
}

// APIServicesDnsmasqRestartCreateWithResponse request returning *APIServicesDnsmasqRestartCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqRestartCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqRestartCreateResponse(rsp)
}

// APIServicesDnsmasqStartCreateWithResponse request returning *APIServicesDnsmasqStartCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqStartCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqStartCreateResponse(rsp)
}

// APIServicesDnsmasqStopCreateWithResponse request returning *APIServicesDnsmasqStopCreateResponse
func (c *ClientWithResponses) APIServicesDnsmasqStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDnsmasqStopCreateResponse, error) {
	rsp, err := c.APIServicesDnsmasqStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDnsmasqStopCreateResponse(rsp)
}

// APIServicesDpingerRestartCreateWithResponse request returning *APIServicesDpingerRestartCreateResponse
func (c *ClientWithResponses) APIServicesDpingerRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerRestartCreateResponse, error) {
	rsp, err := c.APIServicesDpingerRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDpingerRestartCreateResponse(rsp)
}

// APIServicesDpingerStartCreateWithResponse request returning *APIServicesDpingerStartCreateResponse
func (c *ClientWithResponses) APIServicesDpingerStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerStartCreateResponse, error) {
	rsp, err := c.APIServicesDpingerStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDpingerStartCreateResponse(rsp)
}

// APIServicesDpingerStopCreateWithResponse request returning *APIServicesDpingerStopCreateResponse
func (c *ClientWithResponses) APIServicesDpingerStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesDpingerStopCreateResponse, error) {
	rsp, err := c.APIServicesDpingerStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesDpingerStopCreateResponse(rsp)
}

// APIServicesIPsecApplyCreateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecApplyCreateResponse
func (c *ClientWithResponses) APIServicesIPsecApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecApplyCreateResponse, error) {
	rsp, err := c.APIServicesIPsecApplyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecApplyCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecApplyCreateWithResponse(ctx context.Context, body APIServicesIPsecApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecApplyCreateResponse, error) {
	rsp, err := c.APIServicesIPsecApplyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecApplyCreateResponse(rsp)
}

// APIServicesIPsecPhase1DeleteWithResponse request returning *APIServicesIPsecPhase1DeleteResponse
func (c *ClientWithResponses) APIServicesIPsecPhase1DeleteWithResponse(ctx context.Context, params *APIServicesIPsecPhase1DeleteParams, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1DeleteResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1Delete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1DeleteResponse(rsp)
}

// APIServicesIPsecPhase1ReadWithResponse request returning *APIServicesIPsecPhase1ReadResponse
func (c *ClientWithResponses) APIServicesIPsecPhase1ReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1ReadResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1Read(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1ReadResponse(rsp)
}

// APIServicesIPsecPhase1CreateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecPhase1CreateResponse
func (c *ClientWithResponses) APIServicesIPsecPhase1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1CreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1CreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecPhase1CreateWithResponse(ctx context.Context, body APIServicesIPsecPhase1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1CreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1CreateResponse(rsp)
}

// APIServicesIPsecPhase1UpdateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecPhase1UpdateResponse
func (c *ClientWithResponses) APIServicesIPsecPhase1UpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1UpdateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1UpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1UpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecPhase1UpdateWithResponse(ctx context.Context, body APIServicesIPsecPhase1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1UpdateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1Update(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1UpdateResponse(rsp)
}

// APIServicesIPsecPhase1EncryptionCreateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecPhase1EncryptionCreateResponse
func (c *ClientWithResponses) APIServicesIPsecPhase1EncryptionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1EncryptionCreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1EncryptionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1EncryptionCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecPhase1EncryptionCreateWithResponse(ctx context.Context, body APIServicesIPsecPhase1EncryptionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase1EncryptionCreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase1EncryptionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase1EncryptionCreateResponse(rsp)
}

// APIServicesIPsecPhase2DeleteWithResponse request returning *APIServicesIPsecPhase2DeleteResponse
func (c *ClientWithResponses) APIServicesIPsecPhase2DeleteWithResponse(ctx context.Context, params *APIServicesIPsecPhase2DeleteParams, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2DeleteResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2Delete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2DeleteResponse(rsp)
}

// APIServicesIPsecPhase2ReadWithResponse request returning *APIServicesIPsecPhase2ReadResponse
func (c *ClientWithResponses) APIServicesIPsecPhase2ReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2ReadResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2Read(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2ReadResponse(rsp)
}

// APIServicesIPsecPhase2CreateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecPhase2CreateResponse
func (c *ClientWithResponses) APIServicesIPsecPhase2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2CreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2CreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecPhase2CreateWithResponse(ctx context.Context, body APIServicesIPsecPhase2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2CreateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2CreateResponse(rsp)
}

// APIServicesIPsecPhase2UpdateWithBodyWithResponse request with arbitrary body returning *APIServicesIPsecPhase2UpdateResponse
func (c *ClientWithResponses) APIServicesIPsecPhase2UpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2UpdateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2UpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2UpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesIPsecPhase2UpdateWithResponse(ctx context.Context, body APIServicesIPsecPhase2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesIPsecPhase2UpdateResponse, error) {
	rsp, err := c.APIServicesIPsecPhase2Update(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesIPsecPhase2UpdateResponse(rsp)
}

// APIServicesNTPdReadWithResponse request returning *APIServicesNTPdReadResponse
func (c *ClientWithResponses) APIServicesNTPdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdReadResponse, error) {
	rsp, err := c.APIServicesNTPdRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdReadResponse(rsp)
}

// APIServicesNTPdUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesNTPdUpdateResponse
func (c *ClientWithResponses) APIServicesNTPdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesNTPdUpdateResponse, error) {
	rsp, err := c.APIServicesNTPdUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesNTPdUpdateWithResponse(ctx context.Context, body APIServicesNTPdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesNTPdUpdateResponse, error) {
	rsp, err := c.APIServicesNTPdUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdUpdateResponse(rsp)
}

// APIServicesNTPdRestartCreateWithResponse request returning *APIServicesNTPdRestartCreateResponse
func (c *ClientWithResponses) APIServicesNTPdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdRestartCreateResponse, error) {
	rsp, err := c.APIServicesNTPdRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdRestartCreateResponse(rsp)
}

// APIServicesNTPdStartCreateWithResponse request returning *APIServicesNTPdStartCreateResponse
func (c *ClientWithResponses) APIServicesNTPdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdStartCreateResponse, error) {
	rsp, err := c.APIServicesNTPdStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdStartCreateResponse(rsp)
}

// APIServicesNTPdStopCreateWithResponse request returning *APIServicesNTPdStopCreateResponse
func (c *ClientWithResponses) APIServicesNTPdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesNTPdStopCreateResponse, error) {
	rsp, err := c.APIServicesNTPdStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdStopCreateResponse(rsp)
}

// APIServicesNTPdTimeServerDeleteWithResponse request returning *APIServicesNTPdTimeServerDeleteResponse
func (c *ClientWithResponses) APIServicesNTPdTimeServerDeleteWithResponse(ctx context.Context, params *APIServicesNTPdTimeServerDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerDeleteResponse, error) {
	rsp, err := c.APIServicesNTPdTimeServerDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdTimeServerDeleteResponse(rsp)
}

// APIServicesNTPdTimeServerCreateWithBodyWithResponse request with arbitrary body returning *APIServicesNTPdTimeServerCreateResponse
func (c *ClientWithResponses) APIServicesNTPdTimeServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerCreateResponse, error) {
	rsp, err := c.APIServicesNTPdTimeServerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdTimeServerCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesNTPdTimeServerCreateWithResponse(ctx context.Context, body APIServicesNTPdTimeServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesNTPdTimeServerCreateResponse, error) {
	rsp, err := c.APIServicesNTPdTimeServerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesNTPdTimeServerCreateResponse(rsp)
}

// APIServicesOpenVPNClientReadWithResponse request returning *APIServicesOpenVPNClientReadResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientReadResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientReadResponse(rsp)
}

// APIServicesOpenVPNClientCreateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNClientCreateResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNClientCreateWithResponse(ctx context.Context, body APIServicesOpenVPNClientCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientCreateResponse(rsp)
}

// APIServicesOpenVPNClientUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNClientUpdateResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientUpdateWithBodyWithResponse(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNClientUpdateWithResponse(ctx context.Context, params *APIServicesOpenVPNClientUpdateParams, body APIServicesOpenVPNClientUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientUpdateResponse(rsp)
}

// APIServicesOpenVPNClientSpecificOverridesDeleteWithResponse request returning *APIServicesOpenVPNClientSpecificOverridesDeleteResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesDeleteWithResponse(ctx context.Context, params *APIServicesOpenVPNClientSpecificOverridesDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesDeleteResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesDeleteResponse(rsp)
}

// APIServicesOpenVPNClientSpecificOverridesReadWithResponse request returning *APIServicesOpenVPNClientSpecificOverridesReadResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesReadResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesReadResponse(rsp)
}

// APIServicesOpenVPNClientSpecificOverridesCreateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNClientSpecificOverridesCreateResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesCreateWithResponse(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesCreateResponse(rsp)
}

// APIServicesOpenVPNClientSpecificOverridesUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNClientSpecificOverridesUpdateResponse
func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNClientSpecificOverridesUpdateWithResponse(ctx context.Context, body APIServicesOpenVPNClientSpecificOverridesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNClientSpecificOverridesUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNClientSpecificOverridesUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNClientSpecificOverridesUpdateResponse(rsp)
}

// APIServicesOpenVPNServerReadWithResponse request returning *APIServicesOpenVPNServerReadResponse
func (c *ClientWithResponses) APIServicesOpenVPNServerReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerReadResponse, error) {
	rsp, err := c.APIServicesOpenVPNServerRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNServerReadResponse(rsp)
}

// APIServicesOpenVPNServerCreateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNServerCreateResponse
func (c *ClientWithResponses) APIServicesOpenVPNServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNServerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNServerCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNServerCreateWithResponse(ctx context.Context, body APIServicesOpenVPNServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerCreateResponse, error) {
	rsp, err := c.APIServicesOpenVPNServerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNServerCreateResponse(rsp)
}

// APIServicesOpenVPNServerUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesOpenVPNServerUpdateResponse
func (c *ClientWithResponses) APIServicesOpenVPNServerUpdateWithBodyWithResponse(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNServerUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNServerUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesOpenVPNServerUpdateWithResponse(ctx context.Context, params *APIServicesOpenVPNServerUpdateParams, body APIServicesOpenVPNServerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesOpenVPNServerUpdateResponse, error) {
	rsp, err := c.APIServicesOpenVPNServerUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesOpenVPNServerUpdateResponse(rsp)
}

// APIServicesRestartCreateWithBodyWithResponse request with arbitrary body returning *APIServicesRestartCreateResponse
func (c *ClientWithResponses) APIServicesRestartCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesRestartCreateResponse, error) {
	rsp, err := c.APIServicesRestartCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesRestartCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesRestartCreateWithResponse(ctx context.Context, body APIServicesRestartCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesRestartCreateResponse, error) {
	rsp, err := c.APIServicesRestartCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesRestartCreateResponse(rsp)
}

// APIServicesServiceWatchdogReadWithResponse request returning *APIServicesServiceWatchdogReadResponse
func (c *ClientWithResponses) APIServicesServiceWatchdogReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogReadResponse, error) {
	rsp, err := c.APIServicesServiceWatchdogRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesServiceWatchdogReadResponse(rsp)
}

// APIServicesServiceWatchdogUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesServiceWatchdogUpdateResponse
func (c *ClientWithResponses) APIServicesServiceWatchdogUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogUpdateResponse, error) {
	rsp, err := c.APIServicesServiceWatchdogUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesServiceWatchdogUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesServiceWatchdogUpdateWithResponse(ctx context.Context, body APIServicesServiceWatchdogUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesServiceWatchdogUpdateResponse, error) {
	rsp, err := c.APIServicesServiceWatchdogUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesServiceWatchdogUpdateResponse(rsp)
}

// APIServicesSSHdReadWithResponse request returning *APIServicesSSHdReadResponse
func (c *ClientWithResponses) APIServicesSSHdReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdReadResponse, error) {
	rsp, err := c.APIServicesSSHdRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdReadResponse(rsp)
}

// APIServicesSSHdUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesSSHdUpdateResponse
func (c *ClientWithResponses) APIServicesSSHdUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesSSHdUpdateResponse, error) {
	rsp, err := c.APIServicesSSHdUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesSSHdUpdateWithResponse(ctx context.Context, body APIServicesSSHdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesSSHdUpdateResponse, error) {
	rsp, err := c.APIServicesSSHdUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdUpdateResponse(rsp)
}

// APIServicesSSHdRestartCreateWithResponse request returning *APIServicesSSHdRestartCreateResponse
func (c *ClientWithResponses) APIServicesSSHdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdRestartCreateResponse, error) {
	rsp, err := c.APIServicesSSHdRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdRestartCreateResponse(rsp)
}

// APIServicesSSHdStartCreateWithResponse request returning *APIServicesSSHdStartCreateResponse
func (c *ClientWithResponses) APIServicesSSHdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdStartCreateResponse, error) {
	rsp, err := c.APIServicesSSHdStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdStartCreateResponse(rsp)
}

// APIServicesSSHdStopCreateWithResponse request returning *APIServicesSSHdStopCreateResponse
func (c *ClientWithResponses) APIServicesSSHdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSSHdStopCreateResponse, error) {
	rsp, err := c.APIServicesSSHdStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSSHdStopCreateResponse(rsp)
}

// APIServicesStartCreateWithResponse request returning *APIServicesStartCreateResponse
func (c *ClientWithResponses) APIServicesStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesStartCreateResponse, error) {
	rsp, err := c.APIServicesStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesStartCreateResponse(rsp)
}

// APIServicesStopCreateWithBodyWithResponse request with arbitrary body returning *APIServicesStopCreateResponse
func (c *ClientWithResponses) APIServicesStopCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesStopCreateResponse, error) {
	rsp, err := c.APIServicesStopCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesStopCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesStopCreateWithResponse(ctx context.Context, body APIServicesStopCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesStopCreateResponse, error) {
	rsp, err := c.APIServicesStopCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesStopCreateResponse(rsp)
}

// APIServicesSyslogdRestartCreateWithResponse request returning *APIServicesSyslogdRestartCreateResponse
func (c *ClientWithResponses) APIServicesSyslogdRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdRestartCreateResponse, error) {
	rsp, err := c.APIServicesSyslogdRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSyslogdRestartCreateResponse(rsp)
}

// APIServicesSyslogdStartCreateWithResponse request returning *APIServicesSyslogdStartCreateResponse
func (c *ClientWithResponses) APIServicesSyslogdStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdStartCreateResponse, error) {
	rsp, err := c.APIServicesSyslogdStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSyslogdStartCreateResponse(rsp)
}

// APIServicesSyslogdStopCreateWithResponse request returning *APIServicesSyslogdStopCreateResponse
func (c *ClientWithResponses) APIServicesSyslogdStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesSyslogdStopCreateResponse, error) {
	rsp, err := c.APIServicesSyslogdStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesSyslogdStopCreateResponse(rsp)
}

// APIServicesUnboundReadWithResponse request returning *APIServicesUnboundReadResponse
func (c *ClientWithResponses) APIServicesUnboundReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundReadResponse, error) {
	rsp, err := c.APIServicesUnboundRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundReadResponse(rsp)
}

// APIServicesUnboundAccessListDeleteWithResponse request returning *APIServicesUnboundAccessListDeleteResponse
func (c *ClientWithResponses) APIServicesUnboundAccessListDeleteWithResponse(ctx context.Context, params *APIServicesUnboundAccessListDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListDeleteResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListDeleteResponse(rsp)
}

// APIServicesUnboundAccessListReadWithResponse request returning *APIServicesUnboundAccessListReadResponse
func (c *ClientWithResponses) APIServicesUnboundAccessListReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListReadResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListReadResponse(rsp)
}

// APIServicesUnboundAccessListCreateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundAccessListCreateResponse
func (c *ClientWithResponses) APIServicesUnboundAccessListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListCreateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundAccessListCreateWithResponse(ctx context.Context, body APIServicesUnboundAccessListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListCreateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListCreateResponse(rsp)
}

// APIServicesUnboundAccessListUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundAccessListUpdateResponse
func (c *ClientWithResponses) APIServicesUnboundAccessListUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundAccessListUpdateWithResponse(ctx context.Context, body APIServicesUnboundAccessListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListUpdateResponse(rsp)
}

// APIServicesUnboundAccessListRowCreateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundAccessListRowCreateResponse
func (c *ClientWithResponses) APIServicesUnboundAccessListRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListRowCreateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListRowCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundAccessListRowCreateWithResponse(ctx context.Context, body APIServicesUnboundAccessListRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundAccessListRowCreateResponse, error) {
	rsp, err := c.APIServicesUnboundAccessListRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundAccessListRowCreateResponse(rsp)
}

// APIServicesUnboundApplyReadWithResponse request returning *APIServicesUnboundApplyReadResponse
func (c *ClientWithResponses) APIServicesUnboundApplyReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyReadResponse, error) {
	rsp, err := c.APIServicesUnboundApplyRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundApplyReadResponse(rsp)
}

// APIServicesUnboundApplyCreateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundApplyCreateResponse
func (c *ClientWithResponses) APIServicesUnboundApplyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyCreateResponse, error) {
	rsp, err := c.APIServicesUnboundApplyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundApplyCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundApplyCreateWithResponse(ctx context.Context, body APIServicesUnboundApplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundApplyCreateResponse, error) {
	rsp, err := c.APIServicesUnboundApplyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundApplyCreateResponse(rsp)
}

// APIServicesUnboundHostOverrideDeleteWithResponse request returning *APIServicesUnboundHostOverrideDeleteResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideDeleteWithResponse(ctx context.Context, params *APIServicesUnboundHostOverrideDeleteParams, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideDeleteResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideDeleteResponse(rsp)
}

// APIServicesUnboundHostOverrideReadWithResponse request returning *APIServicesUnboundHostOverrideReadResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideReadResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideReadResponse(rsp)
}

// APIServicesUnboundHostOverrideCreateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundHostOverrideCreateResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideCreateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundHostOverrideCreateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideCreateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideCreateResponse(rsp)
}

// APIServicesUnboundHostOverrideUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundHostOverrideUpdateResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundHostOverrideUpdateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideUpdateResponse(rsp)
}

// APIServicesUnboundHostOverrideAliasCreateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundHostOverrideAliasCreateResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideAliasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideAliasCreateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideAliasCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideAliasCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundHostOverrideAliasCreateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideAliasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideAliasCreateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideAliasCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideAliasCreateResponse(rsp)
}

// APIServicesUnboundHostOverrideFlushDeleteWithResponse request returning *APIServicesUnboundHostOverrideFlushDeleteResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideFlushDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushDeleteResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideFlushDelete(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideFlushDeleteResponse(rsp)
}

// APIServicesUnboundHostOverrideFlushUpdateWithBodyWithResponse request with arbitrary body returning *APIServicesUnboundHostOverrideFlushUpdateResponse
func (c *ClientWithResponses) APIServicesUnboundHostOverrideFlushUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideFlushUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideFlushUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesUnboundHostOverrideFlushUpdateWithResponse(ctx context.Context, body APIServicesUnboundHostOverrideFlushUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesUnboundHostOverrideFlushUpdateResponse, error) {
	rsp, err := c.APIServicesUnboundHostOverrideFlushUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundHostOverrideFlushUpdateResponse(rsp)
}

// APIServicesUnboundRestartCreateWithResponse request returning *APIServicesUnboundRestartCreateResponse
func (c *ClientWithResponses) APIServicesUnboundRestartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundRestartCreateResponse, error) {
	rsp, err := c.APIServicesUnboundRestartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundRestartCreateResponse(rsp)
}

// APIServicesUnboundStartCreateWithResponse request returning *APIServicesUnboundStartCreateResponse
func (c *ClientWithResponses) APIServicesUnboundStartCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundStartCreateResponse, error) {
	rsp, err := c.APIServicesUnboundStartCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundStartCreateResponse(rsp)
}

// APIServicesUnboundStopCreateWithResponse request returning *APIServicesUnboundStopCreateResponse
func (c *ClientWithResponses) APIServicesUnboundStopCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIServicesUnboundStopCreateResponse, error) {
	rsp, err := c.APIServicesUnboundStopCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesUnboundStopCreateResponse(rsp)
}

// APIServicesWOLSendCreateWithBodyWithResponse request with arbitrary body returning *APIServicesWOLSendCreateResponse
func (c *ClientWithResponses) APIServicesWOLSendCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIServicesWOLSendCreateResponse, error) {
	rsp, err := c.APIServicesWOLSendCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesWOLSendCreateResponse(rsp)
}

func (c *ClientWithResponses) APIServicesWOLSendCreateWithResponse(ctx context.Context, body APIServicesWOLSendCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIServicesWOLSendCreateResponse, error) {
	rsp, err := c.APIServicesWOLSendCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIServicesWOLSendCreateResponse(rsp)
}

// APIStatusCARPReadWithResponse request returning *APIStatusCARPReadResponse
func (c *ClientWithResponses) APIStatusCARPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusCARPReadResponse, error) {
	rsp, err := c.APIStatusCARPRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusCARPReadResponse(rsp)
}

// APIStatusCARPUpdateWithBodyWithResponse request with arbitrary body returning *APIStatusCARPUpdateResponse
func (c *ClientWithResponses) APIStatusCARPUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIStatusCARPUpdateResponse, error) {
	rsp, err := c.APIStatusCARPUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusCARPUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIStatusCARPUpdateWithResponse(ctx context.Context, body APIStatusCARPUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIStatusCARPUpdateResponse, error) {
	rsp, err := c.APIStatusCARPUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusCARPUpdateResponse(rsp)
}

// APIStatusGatewayReadWithResponse request returning *APIStatusGatewayReadResponse
func (c *ClientWithResponses) APIStatusGatewayReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusGatewayReadResponse, error) {
	rsp, err := c.APIStatusGatewayRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusGatewayReadResponse(rsp)
}

// APIStatusInterfaceReadWithResponse request returning *APIStatusInterfaceReadResponse
func (c *ClientWithResponses) APIStatusInterfaceReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusInterfaceReadResponse, error) {
	rsp, err := c.APIStatusInterfaceRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusInterfaceReadResponse(rsp)
}

// APIStatusIPsecReadWithResponse request returning *APIStatusIPsecReadResponse
func (c *ClientWithResponses) APIStatusIPsecReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusIPsecReadResponse, error) {
	rsp, err := c.APIStatusIPsecRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusIPsecReadResponse(rsp)
}

// APIStatusLogConfigHistoryReadWithResponse request returning *APIStatusLogConfigHistoryReadResponse
func (c *ClientWithResponses) APIStatusLogConfigHistoryReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogConfigHistoryReadResponse, error) {
	rsp, err := c.APIStatusLogConfigHistoryRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogConfigHistoryReadResponse(rsp)
}

// APIStatusLogDHCPReadWithResponse request returning *APIStatusLogDHCPReadResponse
func (c *ClientWithResponses) APIStatusLogDHCPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogDHCPReadResponse, error) {
	rsp, err := c.APIStatusLogDHCPRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogDHCPReadResponse(rsp)
}

// APIStatusLogFirewallReadWithResponse request returning *APIStatusLogFirewallReadResponse
func (c *ClientWithResponses) APIStatusLogFirewallReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogFirewallReadResponse, error) {
	rsp, err := c.APIStatusLogFirewallRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogFirewallReadResponse(rsp)
}

// APIStatusLogSettingsUpdateWithBodyWithResponse request with arbitrary body returning *APIStatusLogSettingsUpdateResponse
func (c *ClientWithResponses) APIStatusLogSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIStatusLogSettingsUpdateResponse, error) {
	rsp, err := c.APIStatusLogSettingsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIStatusLogSettingsUpdateWithResponse(ctx context.Context, body APIStatusLogSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIStatusLogSettingsUpdateResponse, error) {
	rsp, err := c.APIStatusLogSettingsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogSettingsUpdateResponse(rsp)
}

// APIStatusLogSystemReadWithResponse request returning *APIStatusLogSystemReadResponse
func (c *ClientWithResponses) APIStatusLogSystemReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusLogSystemReadResponse, error) {
	rsp, err := c.APIStatusLogSystemRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusLogSystemReadResponse(rsp)
}

// APIStatusOpenVPNReadWithResponse request returning *APIStatusOpenVPNReadResponse
func (c *ClientWithResponses) APIStatusOpenVPNReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusOpenVPNReadResponse, error) {
	rsp, err := c.APIStatusOpenVPNRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusOpenVPNReadResponse(rsp)
}

// APIStatusSystemReadWithResponse request returning *APIStatusSystemReadResponse
func (c *ClientWithResponses) APIStatusSystemReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIStatusSystemReadResponse, error) {
	rsp, err := c.APIStatusSystemRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIStatusSystemReadResponse(rsp)
}

// APISystemAPIReadWithResponse request returning *APISystemAPIReadResponse
func (c *ClientWithResponses) APISystemAPIReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIReadResponse, error) {
	rsp, err := c.APISystemAPIRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemAPIReadResponse(rsp)
}

// APISystemAPIUpdateWithBodyWithResponse request with arbitrary body returning *APISystemAPIUpdateResponse
func (c *ClientWithResponses) APISystemAPIUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemAPIUpdateResponse, error) {
	rsp, err := c.APISystemAPIUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemAPIUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemAPIUpdateWithResponse(ctx context.Context, body APISystemAPIUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemAPIUpdateResponse, error) {
	rsp, err := c.APISystemAPIUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemAPIUpdateResponse(rsp)
}

// APISystemAPIErrorReadWithResponse request returning *APISystemAPIErrorReadResponse
func (c *ClientWithResponses) APISystemAPIErrorReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIErrorReadResponse, error) {
	rsp, err := c.APISystemAPIErrorRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemAPIErrorReadResponse(rsp)
}

// APISystemAPIVersionReadWithResponse request returning *APISystemAPIVersionReadResponse
func (c *ClientWithResponses) APISystemAPIVersionReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemAPIVersionReadResponse, error) {
	rsp, err := c.APISystemAPIVersionRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemAPIVersionReadResponse(rsp)
}

// APISystemARPDeleteWithResponse request returning *APISystemARPDeleteResponse
func (c *ClientWithResponses) APISystemARPDeleteWithResponse(ctx context.Context, params *APISystemARPDeleteParams, reqEditors ...RequestEditorFn) (*APISystemARPDeleteResponse, error) {
	rsp, err := c.APISystemARPDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemARPDeleteResponse(rsp)
}

// APISystemARPReadWithResponse request returning *APISystemARPReadResponse
func (c *ClientWithResponses) APISystemARPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemARPReadResponse, error) {
	rsp, err := c.APISystemARPRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemARPReadResponse(rsp)
}

// APISystemCADeleteWithResponse request returning *APISystemCADeleteResponse
func (c *ClientWithResponses) APISystemCADeleteWithResponse(ctx context.Context, params *APISystemCADeleteParams, reqEditors ...RequestEditorFn) (*APISystemCADeleteResponse, error) {
	rsp, err := c.APISystemCADelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCADeleteResponse(rsp)
}

// APISystemCAReadWithResponse request returning *APISystemCAReadResponse
func (c *ClientWithResponses) APISystemCAReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCAReadResponse, error) {
	rsp, err := c.APISystemCARead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCAReadResponse(rsp)
}

// APISystemCACreateWithBodyWithResponse request with arbitrary body returning *APISystemCACreateResponse
func (c *ClientWithResponses) APISystemCACreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCACreateResponse, error) {
	rsp, err := c.APISystemCACreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCACreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemCACreateWithResponse(ctx context.Context, body APISystemCACreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCACreateResponse, error) {
	rsp, err := c.APISystemCACreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCACreateResponse(rsp)
}

// APISystemCertificateDeleteWithResponse request returning *APISystemCertificateDeleteResponse
func (c *ClientWithResponses) APISystemCertificateDeleteWithResponse(ctx context.Context, params *APISystemCertificateDeleteParams, reqEditors ...RequestEditorFn) (*APISystemCertificateDeleteResponse, error) {
	rsp, err := c.APISystemCertificateDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateDeleteResponse(rsp)
}

// APISystemCertificateReadWithResponse request returning *APISystemCertificateReadResponse
func (c *ClientWithResponses) APISystemCertificateReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCertificateReadResponse, error) {
	rsp, err := c.APISystemCertificateRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateReadResponse(rsp)
}

// APISystemCertificateCreateWithBodyWithResponse request with arbitrary body returning *APISystemCertificateCreateResponse
func (c *ClientWithResponses) APISystemCertificateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCertificateCreateResponse, error) {
	rsp, err := c.APISystemCertificateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateCreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemCertificateCreateWithResponse(ctx context.Context, body APISystemCertificateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCertificateCreateResponse, error) {
	rsp, err := c.APISystemCertificateCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateCreateResponse(rsp)
}

// APISystemCertificateUpdateWithBodyWithResponse request with arbitrary body returning *APISystemCertificateUpdateResponse
func (c *ClientWithResponses) APISystemCertificateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCertificateUpdateResponse, error) {
	rsp, err := c.APISystemCertificateUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemCertificateUpdateWithResponse(ctx context.Context, body APISystemCertificateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCertificateUpdateResponse, error) {
	rsp, err := c.APISystemCertificateUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCertificateUpdateResponse(rsp)
}

// APISystemConfigReadWithResponse request returning *APISystemConfigReadResponse
func (c *ClientWithResponses) APISystemConfigReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemConfigReadResponse, error) {
	rsp, err := c.APISystemConfigRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemConfigReadResponse(rsp)
}

// APISystemConfigUpdateWithBodyWithResponse request with arbitrary body returning *APISystemConfigUpdateResponse
func (c *ClientWithResponses) APISystemConfigUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemConfigUpdateResponse, error) {
	rsp, err := c.APISystemConfigUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemConfigUpdateResponse(rsp)
}

// APISystemConsoleUpdateWithBodyWithResponse request with arbitrary body returning *APISystemConsoleUpdateResponse
func (c *ClientWithResponses) APISystemConsoleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemConsoleUpdateResponse, error) {
	rsp, err := c.APISystemConsoleUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemConsoleUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemConsoleUpdateWithResponse(ctx context.Context, body APISystemConsoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemConsoleUpdateResponse, error) {
	rsp, err := c.APISystemConsoleUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemConsoleUpdateResponse(rsp)
}

// APISystemCRLDeleteWithResponse request returning *APISystemCRLDeleteResponse
func (c *ClientWithResponses) APISystemCRLDeleteWithResponse(ctx context.Context, params *APISystemCRLDeleteParams, reqEditors ...RequestEditorFn) (*APISystemCRLDeleteResponse, error) {
	rsp, err := c.APISystemCRLDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCRLDeleteResponse(rsp)
}

// APISystemCRLReadWithResponse request returning *APISystemCRLReadResponse
func (c *ClientWithResponses) APISystemCRLReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemCRLReadResponse, error) {
	rsp, err := c.APISystemCRLRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCRLReadResponse(rsp)
}

// APISystemCRLCreateWithBodyWithResponse request with arbitrary body returning *APISystemCRLCreateResponse
func (c *ClientWithResponses) APISystemCRLCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemCRLCreateResponse, error) {
	rsp, err := c.APISystemCRLCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCRLCreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemCRLCreateWithResponse(ctx context.Context, body APISystemCRLCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemCRLCreateResponse, error) {
	rsp, err := c.APISystemCRLCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemCRLCreateResponse(rsp)
}

// APISystemDNSReadWithResponse request returning *APISystemDNSReadResponse
func (c *ClientWithResponses) APISystemDNSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemDNSReadResponse, error) {
	rsp, err := c.APISystemDNSRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSReadResponse(rsp)
}

// APISystemDNSUpdateWithBodyWithResponse request with arbitrary body returning *APISystemDNSUpdateResponse
func (c *ClientWithResponses) APISystemDNSUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemDNSUpdateResponse, error) {
	rsp, err := c.APISystemDNSUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemDNSUpdateWithResponse(ctx context.Context, body APISystemDNSUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemDNSUpdateResponse, error) {
	rsp, err := c.APISystemDNSUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSUpdateResponse(rsp)
}

// APISystemDNSServerDeleteWithResponse request returning *APISystemDNSServerDeleteResponse
func (c *ClientWithResponses) APISystemDNSServerDeleteWithResponse(ctx context.Context, params *APISystemDNSServerDeleteParams, reqEditors ...RequestEditorFn) (*APISystemDNSServerDeleteResponse, error) {
	rsp, err := c.APISystemDNSServerDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSServerDeleteResponse(rsp)
}

// APISystemDNSServerCreateWithBodyWithResponse request with arbitrary body returning *APISystemDNSServerCreateResponse
func (c *ClientWithResponses) APISystemDNSServerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemDNSServerCreateResponse, error) {
	rsp, err := c.APISystemDNSServerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSServerCreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemDNSServerCreateWithResponse(ctx context.Context, body APISystemDNSServerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemDNSServerCreateResponse, error) {
	rsp, err := c.APISystemDNSServerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemDNSServerCreateResponse(rsp)
}

// APISystemHaltCreateWithResponse request returning *APISystemHaltCreateResponse
func (c *ClientWithResponses) APISystemHaltCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemHaltCreateResponse, error) {
	rsp, err := c.APISystemHaltCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemHaltCreateResponse(rsp)
}

// APISystemHostnameReadWithResponse request returning *APISystemHostnameReadResponse
func (c *ClientWithResponses) APISystemHostnameReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemHostnameReadResponse, error) {
	rsp, err := c.APISystemHostnameRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemHostnameReadResponse(rsp)
}

// APISystemHostnameUpdateWithBodyWithResponse request with arbitrary body returning *APISystemHostnameUpdateResponse
func (c *ClientWithResponses) APISystemHostnameUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemHostnameUpdateResponse, error) {
	rsp, err := c.APISystemHostnameUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemHostnameUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemHostnameUpdateWithResponse(ctx context.Context, body APISystemHostnameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemHostnameUpdateResponse, error) {
	rsp, err := c.APISystemHostnameUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemHostnameUpdateResponse(rsp)
}

// APISystemNotificationsEmailReadWithResponse request returning *APISystemNotificationsEmailReadResponse
func (c *ClientWithResponses) APISystemNotificationsEmailReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailReadResponse, error) {
	rsp, err := c.APISystemNotificationsEmailRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemNotificationsEmailReadResponse(rsp)
}

// APISystemNotificationsEmailUpdateWithBodyWithResponse request with arbitrary body returning *APISystemNotificationsEmailUpdateResponse
func (c *ClientWithResponses) APISystemNotificationsEmailUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailUpdateResponse, error) {
	rsp, err := c.APISystemNotificationsEmailUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemNotificationsEmailUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemNotificationsEmailUpdateWithResponse(ctx context.Context, body APISystemNotificationsEmailUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemNotificationsEmailUpdateResponse, error) {
	rsp, err := c.APISystemNotificationsEmailUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemNotificationsEmailUpdateResponse(rsp)
}

// APISystemPackageDeleteWithResponse request returning *APISystemPackageDeleteResponse
func (c *ClientWithResponses) APISystemPackageDeleteWithResponse(ctx context.Context, params *APISystemPackageDeleteParams, reqEditors ...RequestEditorFn) (*APISystemPackageDeleteResponse, error) {
	rsp, err := c.APISystemPackageDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemPackageDeleteResponse(rsp)
}

// APISystemPackageReadWithResponse request returning *APISystemPackageReadResponse
func (c *ClientWithResponses) APISystemPackageReadWithResponse(ctx context.Context, params *APISystemPackageReadParams, reqEditors ...RequestEditorFn) (*APISystemPackageReadResponse, error) {
	rsp, err := c.APISystemPackageRead(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemPackageReadResponse(rsp)
}

// APISystemPackageCreateWithBodyWithResponse request with arbitrary body returning *APISystemPackageCreateResponse
func (c *ClientWithResponses) APISystemPackageCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemPackageCreateResponse, error) {
	rsp, err := c.APISystemPackageCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemPackageCreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemPackageCreateWithResponse(ctx context.Context, body APISystemPackageCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemPackageCreateResponse, error) {
	rsp, err := c.APISystemPackageCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemPackageCreateResponse(rsp)
}

// APISystemRebootCreateWithResponse request returning *APISystemRebootCreateResponse
func (c *ClientWithResponses) APISystemRebootCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemRebootCreateResponse, error) {
	rsp, err := c.APISystemRebootCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemRebootCreateResponse(rsp)
}

// APISystemTableReadWithResponse request returning *APISystemTableReadResponse
func (c *ClientWithResponses) APISystemTableReadWithResponse(ctx context.Context, params *APISystemTableReadParams, reqEditors ...RequestEditorFn) (*APISystemTableReadResponse, error) {
	rsp, err := c.APISystemTableRead(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTableReadResponse(rsp)
}

// APISystemTunableDeleteWithResponse request returning *APISystemTunableDeleteResponse
func (c *ClientWithResponses) APISystemTunableDeleteWithResponse(ctx context.Context, params *APISystemTunableDeleteParams, reqEditors ...RequestEditorFn) (*APISystemTunableDeleteResponse, error) {
	rsp, err := c.APISystemTunableDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableDeleteResponse(rsp)
}

// APISystemTunableReadWithResponse request returning *APISystemTunableReadResponse
func (c *ClientWithResponses) APISystemTunableReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemTunableReadResponse, error) {
	rsp, err := c.APISystemTunableRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableReadResponse(rsp)
}

// APISystemTunableCreateWithBodyWithResponse request with arbitrary body returning *APISystemTunableCreateResponse
func (c *ClientWithResponses) APISystemTunableCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemTunableCreateResponse, error) {
	rsp, err := c.APISystemTunableCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableCreateResponse(rsp)
}

func (c *ClientWithResponses) APISystemTunableCreateWithResponse(ctx context.Context, body APISystemTunableCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemTunableCreateResponse, error) {
	rsp, err := c.APISystemTunableCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableCreateResponse(rsp)
}

// APISystemTunableUpdateWithBodyWithResponse request with arbitrary body returning *APISystemTunableUpdateResponse
func (c *ClientWithResponses) APISystemTunableUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APISystemTunableUpdateResponse, error) {
	rsp, err := c.APISystemTunableUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableUpdateResponse(rsp)
}

func (c *ClientWithResponses) APISystemTunableUpdateWithResponse(ctx context.Context, body APISystemTunableUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APISystemTunableUpdateResponse, error) {
	rsp, err := c.APISystemTunableUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemTunableUpdateResponse(rsp)
}

// APISystemVersionReadWithResponse request returning *APISystemVersionReadResponse
func (c *ClientWithResponses) APISystemVersionReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APISystemVersionReadResponse, error) {
	rsp, err := c.APISystemVersionRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemVersionReadResponse(rsp)
}

// APISystemVersionUpgradeReadWithResponse request returning *APISystemVersionUpgradeReadResponse
func (c *ClientWithResponses) APISystemVersionUpgradeReadWithResponse(ctx context.Context, params *APISystemVersionUpgradeReadParams, reqEditors ...RequestEditorFn) (*APISystemVersionUpgradeReadResponse, error) {
	rsp, err := c.APISystemVersionUpgradeRead(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPISystemVersionUpgradeReadResponse(rsp)
}

// APIUserDeleteWithResponse request returning *APIUserDeleteResponse
func (c *ClientWithResponses) APIUserDeleteWithResponse(ctx context.Context, params *APIUserDeleteParams, reqEditors ...RequestEditorFn) (*APIUserDeleteResponse, error) {
	rsp, err := c.APIUserDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserDeleteResponse(rsp)
}

// APIUserReadWithResponse request returning *APIUserReadResponse
func (c *ClientWithResponses) APIUserReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserReadResponse, error) {
	rsp, err := c.APIUserRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserReadResponse(rsp)
}

// APIUserCreateWithBodyWithResponse request with arbitrary body returning *APIUserCreateResponse
func (c *ClientWithResponses) APIUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserCreateResponse, error) {
	rsp, err := c.APIUserCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserCreateWithResponse(ctx context.Context, body APIUserCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserCreateResponse, error) {
	rsp, err := c.APIUserCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserCreateResponse(rsp)
}

// APIUserUpdateWithBodyWithResponse request with arbitrary body returning *APIUserUpdateResponse
func (c *ClientWithResponses) APIUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserUpdateResponse, error) {
	rsp, err := c.APIUserUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIUserUpdateWithResponse(ctx context.Context, body APIUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserUpdateResponse, error) {
	rsp, err := c.APIUserUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserUpdateResponse(rsp)
}

// APIUserAuthServerDeleteWithResponse request returning *APIUserAuthServerDeleteResponse
func (c *ClientWithResponses) APIUserAuthServerDeleteWithResponse(ctx context.Context, params *APIUserAuthServerDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerDeleteResponse, error) {
	rsp, err := c.APIUserAuthServerDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerDeleteResponse(rsp)
}

// APIUserAuthServerReadWithResponse request returning *APIUserAuthServerReadResponse
func (c *ClientWithResponses) APIUserAuthServerReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerReadResponse, error) {
	rsp, err := c.APIUserAuthServerRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerReadResponse(rsp)
}

// APIUserAuthServerLDAPDeleteWithResponse request returning *APIUserAuthServerLDAPDeleteResponse
func (c *ClientWithResponses) APIUserAuthServerLDAPDeleteWithResponse(ctx context.Context, params *APIUserAuthServerLDAPDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPDeleteResponse, error) {
	rsp, err := c.APIUserAuthServerLDAPDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerLDAPDeleteResponse(rsp)
}

// APIUserAuthServerLDAPReadWithResponse request returning *APIUserAuthServerLDAPReadResponse
func (c *ClientWithResponses) APIUserAuthServerLDAPReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPReadResponse, error) {
	rsp, err := c.APIUserAuthServerLDAPRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerLDAPReadResponse(rsp)
}

// APIUserAuthServerLDAPCreateWithBodyWithResponse request with arbitrary body returning *APIUserAuthServerLDAPCreateResponse
func (c *ClientWithResponses) APIUserAuthServerLDAPCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPCreateResponse, error) {
	rsp, err := c.APIUserAuthServerLDAPCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerLDAPCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserAuthServerLDAPCreateWithResponse(ctx context.Context, body APIUserAuthServerLDAPCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserAuthServerLDAPCreateResponse, error) {
	rsp, err := c.APIUserAuthServerLDAPCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerLDAPCreateResponse(rsp)
}

// APIUserAuthServerRADIUSDeleteWithResponse request returning *APIUserAuthServerRADIUSDeleteResponse
func (c *ClientWithResponses) APIUserAuthServerRADIUSDeleteWithResponse(ctx context.Context, params *APIUserAuthServerRADIUSDeleteParams, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSDeleteResponse, error) {
	rsp, err := c.APIUserAuthServerRADIUSDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerRADIUSDeleteResponse(rsp)
}

// APIUserAuthServerRADIUSReadWithResponse request returning *APIUserAuthServerRADIUSReadResponse
func (c *ClientWithResponses) APIUserAuthServerRADIUSReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSReadResponse, error) {
	rsp, err := c.APIUserAuthServerRADIUSRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerRADIUSReadResponse(rsp)
}

// APIUserAuthServerRADIUSCreateWithBodyWithResponse request with arbitrary body returning *APIUserAuthServerRADIUSCreateResponse
func (c *ClientWithResponses) APIUserAuthServerRADIUSCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSCreateResponse, error) {
	rsp, err := c.APIUserAuthServerRADIUSCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerRADIUSCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserAuthServerRADIUSCreateWithResponse(ctx context.Context, body APIUserAuthServerRADIUSCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserAuthServerRADIUSCreateResponse, error) {
	rsp, err := c.APIUserAuthServerRADIUSCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserAuthServerRADIUSCreateResponse(rsp)
}

// APIUserGroupDeleteWithResponse request returning *APIUserGroupDeleteResponse
func (c *ClientWithResponses) APIUserGroupDeleteWithResponse(ctx context.Context, params *APIUserGroupDeleteParams, reqEditors ...RequestEditorFn) (*APIUserGroupDeleteResponse, error) {
	rsp, err := c.APIUserGroupDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupDeleteResponse(rsp)
}

// APIUserGroupReadWithResponse request returning *APIUserGroupReadResponse
func (c *ClientWithResponses) APIUserGroupReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*APIUserGroupReadResponse, error) {
	rsp, err := c.APIUserGroupRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupReadResponse(rsp)
}

// APIUserGroupCreateWithBodyWithResponse request with arbitrary body returning *APIUserGroupCreateResponse
func (c *ClientWithResponses) APIUserGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupCreateResponse, error) {
	rsp, err := c.APIUserGroupCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserGroupCreateWithResponse(ctx context.Context, body APIUserGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupCreateResponse, error) {
	rsp, err := c.APIUserGroupCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupCreateResponse(rsp)
}

// APIUserGroupUpdateWithBodyWithResponse request with arbitrary body returning *APIUserGroupUpdateResponse
func (c *ClientWithResponses) APIUserGroupUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupUpdateResponse, error) {
	rsp, err := c.APIUserGroupUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) APIUserGroupUpdateWithResponse(ctx context.Context, body APIUserGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupUpdateResponse, error) {
	rsp, err := c.APIUserGroupUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupUpdateResponse(rsp)
}

// APIUserGroupMemberDeleteWithResponse request returning *APIUserGroupMemberDeleteResponse
func (c *ClientWithResponses) APIUserGroupMemberDeleteWithResponse(ctx context.Context, params *APIUserGroupMemberDeleteParams, reqEditors ...RequestEditorFn) (*APIUserGroupMemberDeleteResponse, error) {
	rsp, err := c.APIUserGroupMemberDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupMemberDeleteResponse(rsp)
}

// APIUserGroupMemberCreateWithBodyWithResponse request with arbitrary body returning *APIUserGroupMemberCreateResponse
func (c *ClientWithResponses) APIUserGroupMemberCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserGroupMemberCreateResponse, error) {
	rsp, err := c.APIUserGroupMemberCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupMemberCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserGroupMemberCreateWithResponse(ctx context.Context, body APIUserGroupMemberCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserGroupMemberCreateResponse, error) {
	rsp, err := c.APIUserGroupMemberCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserGroupMemberCreateResponse(rsp)
}

// APIUserPrivilegeDeleteWithResponse request returning *APIUserPrivilegeDeleteResponse
func (c *ClientWithResponses) APIUserPrivilegeDeleteWithResponse(ctx context.Context, params *APIUserPrivilegeDeleteParams, reqEditors ...RequestEditorFn) (*APIUserPrivilegeDeleteResponse, error) {
	rsp, err := c.APIUserPrivilegeDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserPrivilegeDeleteResponse(rsp)
}

// APIUserPrivilegeCreateWithBodyWithResponse request with arbitrary body returning *APIUserPrivilegeCreateResponse
func (c *ClientWithResponses) APIUserPrivilegeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*APIUserPrivilegeCreateResponse, error) {
	rsp, err := c.APIUserPrivilegeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserPrivilegeCreateResponse(rsp)
}

func (c *ClientWithResponses) APIUserPrivilegeCreateWithResponse(ctx context.Context, body APIUserPrivilegeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*APIUserPrivilegeCreateResponse, error) {
	rsp, err := c.APIUserPrivilegeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserPrivilegeCreateResponse(rsp)
}

// ParseAPIAccessTokenCreateResponse parses an HTTP response from a APIAccessTokenCreateWithResponse call
func ParseAPIAccessTokenCreateResponse(rsp *http.Response) (*APIAccessTokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIAccessTokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIDiagnosticsCommandPromptCreateResponse parses an HTTP response from a APIDiagnosticsCommandPromptCreateWithResponse call
func ParseAPIDiagnosticsCommandPromptCreateResponse(rsp *http.Response) (*APIDiagnosticsCommandPromptCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIDiagnosticsCommandPromptCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasDeleteResponse parses an HTTP response from a APIFirewallAliasDeleteWithResponse call
func ParseAPIFirewallAliasDeleteResponse(rsp *http.Response) (*APIFirewallAliasDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasReadResponse parses an HTTP response from a APIFirewallAliasReadWithResponse call
func ParseAPIFirewallAliasReadResponse(rsp *http.Response) (*APIFirewallAliasReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasCreateResponse parses an HTTP response from a APIFirewallAliasCreateWithResponse call
func ParseAPIFirewallAliasCreateResponse(rsp *http.Response) (*APIFirewallAliasCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasUpdateResponse parses an HTTP response from a APIFirewallAliasUpdateWithResponse call
func ParseAPIFirewallAliasUpdateResponse(rsp *http.Response) (*APIFirewallAliasUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasAdvancedReadResponse parses an HTTP response from a APIFirewallAliasAdvancedReadWithResponse call
func ParseAPIFirewallAliasAdvancedReadResponse(rsp *http.Response) (*APIFirewallAliasAdvancedReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasAdvancedReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasAdvancedUpdateResponse parses an HTTP response from a APIFirewallAliasAdvancedUpdateWithResponse call
func ParseAPIFirewallAliasAdvancedUpdateResponse(rsp *http.Response) (*APIFirewallAliasAdvancedUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasAdvancedUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasEntryDeleteResponse parses an HTTP response from a APIFirewallAliasEntryDeleteWithResponse call
func ParseAPIFirewallAliasEntryDeleteResponse(rsp *http.Response) (*APIFirewallAliasEntryDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasEntryDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallAliasEntryCreateResponse parses an HTTP response from a APIFirewallAliasEntryCreateWithResponse call
func ParseAPIFirewallAliasEntryCreateResponse(rsp *http.Response) (*APIFirewallAliasEntryCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallAliasEntryCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallApplyCreateResponse parses an HTTP response from a APIFirewallApplyCreateWithResponse call
func ParseAPIFirewallApplyCreateResponse(rsp *http.Response) (*APIFirewallApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOneToOneDeleteResponse parses an HTTP response from a APIFirewallNATOneToOneDeleteWithResponse call
func ParseAPIFirewallNATOneToOneDeleteResponse(rsp *http.Response) (*APIFirewallNATOneToOneDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOneToOneDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOneToOneReadResponse parses an HTTP response from a APIFirewallNATOneToOneReadWithResponse call
func ParseAPIFirewallNATOneToOneReadResponse(rsp *http.Response) (*APIFirewallNATOneToOneReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOneToOneReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOneToOneCreateResponse parses an HTTP response from a APIFirewallNATOneToOneCreateWithResponse call
func ParseAPIFirewallNATOneToOneCreateResponse(rsp *http.Response) (*APIFirewallNATOneToOneCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOneToOneCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOneToOneUpdateResponse parses an HTTP response from a APIFirewallNATOneToOneUpdateWithResponse call
func ParseAPIFirewallNATOneToOneUpdateResponse(rsp *http.Response) (*APIFirewallNATOneToOneUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOneToOneUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundReadResponse parses an HTTP response from a APIFirewallNATOutboundReadWithResponse call
func ParseAPIFirewallNATOutboundReadResponse(rsp *http.Response) (*APIFirewallNATOutboundReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundUpdateResponse parses an HTTP response from a APIFirewallNATOutboundUpdateWithResponse call
func ParseAPIFirewallNATOutboundUpdateResponse(rsp *http.Response) (*APIFirewallNATOutboundUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundMappingDeleteResponse parses an HTTP response from a APIFirewallNATOutboundMappingDeleteWithResponse call
func ParseAPIFirewallNATOutboundMappingDeleteResponse(rsp *http.Response) (*APIFirewallNATOutboundMappingDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundMappingDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundMappingReadResponse parses an HTTP response from a APIFirewallNATOutboundMappingReadWithResponse call
func ParseAPIFirewallNATOutboundMappingReadResponse(rsp *http.Response) (*APIFirewallNATOutboundMappingReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundMappingReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundMappingCreateResponse parses an HTTP response from a APIFirewallNATOutboundMappingCreateWithResponse call
func ParseAPIFirewallNATOutboundMappingCreateResponse(rsp *http.Response) (*APIFirewallNATOutboundMappingCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundMappingCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundMappingUpdateResponse parses an HTTP response from a APIFirewallNATOutboundMappingUpdateWithResponse call
func ParseAPIFirewallNATOutboundMappingUpdateResponse(rsp *http.Response) (*APIFirewallNATOutboundMappingUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundMappingUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundPortForwardDeleteResponse parses an HTTP response from a APIFirewallNATOutboundPortForwardDeleteWithResponse call
func ParseAPIFirewallNATOutboundPortForwardDeleteResponse(rsp *http.Response) (*APIFirewallNATOutboundPortForwardDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundPortForwardDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundPortForwardReadResponse parses an HTTP response from a APIFirewallNATOutboundPortForwardReadWithResponse call
func ParseAPIFirewallNATOutboundPortForwardReadResponse(rsp *http.Response) (*APIFirewallNATOutboundPortForwardReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundPortForwardReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundPortForwardCreateResponse parses an HTTP response from a APIFirewallNATOutboundPortForwardCreateWithResponse call
func ParseAPIFirewallNATOutboundPortForwardCreateResponse(rsp *http.Response) (*APIFirewallNATOutboundPortForwardCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundPortForwardCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallNATOutboundPortForwardUpdateResponse parses an HTTP response from a APIFirewallNATOutboundPortForwardUpdateWithResponse call
func ParseAPIFirewallNATOutboundPortForwardUpdateResponse(rsp *http.Response) (*APIFirewallNATOutboundPortForwardUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallNATOutboundPortForwardUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleDeleteResponse parses an HTTP response from a APIFirewallRuleDeleteWithResponse call
func ParseAPIFirewallRuleDeleteResponse(rsp *http.Response) (*APIFirewallRuleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleReadResponse parses an HTTP response from a APIFirewallRuleReadWithResponse call
func ParseAPIFirewallRuleReadResponse(rsp *http.Response) (*APIFirewallRuleReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleCreateResponse parses an HTTP response from a APIFirewallRuleCreateWithResponse call
func ParseAPIFirewallRuleCreateResponse(rsp *http.Response) (*APIFirewallRuleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleUpdateResponse parses an HTTP response from a APIFirewallRuleUpdateWithResponse call
func ParseAPIFirewallRuleUpdateResponse(rsp *http.Response) (*APIFirewallRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleFlushDeleteResponse parses an HTTP response from a APIFirewallRuleFlushDeleteWithResponse call
func ParseAPIFirewallRuleFlushDeleteResponse(rsp *http.Response) (*APIFirewallRuleFlushDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleFlushDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleFlushUpdateResponse parses an HTTP response from a APIFirewallRuleFlushUpdateWithResponse call
func ParseAPIFirewallRuleFlushUpdateResponse(rsp *http.Response) (*APIFirewallRuleFlushUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleFlushUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallRuleSortUpdateResponse parses an HTTP response from a APIFirewallRuleSortUpdateWithResponse call
func ParseAPIFirewallRuleSortUpdateResponse(rsp *http.Response) (*APIFirewallRuleSortUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallRuleSortUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleDeleteResponse parses an HTTP response from a APIFirewallScheduleDeleteWithResponse call
func ParseAPIFirewallScheduleDeleteResponse(rsp *http.Response) (*APIFirewallScheduleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleReadResponse parses an HTTP response from a APIFirewallScheduleReadWithResponse call
func ParseAPIFirewallScheduleReadResponse(rsp *http.Response) (*APIFirewallScheduleReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleCreateResponse parses an HTTP response from a APIFirewallScheduleCreateWithResponse call
func ParseAPIFirewallScheduleCreateResponse(rsp *http.Response) (*APIFirewallScheduleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleUpdateResponse parses an HTTP response from a APIFirewallScheduleUpdateWithResponse call
func ParseAPIFirewallScheduleUpdateResponse(rsp *http.Response) (*APIFirewallScheduleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleTimeRangeDeleteResponse parses an HTTP response from a APIFirewallScheduleTimeRangeDeleteWithResponse call
func ParseAPIFirewallScheduleTimeRangeDeleteResponse(rsp *http.Response) (*APIFirewallScheduleTimeRangeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleTimeRangeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallScheduleTimeRangeCreateResponse parses an HTTP response from a APIFirewallScheduleTimeRangeCreateWithResponse call
func ParseAPIFirewallScheduleTimeRangeCreateResponse(rsp *http.Response) (*APIFirewallScheduleTimeRangeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallScheduleTimeRangeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallStatesDeleteResponse parses an HTTP response from a APIFirewallStatesDeleteWithResponse call
func ParseAPIFirewallStatesDeleteResponse(rsp *http.Response) (*APIFirewallStatesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallStatesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallStatesReadResponse parses an HTTP response from a APIFirewallStatesReadWithResponse call
func ParseAPIFirewallStatesReadResponse(rsp *http.Response) (*APIFirewallStatesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallStatesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallStatesSizeReadResponse parses an HTTP response from a APIFirewallStatesSizeReadWithResponse call
func ParseAPIFirewallStatesSizeReadResponse(rsp *http.Response) (*APIFirewallStatesSizeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallStatesSizeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallStatesSizeUpdateResponse parses an HTTP response from a APIFirewallStatesSizeUpdateWithResponse call
func ParseAPIFirewallStatesSizeUpdateResponse(rsp *http.Response) (*APIFirewallStatesSizeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallStatesSizeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperDeleteResponse parses an HTTP response from a APIFirewallTrafficShaperDeleteWithResponse call
func ParseAPIFirewallTrafficShaperDeleteResponse(rsp *http.Response) (*APIFirewallTrafficShaperDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperReadResponse parses an HTTP response from a APIFirewallTrafficShaperReadWithResponse call
func ParseAPIFirewallTrafficShaperReadResponse(rsp *http.Response) (*APIFirewallTrafficShaperReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperCreateResponse parses an HTTP response from a APIFirewallTrafficShaperCreateWithResponse call
func ParseAPIFirewallTrafficShaperCreateResponse(rsp *http.Response) (*APIFirewallTrafficShaperCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperUpdateResponse parses an HTTP response from a APIFirewallTrafficShaperUpdateWithResponse call
func ParseAPIFirewallTrafficShaperUpdateResponse(rsp *http.Response) (*APIFirewallTrafficShaperUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterDeleteResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterDeleteWithResponse call
func ParseAPIFirewallTrafficShaperLimiterDeleteResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterReadResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterReadWithResponse call
func ParseAPIFirewallTrafficShaperLimiterReadResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterCreateResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterCreateWithResponse call
func ParseAPIFirewallTrafficShaperLimiterCreateResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterBandwidthDeleteResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterBandwidthDeleteWithResponse call
func ParseAPIFirewallTrafficShaperLimiterBandwidthDeleteResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterBandwidthDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterBandwidthDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterBandwidthCreateResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterBandwidthCreateWithResponse call
func ParseAPIFirewallTrafficShaperLimiterBandwidthCreateResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterBandwidthCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterBandwidthCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterQueueDeleteResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterQueueDeleteWithResponse call
func ParseAPIFirewallTrafficShaperLimiterQueueDeleteResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterQueueDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterQueueDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperLimiterQueueCreateResponse parses an HTTP response from a APIFirewallTrafficShaperLimiterQueueCreateWithResponse call
func ParseAPIFirewallTrafficShaperLimiterQueueCreateResponse(rsp *http.Response) (*APIFirewallTrafficShaperLimiterQueueCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperLimiterQueueCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperQueueDeleteResponse parses an HTTP response from a APIFirewallTrafficShaperQueueDeleteWithResponse call
func ParseAPIFirewallTrafficShaperQueueDeleteResponse(rsp *http.Response) (*APIFirewallTrafficShaperQueueDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperQueueDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallTrafficShaperQueueCreateResponse parses an HTTP response from a APIFirewallTrafficShaperQueueCreateWithResponse call
func ParseAPIFirewallTrafficShaperQueueCreateResponse(rsp *http.Response) (*APIFirewallTrafficShaperQueueCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallTrafficShaperQueueCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallVirtualIPDeleteResponse parses an HTTP response from a APIFirewallVirtualIPDeleteWithResponse call
func ParseAPIFirewallVirtualIPDeleteResponse(rsp *http.Response) (*APIFirewallVirtualIPDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallVirtualIPDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallVirtualIPReadResponse parses an HTTP response from a APIFirewallVirtualIPReadWithResponse call
func ParseAPIFirewallVirtualIPReadResponse(rsp *http.Response) (*APIFirewallVirtualIPReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallVirtualIPReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallVirtualIPCreateResponse parses an HTTP response from a APIFirewallVirtualIPCreateWithResponse call
func ParseAPIFirewallVirtualIPCreateResponse(rsp *http.Response) (*APIFirewallVirtualIPCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallVirtualIPCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIFirewallVirtualIPUpdateResponse parses an HTTP response from a APIFirewallVirtualIPUpdateWithResponse call
func ParseAPIFirewallVirtualIPUpdateResponse(rsp *http.Response) (*APIFirewallVirtualIPUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIFirewallVirtualIPUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceDeleteResponse parses an HTTP response from a APIInterfaceDeleteWithResponse call
func ParseAPIInterfaceDeleteResponse(rsp *http.Response) (*APIInterfaceDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceReadResponse parses an HTTP response from a APIInterfaceReadWithResponse call
func ParseAPIInterfaceReadResponse(rsp *http.Response) (*APIInterfaceReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceCreateResponse parses an HTTP response from a APIInterfaceCreateWithResponse call
func ParseAPIInterfaceCreateResponse(rsp *http.Response) (*APIInterfaceCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceUpdateResponse parses an HTTP response from a APIInterfaceUpdateWithResponse call
func ParseAPIInterfaceUpdateResponse(rsp *http.Response) (*APIInterfaceUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceApplyReadResponse parses an HTTP response from a APIInterfaceApplyReadWithResponse call
func ParseAPIInterfaceApplyReadResponse(rsp *http.Response) (*APIInterfaceApplyReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceApplyReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceApplyCreateResponse parses an HTTP response from a APIInterfaceApplyCreateWithResponse call
func ParseAPIInterfaceApplyCreateResponse(rsp *http.Response) (*APIInterfaceApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceAvailableReadResponse parses an HTTP response from a APIInterfaceAvailableReadWithResponse call
func ParseAPIInterfaceAvailableReadResponse(rsp *http.Response) (*APIInterfaceAvailableReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceAvailableReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceBridgeDeleteResponse parses an HTTP response from a APIInterfaceBridgeDeleteWithResponse call
func ParseAPIInterfaceBridgeDeleteResponse(rsp *http.Response) (*APIInterfaceBridgeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceBridgeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceBridgeReadResponse parses an HTTP response from a APIInterfaceBridgeReadWithResponse call
func ParseAPIInterfaceBridgeReadResponse(rsp *http.Response) (*APIInterfaceBridgeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceBridgeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceBridgeCreateResponse parses an HTTP response from a APIInterfaceBridgeCreateWithResponse call
func ParseAPIInterfaceBridgeCreateResponse(rsp *http.Response) (*APIInterfaceBridgeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceBridgeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceBridgeUpdateResponse parses an HTTP response from a APIInterfaceBridgeUpdateWithResponse call
func ParseAPIInterfaceBridgeUpdateResponse(rsp *http.Response) (*APIInterfaceBridgeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceBridgeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceGroupDeleteResponse parses an HTTP response from a APIInterfaceGroupDeleteWithResponse call
func ParseAPIInterfaceGroupDeleteResponse(rsp *http.Response) (*APIInterfaceGroupDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceGroupDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceGroupReadResponse parses an HTTP response from a APIInterfaceGroupReadWithResponse call
func ParseAPIInterfaceGroupReadResponse(rsp *http.Response) (*APIInterfaceGroupReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceGroupReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceGroupCreateResponse parses an HTTP response from a APIInterfaceGroupCreateWithResponse call
func ParseAPIInterfaceGroupCreateResponse(rsp *http.Response) (*APIInterfaceGroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceGroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceGroupUpdateResponse parses an HTTP response from a APIInterfaceGroupUpdateWithResponse call
func ParseAPIInterfaceGroupUpdateResponse(rsp *http.Response) (*APIInterfaceGroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceGroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceVLANDeleteResponse parses an HTTP response from a APIInterfaceVLANDeleteWithResponse call
func ParseAPIInterfaceVLANDeleteResponse(rsp *http.Response) (*APIInterfaceVLANDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceVLANDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceVLANReadResponse parses an HTTP response from a APIInterfaceVLANReadWithResponse call
func ParseAPIInterfaceVLANReadResponse(rsp *http.Response) (*APIInterfaceVLANReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceVLANReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceVLANCreateResponse parses an HTTP response from a APIInterfaceVLANCreateWithResponse call
func ParseAPIInterfaceVLANCreateResponse(rsp *http.Response) (*APIInterfaceVLANCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceVLANCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIInterfaceVLANUpdateResponse parses an HTTP response from a APIInterfaceVLANUpdateWithResponse call
func ParseAPIInterfaceVLANUpdateResponse(rsp *http.Response) (*APIInterfaceVLANUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIInterfaceVLANUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingApplyCreateResponse parses an HTTP response from a APIRoutingApplyCreateWithResponse call
func ParseAPIRoutingApplyCreateResponse(rsp *http.Response) (*APIRoutingApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayDeleteResponse parses an HTTP response from a APIRoutingGatewayDeleteWithResponse call
func ParseAPIRoutingGatewayDeleteResponse(rsp *http.Response) (*APIRoutingGatewayDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayReadResponse parses an HTTP response from a APIRoutingGatewayReadWithResponse call
func ParseAPIRoutingGatewayReadResponse(rsp *http.Response) (*APIRoutingGatewayReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayCreateResponse parses an HTTP response from a APIRoutingGatewayCreateWithResponse call
func ParseAPIRoutingGatewayCreateResponse(rsp *http.Response) (*APIRoutingGatewayCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayUpdateResponse parses an HTTP response from a APIRoutingGatewayUpdateWithResponse call
func ParseAPIRoutingGatewayUpdateResponse(rsp *http.Response) (*APIRoutingGatewayUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayDefaultUpdateResponse parses an HTTP response from a APIRoutingGatewayDefaultUpdateWithResponse call
func ParseAPIRoutingGatewayDefaultUpdateResponse(rsp *http.Response) (*APIRoutingGatewayDefaultUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayDefaultUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingGatewayDetailReadResponse parses an HTTP response from a APIRoutingGatewayDetailReadWithResponse call
func ParseAPIRoutingGatewayDetailReadResponse(rsp *http.Response) (*APIRoutingGatewayDetailReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingGatewayDetailReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingStaticRouteDeleteResponse parses an HTTP response from a APIRoutingStaticRouteDeleteWithResponse call
func ParseAPIRoutingStaticRouteDeleteResponse(rsp *http.Response) (*APIRoutingStaticRouteDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingStaticRouteDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingStaticRouteReadResponse parses an HTTP response from a APIRoutingStaticRouteReadWithResponse call
func ParseAPIRoutingStaticRouteReadResponse(rsp *http.Response) (*APIRoutingStaticRouteReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingStaticRouteReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingStaticRouteCreateResponse parses an HTTP response from a APIRoutingStaticRouteCreateWithResponse call
func ParseAPIRoutingStaticRouteCreateResponse(rsp *http.Response) (*APIRoutingStaticRouteCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingStaticRouteCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIRoutingStaticRouteUpdateResponse parses an HTTP response from a APIRoutingStaticRouteUpdateWithResponse call
func ParseAPIRoutingStaticRouteUpdateResponse(rsp *http.Response) (*APIRoutingStaticRouteUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIRoutingStaticRouteUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesReadResponse parses an HTTP response from a APIServicesReadWithResponse call
func ParseAPIServicesReadResponse(rsp *http.Response) (*APIServicesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDDNSReadResponse parses an HTTP response from a APIServicesDDNSReadWithResponse call
func ParseAPIServicesDDNSReadResponse(rsp *http.Response) (*APIServicesDDNSReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDDNSReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdReadResponse parses an HTTP response from a APIServicesDHCPdReadWithResponse call
func ParseAPIServicesDHCPdReadResponse(rsp *http.Response) (*APIServicesDHCPdReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdUpdateResponse parses an HTTP response from a APIServicesDHCPdUpdateWithResponse call
func ParseAPIServicesDHCPdUpdateResponse(rsp *http.Response) (*APIServicesDHCPdUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdLeaseReadResponse parses an HTTP response from a APIServicesDHCPdLeaseReadWithResponse call
func ParseAPIServicesDHCPdLeaseReadResponse(rsp *http.Response) (*APIServicesDHCPdLeaseReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdLeaseReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdOptionsCreateResponse parses an HTTP response from a APIServicesDHCPdOptionsCreateWithResponse call
func ParseAPIServicesDHCPdOptionsCreateResponse(rsp *http.Response) (*APIServicesDHCPdOptionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdOptionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdRestartCreateResponse parses an HTTP response from a APIServicesDHCPdRestartCreateWithResponse call
func ParseAPIServicesDHCPdRestartCreateResponse(rsp *http.Response) (*APIServicesDHCPdRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStartCreateResponse parses an HTTP response from a APIServicesDHCPdStartCreateWithResponse call
func ParseAPIServicesDHCPdStartCreateResponse(rsp *http.Response) (*APIServicesDHCPdStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStaticMappingDeleteResponse parses an HTTP response from a APIServicesDHCPdStaticMappingDeleteWithResponse call
func ParseAPIServicesDHCPdStaticMappingDeleteResponse(rsp *http.Response) (*APIServicesDHCPdStaticMappingDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStaticMappingDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStaticMappingReadResponse parses an HTTP response from a APIServicesDHCPdStaticMappingReadWithResponse call
func ParseAPIServicesDHCPdStaticMappingReadResponse(rsp *http.Response) (*APIServicesDHCPdStaticMappingReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStaticMappingReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStaticMappingCreateResponse parses an HTTP response from a APIServicesDHCPdStaticMappingCreateWithResponse call
func ParseAPIServicesDHCPdStaticMappingCreateResponse(rsp *http.Response) (*APIServicesDHCPdStaticMappingCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStaticMappingCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStaticMappingUpdateResponse parses an HTTP response from a APIServicesDHCPdStaticMappingUpdateWithResponse call
func ParseAPIServicesDHCPdStaticMappingUpdateResponse(rsp *http.Response) (*APIServicesDHCPdStaticMappingUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStaticMappingUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDHCPdStopCreateResponse parses an HTTP response from a APIServicesDHCPdStopCreateWithResponse call
func ParseAPIServicesDHCPdStopCreateResponse(rsp *http.Response) (*APIServicesDHCPdStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDHCPdStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqReadResponse parses an HTTP response from a APIServicesDnsmasqReadWithResponse call
func ParseAPIServicesDnsmasqReadResponse(rsp *http.Response) (*APIServicesDnsmasqReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqApplyCreateResponse parses an HTTP response from a APIServicesDnsmasqApplyCreateWithResponse call
func ParseAPIServicesDnsmasqApplyCreateResponse(rsp *http.Response) (*APIServicesDnsmasqApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqHostOverrideDeleteResponse parses an HTTP response from a APIServicesDnsmasqHostOverrideDeleteWithResponse call
func ParseAPIServicesDnsmasqHostOverrideDeleteResponse(rsp *http.Response) (*APIServicesDnsmasqHostOverrideDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqHostOverrideDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqHostOverrideReadResponse parses an HTTP response from a APIServicesDnsmasqHostOverrideReadWithResponse call
func ParseAPIServicesDnsmasqHostOverrideReadResponse(rsp *http.Response) (*APIServicesDnsmasqHostOverrideReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqHostOverrideReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqHostOverrideCreateResponse parses an HTTP response from a APIServicesDnsmasqHostOverrideCreateWithResponse call
func ParseAPIServicesDnsmasqHostOverrideCreateResponse(rsp *http.Response) (*APIServicesDnsmasqHostOverrideCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqHostOverrideCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqHostOverrideUpdateResponse parses an HTTP response from a APIServicesDnsmasqHostOverrideUpdateWithResponse call
func ParseAPIServicesDnsmasqHostOverrideUpdateResponse(rsp *http.Response) (*APIServicesDnsmasqHostOverrideUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqHostOverrideUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqHostOverrideAliasCreateResponse parses an HTTP response from a APIServicesDnsmasqHostOverrideAliasCreateWithResponse call
func ParseAPIServicesDnsmasqHostOverrideAliasCreateResponse(rsp *http.Response) (*APIServicesDnsmasqHostOverrideAliasCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqHostOverrideAliasCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqRestartCreateResponse parses an HTTP response from a APIServicesDnsmasqRestartCreateWithResponse call
func ParseAPIServicesDnsmasqRestartCreateResponse(rsp *http.Response) (*APIServicesDnsmasqRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqStartCreateResponse parses an HTTP response from a APIServicesDnsmasqStartCreateWithResponse call
func ParseAPIServicesDnsmasqStartCreateResponse(rsp *http.Response) (*APIServicesDnsmasqStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDnsmasqStopCreateResponse parses an HTTP response from a APIServicesDnsmasqStopCreateWithResponse call
func ParseAPIServicesDnsmasqStopCreateResponse(rsp *http.Response) (*APIServicesDnsmasqStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDnsmasqStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDpingerRestartCreateResponse parses an HTTP response from a APIServicesDpingerRestartCreateWithResponse call
func ParseAPIServicesDpingerRestartCreateResponse(rsp *http.Response) (*APIServicesDpingerRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDpingerRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDpingerStartCreateResponse parses an HTTP response from a APIServicesDpingerStartCreateWithResponse call
func ParseAPIServicesDpingerStartCreateResponse(rsp *http.Response) (*APIServicesDpingerStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDpingerStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesDpingerStopCreateResponse parses an HTTP response from a APIServicesDpingerStopCreateWithResponse call
func ParseAPIServicesDpingerStopCreateResponse(rsp *http.Response) (*APIServicesDpingerStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesDpingerStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecApplyCreateResponse parses an HTTP response from a APIServicesIPsecApplyCreateWithResponse call
func ParseAPIServicesIPsecApplyCreateResponse(rsp *http.Response) (*APIServicesIPsecApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase1DeleteResponse parses an HTTP response from a APIServicesIPsecPhase1DeleteWithResponse call
func ParseAPIServicesIPsecPhase1DeleteResponse(rsp *http.Response) (*APIServicesIPsecPhase1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase1ReadResponse parses an HTTP response from a APIServicesIPsecPhase1ReadWithResponse call
func ParseAPIServicesIPsecPhase1ReadResponse(rsp *http.Response) (*APIServicesIPsecPhase1ReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase1ReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase1CreateResponse parses an HTTP response from a APIServicesIPsecPhase1CreateWithResponse call
func ParseAPIServicesIPsecPhase1CreateResponse(rsp *http.Response) (*APIServicesIPsecPhase1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase1UpdateResponse parses an HTTP response from a APIServicesIPsecPhase1UpdateWithResponse call
func ParseAPIServicesIPsecPhase1UpdateResponse(rsp *http.Response) (*APIServicesIPsecPhase1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase1EncryptionCreateResponse parses an HTTP response from a APIServicesIPsecPhase1EncryptionCreateWithResponse call
func ParseAPIServicesIPsecPhase1EncryptionCreateResponse(rsp *http.Response) (*APIServicesIPsecPhase1EncryptionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase1EncryptionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase2DeleteResponse parses an HTTP response from a APIServicesIPsecPhase2DeleteWithResponse call
func ParseAPIServicesIPsecPhase2DeleteResponse(rsp *http.Response) (*APIServicesIPsecPhase2DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase2DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase2ReadResponse parses an HTTP response from a APIServicesIPsecPhase2ReadWithResponse call
func ParseAPIServicesIPsecPhase2ReadResponse(rsp *http.Response) (*APIServicesIPsecPhase2ReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase2ReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase2CreateResponse parses an HTTP response from a APIServicesIPsecPhase2CreateWithResponse call
func ParseAPIServicesIPsecPhase2CreateResponse(rsp *http.Response) (*APIServicesIPsecPhase2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesIPsecPhase2UpdateResponse parses an HTTP response from a APIServicesIPsecPhase2UpdateWithResponse call
func ParseAPIServicesIPsecPhase2UpdateResponse(rsp *http.Response) (*APIServicesIPsecPhase2UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesIPsecPhase2UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdReadResponse parses an HTTP response from a APIServicesNTPdReadWithResponse call
func ParseAPIServicesNTPdReadResponse(rsp *http.Response) (*APIServicesNTPdReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdUpdateResponse parses an HTTP response from a APIServicesNTPdUpdateWithResponse call
func ParseAPIServicesNTPdUpdateResponse(rsp *http.Response) (*APIServicesNTPdUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdRestartCreateResponse parses an HTTP response from a APIServicesNTPdRestartCreateWithResponse call
func ParseAPIServicesNTPdRestartCreateResponse(rsp *http.Response) (*APIServicesNTPdRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdStartCreateResponse parses an HTTP response from a APIServicesNTPdStartCreateWithResponse call
func ParseAPIServicesNTPdStartCreateResponse(rsp *http.Response) (*APIServicesNTPdStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdStopCreateResponse parses an HTTP response from a APIServicesNTPdStopCreateWithResponse call
func ParseAPIServicesNTPdStopCreateResponse(rsp *http.Response) (*APIServicesNTPdStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdTimeServerDeleteResponse parses an HTTP response from a APIServicesNTPdTimeServerDeleteWithResponse call
func ParseAPIServicesNTPdTimeServerDeleteResponse(rsp *http.Response) (*APIServicesNTPdTimeServerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdTimeServerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesNTPdTimeServerCreateResponse parses an HTTP response from a APIServicesNTPdTimeServerCreateWithResponse call
func ParseAPIServicesNTPdTimeServerCreateResponse(rsp *http.Response) (*APIServicesNTPdTimeServerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesNTPdTimeServerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientReadResponse parses an HTTP response from a APIServicesOpenVPNClientReadWithResponse call
func ParseAPIServicesOpenVPNClientReadResponse(rsp *http.Response) (*APIServicesOpenVPNClientReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientCreateResponse parses an HTTP response from a APIServicesOpenVPNClientCreateWithResponse call
func ParseAPIServicesOpenVPNClientCreateResponse(rsp *http.Response) (*APIServicesOpenVPNClientCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientUpdateResponse parses an HTTP response from a APIServicesOpenVPNClientUpdateWithResponse call
func ParseAPIServicesOpenVPNClientUpdateResponse(rsp *http.Response) (*APIServicesOpenVPNClientUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientSpecificOverridesDeleteResponse parses an HTTP response from a APIServicesOpenVPNClientSpecificOverridesDeleteWithResponse call
func ParseAPIServicesOpenVPNClientSpecificOverridesDeleteResponse(rsp *http.Response) (*APIServicesOpenVPNClientSpecificOverridesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientSpecificOverridesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientSpecificOverridesReadResponse parses an HTTP response from a APIServicesOpenVPNClientSpecificOverridesReadWithResponse call
func ParseAPIServicesOpenVPNClientSpecificOverridesReadResponse(rsp *http.Response) (*APIServicesOpenVPNClientSpecificOverridesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientSpecificOverridesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientSpecificOverridesCreateResponse parses an HTTP response from a APIServicesOpenVPNClientSpecificOverridesCreateWithResponse call
func ParseAPIServicesOpenVPNClientSpecificOverridesCreateResponse(rsp *http.Response) (*APIServicesOpenVPNClientSpecificOverridesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientSpecificOverridesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNClientSpecificOverridesUpdateResponse parses an HTTP response from a APIServicesOpenVPNClientSpecificOverridesUpdateWithResponse call
func ParseAPIServicesOpenVPNClientSpecificOverridesUpdateResponse(rsp *http.Response) (*APIServicesOpenVPNClientSpecificOverridesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNClientSpecificOverridesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNServerReadResponse parses an HTTP response from a APIServicesOpenVPNServerReadWithResponse call
func ParseAPIServicesOpenVPNServerReadResponse(rsp *http.Response) (*APIServicesOpenVPNServerReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNServerReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNServerCreateResponse parses an HTTP response from a APIServicesOpenVPNServerCreateWithResponse call
func ParseAPIServicesOpenVPNServerCreateResponse(rsp *http.Response) (*APIServicesOpenVPNServerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNServerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesOpenVPNServerUpdateResponse parses an HTTP response from a APIServicesOpenVPNServerUpdateWithResponse call
func ParseAPIServicesOpenVPNServerUpdateResponse(rsp *http.Response) (*APIServicesOpenVPNServerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesOpenVPNServerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesRestartCreateResponse parses an HTTP response from a APIServicesRestartCreateWithResponse call
func ParseAPIServicesRestartCreateResponse(rsp *http.Response) (*APIServicesRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesServiceWatchdogReadResponse parses an HTTP response from a APIServicesServiceWatchdogReadWithResponse call
func ParseAPIServicesServiceWatchdogReadResponse(rsp *http.Response) (*APIServicesServiceWatchdogReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesServiceWatchdogReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesServiceWatchdogUpdateResponse parses an HTTP response from a APIServicesServiceWatchdogUpdateWithResponse call
func ParseAPIServicesServiceWatchdogUpdateResponse(rsp *http.Response) (*APIServicesServiceWatchdogUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesServiceWatchdogUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSSHdReadResponse parses an HTTP response from a APIServicesSSHdReadWithResponse call
func ParseAPIServicesSSHdReadResponse(rsp *http.Response) (*APIServicesSSHdReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSSHdReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSSHdUpdateResponse parses an HTTP response from a APIServicesSSHdUpdateWithResponse call
func ParseAPIServicesSSHdUpdateResponse(rsp *http.Response) (*APIServicesSSHdUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSSHdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSSHdRestartCreateResponse parses an HTTP response from a APIServicesSSHdRestartCreateWithResponse call
func ParseAPIServicesSSHdRestartCreateResponse(rsp *http.Response) (*APIServicesSSHdRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSSHdRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSSHdStartCreateResponse parses an HTTP response from a APIServicesSSHdStartCreateWithResponse call
func ParseAPIServicesSSHdStartCreateResponse(rsp *http.Response) (*APIServicesSSHdStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSSHdStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSSHdStopCreateResponse parses an HTTP response from a APIServicesSSHdStopCreateWithResponse call
func ParseAPIServicesSSHdStopCreateResponse(rsp *http.Response) (*APIServicesSSHdStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSSHdStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesStartCreateResponse parses an HTTP response from a APIServicesStartCreateWithResponse call
func ParseAPIServicesStartCreateResponse(rsp *http.Response) (*APIServicesStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesStopCreateResponse parses an HTTP response from a APIServicesStopCreateWithResponse call
func ParseAPIServicesStopCreateResponse(rsp *http.Response) (*APIServicesStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSyslogdRestartCreateResponse parses an HTTP response from a APIServicesSyslogdRestartCreateWithResponse call
func ParseAPIServicesSyslogdRestartCreateResponse(rsp *http.Response) (*APIServicesSyslogdRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSyslogdRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSyslogdStartCreateResponse parses an HTTP response from a APIServicesSyslogdStartCreateWithResponse call
func ParseAPIServicesSyslogdStartCreateResponse(rsp *http.Response) (*APIServicesSyslogdStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSyslogdStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesSyslogdStopCreateResponse parses an HTTP response from a APIServicesSyslogdStopCreateWithResponse call
func ParseAPIServicesSyslogdStopCreateResponse(rsp *http.Response) (*APIServicesSyslogdStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesSyslogdStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundReadResponse parses an HTTP response from a APIServicesUnboundReadWithResponse call
func ParseAPIServicesUnboundReadResponse(rsp *http.Response) (*APIServicesUnboundReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundAccessListDeleteResponse parses an HTTP response from a APIServicesUnboundAccessListDeleteWithResponse call
func ParseAPIServicesUnboundAccessListDeleteResponse(rsp *http.Response) (*APIServicesUnboundAccessListDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundAccessListDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundAccessListReadResponse parses an HTTP response from a APIServicesUnboundAccessListReadWithResponse call
func ParseAPIServicesUnboundAccessListReadResponse(rsp *http.Response) (*APIServicesUnboundAccessListReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundAccessListReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundAccessListCreateResponse parses an HTTP response from a APIServicesUnboundAccessListCreateWithResponse call
func ParseAPIServicesUnboundAccessListCreateResponse(rsp *http.Response) (*APIServicesUnboundAccessListCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundAccessListCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundAccessListUpdateResponse parses an HTTP response from a APIServicesUnboundAccessListUpdateWithResponse call
func ParseAPIServicesUnboundAccessListUpdateResponse(rsp *http.Response) (*APIServicesUnboundAccessListUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundAccessListUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundAccessListRowCreateResponse parses an HTTP response from a APIServicesUnboundAccessListRowCreateWithResponse call
func ParseAPIServicesUnboundAccessListRowCreateResponse(rsp *http.Response) (*APIServicesUnboundAccessListRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundAccessListRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundApplyReadResponse parses an HTTP response from a APIServicesUnboundApplyReadWithResponse call
func ParseAPIServicesUnboundApplyReadResponse(rsp *http.Response) (*APIServicesUnboundApplyReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundApplyReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundApplyCreateResponse parses an HTTP response from a APIServicesUnboundApplyCreateWithResponse call
func ParseAPIServicesUnboundApplyCreateResponse(rsp *http.Response) (*APIServicesUnboundApplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundApplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideDeleteResponse parses an HTTP response from a APIServicesUnboundHostOverrideDeleteWithResponse call
func ParseAPIServicesUnboundHostOverrideDeleteResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideReadResponse parses an HTTP response from a APIServicesUnboundHostOverrideReadWithResponse call
func ParseAPIServicesUnboundHostOverrideReadResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideCreateResponse parses an HTTP response from a APIServicesUnboundHostOverrideCreateWithResponse call
func ParseAPIServicesUnboundHostOverrideCreateResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideUpdateResponse parses an HTTP response from a APIServicesUnboundHostOverrideUpdateWithResponse call
func ParseAPIServicesUnboundHostOverrideUpdateResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideAliasCreateResponse parses an HTTP response from a APIServicesUnboundHostOverrideAliasCreateWithResponse call
func ParseAPIServicesUnboundHostOverrideAliasCreateResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideAliasCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideAliasCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideFlushDeleteResponse parses an HTTP response from a APIServicesUnboundHostOverrideFlushDeleteWithResponse call
func ParseAPIServicesUnboundHostOverrideFlushDeleteResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideFlushDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideFlushDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundHostOverrideFlushUpdateResponse parses an HTTP response from a APIServicesUnboundHostOverrideFlushUpdateWithResponse call
func ParseAPIServicesUnboundHostOverrideFlushUpdateResponse(rsp *http.Response) (*APIServicesUnboundHostOverrideFlushUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundHostOverrideFlushUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundRestartCreateResponse parses an HTTP response from a APIServicesUnboundRestartCreateWithResponse call
func ParseAPIServicesUnboundRestartCreateResponse(rsp *http.Response) (*APIServicesUnboundRestartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundRestartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundStartCreateResponse parses an HTTP response from a APIServicesUnboundStartCreateWithResponse call
func ParseAPIServicesUnboundStartCreateResponse(rsp *http.Response) (*APIServicesUnboundStartCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundStartCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesUnboundStopCreateResponse parses an HTTP response from a APIServicesUnboundStopCreateWithResponse call
func ParseAPIServicesUnboundStopCreateResponse(rsp *http.Response) (*APIServicesUnboundStopCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesUnboundStopCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIServicesWOLSendCreateResponse parses an HTTP response from a APIServicesWOLSendCreateWithResponse call
func ParseAPIServicesWOLSendCreateResponse(rsp *http.Response) (*APIServicesWOLSendCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIServicesWOLSendCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusCARPReadResponse parses an HTTP response from a APIStatusCARPReadWithResponse call
func ParseAPIStatusCARPReadResponse(rsp *http.Response) (*APIStatusCARPReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusCARPReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusCARPUpdateResponse parses an HTTP response from a APIStatusCARPUpdateWithResponse call
func ParseAPIStatusCARPUpdateResponse(rsp *http.Response) (*APIStatusCARPUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusCARPUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusGatewayReadResponse parses an HTTP response from a APIStatusGatewayReadWithResponse call
func ParseAPIStatusGatewayReadResponse(rsp *http.Response) (*APIStatusGatewayReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusGatewayReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusInterfaceReadResponse parses an HTTP response from a APIStatusInterfaceReadWithResponse call
func ParseAPIStatusInterfaceReadResponse(rsp *http.Response) (*APIStatusInterfaceReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusInterfaceReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusIPsecReadResponse parses an HTTP response from a APIStatusIPsecReadWithResponse call
func ParseAPIStatusIPsecReadResponse(rsp *http.Response) (*APIStatusIPsecReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusIPsecReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusLogConfigHistoryReadResponse parses an HTTP response from a APIStatusLogConfigHistoryReadWithResponse call
func ParseAPIStatusLogConfigHistoryReadResponse(rsp *http.Response) (*APIStatusLogConfigHistoryReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusLogConfigHistoryReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusLogDHCPReadResponse parses an HTTP response from a APIStatusLogDHCPReadWithResponse call
func ParseAPIStatusLogDHCPReadResponse(rsp *http.Response) (*APIStatusLogDHCPReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusLogDHCPReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusLogFirewallReadResponse parses an HTTP response from a APIStatusLogFirewallReadWithResponse call
func ParseAPIStatusLogFirewallReadResponse(rsp *http.Response) (*APIStatusLogFirewallReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusLogFirewallReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusLogSettingsUpdateResponse parses an HTTP response from a APIStatusLogSettingsUpdateWithResponse call
func ParseAPIStatusLogSettingsUpdateResponse(rsp *http.Response) (*APIStatusLogSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusLogSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusLogSystemReadResponse parses an HTTP response from a APIStatusLogSystemReadWithResponse call
func ParseAPIStatusLogSystemReadResponse(rsp *http.Response) (*APIStatusLogSystemReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusLogSystemReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusOpenVPNReadResponse parses an HTTP response from a APIStatusOpenVPNReadWithResponse call
func ParseAPIStatusOpenVPNReadResponse(rsp *http.Response) (*APIStatusOpenVPNReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusOpenVPNReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIStatusSystemReadResponse parses an HTTP response from a APIStatusSystemReadWithResponse call
func ParseAPIStatusSystemReadResponse(rsp *http.Response) (*APIStatusSystemReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIStatusSystemReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemAPIReadResponse parses an HTTP response from a APISystemAPIReadWithResponse call
func ParseAPISystemAPIReadResponse(rsp *http.Response) (*APISystemAPIReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemAPIReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemAPIUpdateResponse parses an HTTP response from a APISystemAPIUpdateWithResponse call
func ParseAPISystemAPIUpdateResponse(rsp *http.Response) (*APISystemAPIUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemAPIUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemAPIErrorReadResponse parses an HTTP response from a APISystemAPIErrorReadWithResponse call
func ParseAPISystemAPIErrorReadResponse(rsp *http.Response) (*APISystemAPIErrorReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemAPIErrorReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemAPIVersionReadResponse parses an HTTP response from a APISystemAPIVersionReadWithResponse call
func ParseAPISystemAPIVersionReadResponse(rsp *http.Response) (*APISystemAPIVersionReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemAPIVersionReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemARPDeleteResponse parses an HTTP response from a APISystemARPDeleteWithResponse call
func ParseAPISystemARPDeleteResponse(rsp *http.Response) (*APISystemARPDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemARPDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemARPReadResponse parses an HTTP response from a APISystemARPReadWithResponse call
func ParseAPISystemARPReadResponse(rsp *http.Response) (*APISystemARPReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemARPReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCADeleteResponse parses an HTTP response from a APISystemCADeleteWithResponse call
func ParseAPISystemCADeleteResponse(rsp *http.Response) (*APISystemCADeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCADeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCAReadResponse parses an HTTP response from a APISystemCAReadWithResponse call
func ParseAPISystemCAReadResponse(rsp *http.Response) (*APISystemCAReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCAReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCACreateResponse parses an HTTP response from a APISystemCACreateWithResponse call
func ParseAPISystemCACreateResponse(rsp *http.Response) (*APISystemCACreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCACreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCertificateDeleteResponse parses an HTTP response from a APISystemCertificateDeleteWithResponse call
func ParseAPISystemCertificateDeleteResponse(rsp *http.Response) (*APISystemCertificateDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCertificateDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCertificateReadResponse parses an HTTP response from a APISystemCertificateReadWithResponse call
func ParseAPISystemCertificateReadResponse(rsp *http.Response) (*APISystemCertificateReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCertificateReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCertificateCreateResponse parses an HTTP response from a APISystemCertificateCreateWithResponse call
func ParseAPISystemCertificateCreateResponse(rsp *http.Response) (*APISystemCertificateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCertificateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCertificateUpdateResponse parses an HTTP response from a APISystemCertificateUpdateWithResponse call
func ParseAPISystemCertificateUpdateResponse(rsp *http.Response) (*APISystemCertificateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCertificateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemConfigReadResponse parses an HTTP response from a APISystemConfigReadWithResponse call
func ParseAPISystemConfigReadResponse(rsp *http.Response) (*APISystemConfigReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemConfigReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemConfigUpdateResponse parses an HTTP response from a APISystemConfigUpdateWithResponse call
func ParseAPISystemConfigUpdateResponse(rsp *http.Response) (*APISystemConfigUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemConfigUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemConsoleUpdateResponse parses an HTTP response from a APISystemConsoleUpdateWithResponse call
func ParseAPISystemConsoleUpdateResponse(rsp *http.Response) (*APISystemConsoleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemConsoleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCRLDeleteResponse parses an HTTP response from a APISystemCRLDeleteWithResponse call
func ParseAPISystemCRLDeleteResponse(rsp *http.Response) (*APISystemCRLDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCRLDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCRLReadResponse parses an HTTP response from a APISystemCRLReadWithResponse call
func ParseAPISystemCRLReadResponse(rsp *http.Response) (*APISystemCRLReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCRLReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemCRLCreateResponse parses an HTTP response from a APISystemCRLCreateWithResponse call
func ParseAPISystemCRLCreateResponse(rsp *http.Response) (*APISystemCRLCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemCRLCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemDNSReadResponse parses an HTTP response from a APISystemDNSReadWithResponse call
func ParseAPISystemDNSReadResponse(rsp *http.Response) (*APISystemDNSReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemDNSReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemDNSUpdateResponse parses an HTTP response from a APISystemDNSUpdateWithResponse call
func ParseAPISystemDNSUpdateResponse(rsp *http.Response) (*APISystemDNSUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemDNSUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemDNSServerDeleteResponse parses an HTTP response from a APISystemDNSServerDeleteWithResponse call
func ParseAPISystemDNSServerDeleteResponse(rsp *http.Response) (*APISystemDNSServerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemDNSServerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemDNSServerCreateResponse parses an HTTP response from a APISystemDNSServerCreateWithResponse call
func ParseAPISystemDNSServerCreateResponse(rsp *http.Response) (*APISystemDNSServerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemDNSServerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemHaltCreateResponse parses an HTTP response from a APISystemHaltCreateWithResponse call
func ParseAPISystemHaltCreateResponse(rsp *http.Response) (*APISystemHaltCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemHaltCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemHostnameReadResponse parses an HTTP response from a APISystemHostnameReadWithResponse call
func ParseAPISystemHostnameReadResponse(rsp *http.Response) (*APISystemHostnameReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemHostnameReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemHostnameUpdateResponse parses an HTTP response from a APISystemHostnameUpdateWithResponse call
func ParseAPISystemHostnameUpdateResponse(rsp *http.Response) (*APISystemHostnameUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemHostnameUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemNotificationsEmailReadResponse parses an HTTP response from a APISystemNotificationsEmailReadWithResponse call
func ParseAPISystemNotificationsEmailReadResponse(rsp *http.Response) (*APISystemNotificationsEmailReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemNotificationsEmailReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemNotificationsEmailUpdateResponse parses an HTTP response from a APISystemNotificationsEmailUpdateWithResponse call
func ParseAPISystemNotificationsEmailUpdateResponse(rsp *http.Response) (*APISystemNotificationsEmailUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemNotificationsEmailUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemPackageDeleteResponse parses an HTTP response from a APISystemPackageDeleteWithResponse call
func ParseAPISystemPackageDeleteResponse(rsp *http.Response) (*APISystemPackageDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemPackageDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemPackageReadResponse parses an HTTP response from a APISystemPackageReadWithResponse call
func ParseAPISystemPackageReadResponse(rsp *http.Response) (*APISystemPackageReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemPackageReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemPackageCreateResponse parses an HTTP response from a APISystemPackageCreateWithResponse call
func ParseAPISystemPackageCreateResponse(rsp *http.Response) (*APISystemPackageCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemPackageCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemRebootCreateResponse parses an HTTP response from a APISystemRebootCreateWithResponse call
func ParseAPISystemRebootCreateResponse(rsp *http.Response) (*APISystemRebootCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemRebootCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemTableReadResponse parses an HTTP response from a APISystemTableReadWithResponse call
func ParseAPISystemTableReadResponse(rsp *http.Response) (*APISystemTableReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemTableReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemTunableDeleteResponse parses an HTTP response from a APISystemTunableDeleteWithResponse call
func ParseAPISystemTunableDeleteResponse(rsp *http.Response) (*APISystemTunableDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemTunableDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemTunableReadResponse parses an HTTP response from a APISystemTunableReadWithResponse call
func ParseAPISystemTunableReadResponse(rsp *http.Response) (*APISystemTunableReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemTunableReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemTunableCreateResponse parses an HTTP response from a APISystemTunableCreateWithResponse call
func ParseAPISystemTunableCreateResponse(rsp *http.Response) (*APISystemTunableCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemTunableCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemTunableUpdateResponse parses an HTTP response from a APISystemTunableUpdateWithResponse call
func ParseAPISystemTunableUpdateResponse(rsp *http.Response) (*APISystemTunableUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemTunableUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemVersionReadResponse parses an HTTP response from a APISystemVersionReadWithResponse call
func ParseAPISystemVersionReadResponse(rsp *http.Response) (*APISystemVersionReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemVersionReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPISystemVersionUpgradeReadResponse parses an HTTP response from a APISystemVersionUpgradeReadWithResponse call
func ParseAPISystemVersionUpgradeReadResponse(rsp *http.Response) (*APISystemVersionUpgradeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APISystemVersionUpgradeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserDeleteResponse parses an HTTP response from a APIUserDeleteWithResponse call
func ParseAPIUserDeleteResponse(rsp *http.Response) (*APIUserDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserReadResponse parses an HTTP response from a APIUserReadWithResponse call
func ParseAPIUserReadResponse(rsp *http.Response) (*APIUserReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserCreateResponse parses an HTTP response from a APIUserCreateWithResponse call
func ParseAPIUserCreateResponse(rsp *http.Response) (*APIUserCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserUpdateResponse parses an HTTP response from a APIUserUpdateWithResponse call
func ParseAPIUserUpdateResponse(rsp *http.Response) (*APIUserUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerDeleteResponse parses an HTTP response from a APIUserAuthServerDeleteWithResponse call
func ParseAPIUserAuthServerDeleteResponse(rsp *http.Response) (*APIUserAuthServerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerReadResponse parses an HTTP response from a APIUserAuthServerReadWithResponse call
func ParseAPIUserAuthServerReadResponse(rsp *http.Response) (*APIUserAuthServerReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerLDAPDeleteResponse parses an HTTP response from a APIUserAuthServerLDAPDeleteWithResponse call
func ParseAPIUserAuthServerLDAPDeleteResponse(rsp *http.Response) (*APIUserAuthServerLDAPDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerLDAPDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerLDAPReadResponse parses an HTTP response from a APIUserAuthServerLDAPReadWithResponse call
func ParseAPIUserAuthServerLDAPReadResponse(rsp *http.Response) (*APIUserAuthServerLDAPReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerLDAPReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerLDAPCreateResponse parses an HTTP response from a APIUserAuthServerLDAPCreateWithResponse call
func ParseAPIUserAuthServerLDAPCreateResponse(rsp *http.Response) (*APIUserAuthServerLDAPCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerLDAPCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerRADIUSDeleteResponse parses an HTTP response from a APIUserAuthServerRADIUSDeleteWithResponse call
func ParseAPIUserAuthServerRADIUSDeleteResponse(rsp *http.Response) (*APIUserAuthServerRADIUSDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerRADIUSDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerRADIUSReadResponse parses an HTTP response from a APIUserAuthServerRADIUSReadWithResponse call
func ParseAPIUserAuthServerRADIUSReadResponse(rsp *http.Response) (*APIUserAuthServerRADIUSReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerRADIUSReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserAuthServerRADIUSCreateResponse parses an HTTP response from a APIUserAuthServerRADIUSCreateWithResponse call
func ParseAPIUserAuthServerRADIUSCreateResponse(rsp *http.Response) (*APIUserAuthServerRADIUSCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserAuthServerRADIUSCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupDeleteResponse parses an HTTP response from a APIUserGroupDeleteWithResponse call
func ParseAPIUserGroupDeleteResponse(rsp *http.Response) (*APIUserGroupDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupReadResponse parses an HTTP response from a APIUserGroupReadWithResponse call
func ParseAPIUserGroupReadResponse(rsp *http.Response) (*APIUserGroupReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupCreateResponse parses an HTTP response from a APIUserGroupCreateWithResponse call
func ParseAPIUserGroupCreateResponse(rsp *http.Response) (*APIUserGroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupUpdateResponse parses an HTTP response from a APIUserGroupUpdateWithResponse call
func ParseAPIUserGroupUpdateResponse(rsp *http.Response) (*APIUserGroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupMemberDeleteResponse parses an HTTP response from a APIUserGroupMemberDeleteWithResponse call
func ParseAPIUserGroupMemberDeleteResponse(rsp *http.Response) (*APIUserGroupMemberDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupMemberDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserGroupMemberCreateResponse parses an HTTP response from a APIUserGroupMemberCreateWithResponse call
func ParseAPIUserGroupMemberCreateResponse(rsp *http.Response) (*APIUserGroupMemberCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserGroupMemberCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserPrivilegeDeleteResponse parses an HTTP response from a APIUserPrivilegeDeleteWithResponse call
func ParseAPIUserPrivilegeDeleteResponse(rsp *http.Response) (*APIUserPrivilegeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserPrivilegeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAPIUserPrivilegeCreateResponse parses an HTTP response from a APIUserPrivilegeCreateWithResponse call
func ParseAPIUserPrivilegeCreateResponse(rsp *http.Response) (*APIUserPrivilegeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserPrivilegeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
